{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/pic/WX20230512-133517@2x.png","path":"pic/WX20230512-133517@2x.png","modified":0,"renderable":0},{"_id":"source/pic/WX20230512-134440@2x.png","path":"pic/WX20230512-134440@2x.png","modified":0,"renderable":0},{"_id":"source/pic/WX20230512-135224@2x.png","path":"pic/WX20230512-135224@2x.png","modified":0,"renderable":0},{"_id":"source/pic/WX20230512-135651@2x.png","path":"pic/WX20230512-135651@2x.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"c7f8b810809e19fd6ad6960bb704d23003c27980","modified":1683918332990},{"_id":"source/_posts/.DS_Store","hash":"a57834f9dac5f28f6e22905625d6433d05de2156","modified":1683918326679},{"_id":"source/_posts/写在开始.md","hash":"0d5ccc458df2a83f3bb3cd33a21c51daa8cecc2a","modified":1683892674000},{"_id":"source/_posts/数据结构——链表、栈、队列.md","hash":"b4f9895d2f283ecb86a145ffa3aa364ad481cd6f","modified":1683900590000},{"_id":"source/_posts/基于springboot——一个简单的BDD实践.md","hash":"13a07f847bbe9e48debdde440b9cf96f2fbf5ef2","modified":1683897437000},{"_id":"source/tags/index.md","hash":"a9e3d11fac50c84e851fd40d40e084373b4f03d4","modified":1683892648000},{"_id":"source/archives/index.md","hash":"8e98c71d451877e5487a1ce2d4f05cb845f259ff","modified":1683892564000},{"_id":"source/about/.DS_Store","hash":"34fe290bc8d934cf4c51deea76c7ec16f3cf4d2f","modified":1683892643000},{"_id":"source/about/index.md","hash":"04a45ffc0eef43a7ca2d032dc48123f1a1ff8709","modified":1683892633000},{"_id":"source/pic/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1683869812000},{"_id":"source/categories/index.md","hash":"05359609ca42b64febcfb614f1d85807d722c60f","modified":1683892548000},{"_id":"source/pic/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683869733000},{"_id":"source/pic/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683870291000},{"_id":"source/pic/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683870747000},{"_id":"source/pic/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683871014000},{"_id":"source/_posts/LeetCode/.DS_Store","hash":"2f60a57aed911407df9e339d1dabbe76d3b97e3f","modified":1683909020094},{"_id":"source/_posts/LeetCode/LeetCode-381.md","hash":"777abdc062681ad840fb89dcb73b14b39e1b8516","modified":1683909000126},{"_id":"source/_posts/LeetCode/LeetCode-386.md","hash":"c5bd9cc0cafbb7969d2f51b9de3fa6d021fc3e30","modified":1683901877000},{"_id":"source/_posts/LeetCode/LeetCode-406.md","hash":"03fc2d53916285218ae43b05c197495b34afad4e","modified":1683901977000},{"_id":"source/_posts/LeetCode/LeetCode-862.md","hash":"63575a3fd134a4f337a66915f771555b5a7a6ce3","modified":1683902111000},{"_id":"source/_posts/LeetCode/LeetCode-934.md","hash":"9923560c36d00d867b4e9e565dbe7194b7c8261c","modified":1683901747000},{"_id":"source/_posts/LeetCode/LeetCode-813.md","hash":"17333ae4f99bf1ee4be5561d220ffe8cb79f2fd8","modified":1683908986088},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683870747000},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683871014000},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683869733000},{"_id":"source/_posts/algorithm/KMP-algorithm.md","hash":"478722cad1b33dd46a1c01e496065a1a21897dac","modified":1683910408004},{"_id":"source/_posts/algorithm/.DS_Store","hash":"a02aaf9cbcbe8e6346567f89a40a4912c55a8630","modified":1683902669000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence.md","hash":"e32bd71e39eda370c49232f529f692eb25e8f8cf","modified":1683901097000},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683870291000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683877536000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683877536000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683877536000},{"_id":"source/_posts/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","hash":"297c539e5c28c45b29268b4f8eb0e5dbc4ab4400","modified":1683878552000},{"_id":"source/_posts/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","hash":"ff2a29a51614cd18803c1224018a0b64e75f8a37","modified":1683878675000},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683877536000},{"_id":"source/_posts/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","hash":"a38ec026bf142a48b3398a50fff2254e44b162aa","modified":1683878830000},{"_id":"source/_posts/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","hash":"bb8e87b6b3f9408d15d78e168f69762edd0568f9","modified":1683878587000},{"_id":"source/_posts/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","hash":"51a4588eb5aff45461044499c6fe9537b92200ae","modified":1683878723000},{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","hash":"c5d0a396f26fba6994b5def5bd467e786dcd5552","modified":1683893649000},{"_id":"source/_posts/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","hash":"3f73e2ffd71da371b29bb2569ac8f2fc0cff2d6d","modified":1683876723000},{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.pxd","hash":"5ebba630a206d943e4bd2861f3fdea9abc0172cf","modified":1683893625000},{"_id":"themes/next/.DS_Store","hash":"7de2994b9a992b599274853f6d1f09bdf3decdc8","modified":1683887537000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1683863729000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1683863729000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1683863729000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1683863729000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1683863729000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1683863729000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1683863729000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1683863729000},{"_id":"themes/next/_config.yml","hash":"9cf55785b379d09240fdd8f9bdc26673e501a2b8","modified":1683914970842},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1683863729000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1683863729000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1683863729000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1683863729000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1683863729000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1683863729000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1683863729000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1683863729000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1683863729000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1683863729000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1683863729000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1683863729000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1683863729000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1683863729000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1683863729000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1683863729000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1683863729000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1683863729000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1683863729000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1683863729000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1683863729000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1683863729000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1683863729000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1683863729000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1683863729000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1683863729000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1683863729000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1683863729000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1683863729000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1683863729000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1683863729000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1683863729000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1683863729000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1683863729000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1683863729000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1683863729000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1683863729000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1683863729000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1683863729000},{"_id":"themes/next/languages/tr.yml","hash":"2b041eeb8bd096f549464f191cfc1ea0181daca4","modified":1683863729000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1683863729000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1683863729000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1683863729000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1683863729000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1683863729000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1683863729000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1683863729000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1683863729000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1683863729000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1683863729000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1683863729000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1683863729000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1683863729000},{"_id":"themes/next/source/.DS_Store","hash":"5d9300b5afbce633e69288e7dec62d747f6a223b","modified":1683886749000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1683863729000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1683863729000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1683863729000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1683863729000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1683863729000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1683863729000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1683863729000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1683863729000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1683863729000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1683863729000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1683863729000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1683863729000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1683863729000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1683863729000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1683863729000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1683863729000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1683863729000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1683863729000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1683863729000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1683863729000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1683863729000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1683863729000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1683863729000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1683863729000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1683863729000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1683863729000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1683863729000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1683863729000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1683863729000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1683863729000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1683863729000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1683863729000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1683863729000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1683863729000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1683863729000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1683863729000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1683863729000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1683863729000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1683863729000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1683863729000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1683863729000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1683863729000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1683863729000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1683863729000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1683863729000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1683863729000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1683863729000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1683863729000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1683863729000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1683863729000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1683863729000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1683863729000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1683863729000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1683863729000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1683863729000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1683863729000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1683863729000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1683863729000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1683863729000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1683863729000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1683863729000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1683863729000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1683863729000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1683863729000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1683863729000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1683863729000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1683863729000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1683863729000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1683863729000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1683863729000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1683863729000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1683863729000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1683863729000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1683863729000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1683863729000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1683863729000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1683863729000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1683863729000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1683863729000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1683863729000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1683863729000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1683863729000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1683863729000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1683863729000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1683863729000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1683863729000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1683863729000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1683863729000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1683863729000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1683863729000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1683863729000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1683863729000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1683863729000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1683863729000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1683863729000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1683863729000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1683863729000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1683863729000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1683863729000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1683863729000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1683863729000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1683863729000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1683863729000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1683863729000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1683863729000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1683863729000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1683863729000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1683863729000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1683863729000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1683863729000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1683863729000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1683863729000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1683863729000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1683863729000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1683863729000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1683863729000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1683863729000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1683863729000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1683863729000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1683863729000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1683863729000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1683863729000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1683863729000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1683863729000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1683863729000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1683863729000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1683863729000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1683863729000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1683863729000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1683863729000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1683863729000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1683863729000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1683863729000},{"_id":"public/sitemap.xml","hash":"9048d00de39fc2de44a90247b9c3a1f3d667b4dd","modified":1683918407038},{"_id":"public/atom.xml","hash":"248336fecda3c62ef155a4f7bab91e05e0402f27","modified":1683918407038},{"_id":"public/archives/index.html","hash":"cfeea531dbbb4134fabd7f39655a27fe902c06ef","modified":1683918407038},{"_id":"public/tags/index.html","hash":"9f3df51da8ebc3374b91f2b18f2a2184a2aee0ab","modified":1683918407038},{"_id":"public/about/index.html","hash":"e94c4b0a61a84037933733a7785d77af6e9098c6","modified":1683918407038},{"_id":"public/categories/index.html","hash":"d7e953171e76d6fee56b4dff0c9ab10d81cb5fb9","modified":1683918407038},{"_id":"public/2023/05/12/写在开始/index.html","hash":"50340bed911cdcd7f4575eca15a660d95cc88085","modified":1683918407038},{"_id":"public/categories/life/index.html","hash":"5d668a7898d66fb8b5ea4100421f0f547e5340e3","modified":1683918407038},{"_id":"public/categories/technology/index.html","hash":"cbd2c320613689f182c277a60125d8e29281fc3a","modified":1683918407038},{"_id":"public/archives/page/2/index.html","hash":"4f02957c9c8e482050f5b84f6d624e8f20541a39","modified":1683918407038},{"_id":"public/archives/2023/index.html","hash":"ad89b90385506a45d56b80bbfc13efe120d14235","modified":1683918407038},{"_id":"public/archives/2023/page/2/index.html","hash":"26fa7317bd51e532dd15af3e0a699d224e653939","modified":1683918407038},{"_id":"public/archives/2023/05/index.html","hash":"56a47008f98963b5178f613548378705a9395f26","modified":1683918407038},{"_id":"public/archives/2023/05/page/2/index.html","hash":"ae0cd50bf53911e1e2eb60bc8a84802370b1c848","modified":1683918407038},{"_id":"public/tags/Trying/index.html","hash":"47b059b09e706e76890837b35ef7353cc9b2da1a","modified":1683918407038},{"_id":"public/page/2/index.html","hash":"4d8b304776521ad59192ab899d69a121a7febd83","modified":1683918407038},{"_id":"public/tags/project/index.html","hash":"b86ab2a4cecc25a48a9a8653a5cbfec2c8a481ad","modified":1683918407038},{"_id":"public/tags/java/index.html","hash":"144702a1d39d292e0105beb8a093ac6ef0bb3bd0","modified":1683918407038},{"_id":"public/tags/Data-structures/index.html","hash":"216d1e33f4fa6d451ffd449a597411dd7ca43e5d","modified":1683918407038},{"_id":"public/tags/LeetCode/index.html","hash":"50bf6f02579291c016c133a8a9f80449b8757df6","modified":1683918407038},{"_id":"public/tags/DFS/index.html","hash":"e06740824d93a0f3c00d69e7ec5f27c902dd68f1","modified":1683918407038},{"_id":"public/tags/persum/index.html","hash":"429f5be422437cc478797ecc24729f2eaf1e0ee6","modified":1683918407038},{"_id":"public/tags/queue/index.html","hash":"fff4d2cf34310873e0b25564cc658d13a5c70e68","modified":1683918407038},{"_id":"public/tags/algorithm/index.html","hash":"4aa347e900c22963eebc92af90d3a52ce6c8947e","modified":1683918407038},{"_id":"public/tags/python/index.html","hash":"5d6708bde13d906a318c4b22701049119625a5fd","modified":1683918407038},{"_id":"public/tags/chatGpt/index.html","hash":"cb725401259de79e67039097e0f8f53267c9db29","modified":1683918407038},{"_id":"public/2023/05/13/LeetCode/LeetCode-813/index.html","hash":"bc845daed07c1248f8d69a601a87ff7c0c95c8a0","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-381/index.html","hash":"7c908b424a4c46e4df36efef17bb09e1f93435db","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-862/index.html","hash":"d6366d47602b89a5ac25ba2657ba64bd69716b81","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-406/index.html","hash":"840a0e1688c7d75e1e02e7b0f0048a3b2f0dc342","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/index.html","hash":"d89e50a6cea9fe9edf95f145757ab42fd796862f","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/index.html","hash":"ed27e7d8bb11e84c494e85c1e51f718cb0870e5b","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-386/index.html","hash":"c7885d1e38b5b868d69488c259d176a03b976896","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-934/index.html","hash":"428d6091488e7da551eede02e8619de81a39fcd2","modified":1683918407038},{"_id":"public/2023/05/12/基于springboot——一个简单的BDD实践/index.html","hash":"77c82b24dba92b58e43bfd2486836d8e1bc38f6e","modified":1683918407038},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/index.html","hash":"bc4054e59761b853e974621e29d5b852bef555fd","modified":1683918407038},{"_id":"public/index.html","hash":"d4e275efe8dd6f97b80f898b45bd3e2ede45dc9c","modified":1683918407038},{"_id":"public/pic/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683918407038},{"_id":"public/pic/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683918407038},{"_id":"public/pic/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683918407038},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1683918407038},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1683918407038},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1683918407038},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1683918407038},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1683918407038},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1683918407038},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1683918407038},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1683918407038},{"_id":"public/pic/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683918407038},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1683918407038},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1683918407038},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1683918407038},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1683918407038},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1683918407038},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1683918407038},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-133517@2x.png","hash":"d617ca3a51222c882123cfdededaac95038da7fa","modified":1683918407038},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-134440@2x.png","hash":"6ed7f7e161d48077cfd87311ac683e54bfb97c31","modified":1683918407038},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-135224@2x.png","hash":"19d8ce9542a08e41d4d0e43c245e09b4579245ce","modified":1683918407038},{"_id":"public/2023/05/12/数据结构——链表、栈、队列/WX20230512-135651@2x.png","hash":"f91c923bca69bdd3255ffdc280f9057897ff5529","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1.png","hash":"72bbe932380a3b2f6cc5b3340cbfa5177d246a26","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","hash":"297c539e5c28c45b29268b4f8eb0e5dbc4ab4400","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1.png","hash":"dc4f1f97a2d6ac9e2dc2bebba8b16765f5a04642","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","hash":"ff2a29a51614cd18803c1224018a0b64e75f8a37","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","hash":"bb8e87b6b3f9408d15d78e168f69762edd0568f9","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","hash":"a38ec026bf142a48b3398a50fff2254e44b162aa","modified":1683918407038},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1683918407038},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1683918407038},{"_id":"public/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","hash":"51a4588eb5aff45461044499c6fe9537b92200ae","modified":1683918407038},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1683918407038},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1683918407038},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1683918407038},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1683918407038},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1683918407038},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1683918407038},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1683918407038},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1683918407038},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1683918407038},{"_id":"public/css/main.css","hash":"29009b51581447256eeccacafbb95c3d691b37f3","modified":1683918407038},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1683918407038},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1683918407038},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1683918407038},{"_id":"public/2023/05/12/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","hash":"c5d0a396f26fba6994b5def5bd467e786dcd5552","modified":1683918407038},{"_id":"public/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","hash":"3f73e2ffd71da371b29bb2569ac8f2fc0cff2d6d","modified":1683918407038},{"_id":"public/2023/05/12/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.pxd","hash":"5ebba630a206d943e4bd2861f3fdea9abc0172cf","modified":1683918407038}],"Category":[{"name":"life","_id":"clhkxjinl0004qqfd4kx09dv1"},{"name":"technology","_id":"clhkxjins000bqqfdfjfr1tjh"}],"Data":[],"Page":[{"title":"Archive","date":"2023-05-12T04:01:36.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: Archive\ndate: 2023-05-12 12:01:36\ntype: \"archives\"\n---\n","updated":"2023-05-12T11:56:04.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clhkxjini0000qqfdcxu1gocv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tag","date":"2023-05-12T03:46:53.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tag\ndate: 2023-05-12 11:46:53\ntype: \"tags\"\n---\n","updated":"2023-05-12T11:57:28.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clhkxjink0002qqfdeevs4sok","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About","date":"2023-05-12T04:01:43.000Z","type":"about","_content":"\n### About Me\n\n----\n\n##### *The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. *\n\n------\n\nHalfway programmer, post-90s, game instrument film technology are involved\n\n\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2023-05-12 12:01:43\ntype : \"about\"\n---\n\n### About Me\n\n----\n\n##### *The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. *\n\n------\n\nHalfway programmer, post-90s, game instrument film technology are involved\n\n\n\n\n\n\n\n\n\n","updated":"2023-05-12T11:57:13.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"clhkxjinm0006qqfdf15q7ryy","content":"<h3 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h3><hr>\n<h5 id=\"The-mass-of-men-lead-lives-of-quiet-desperation-What-is-called-resignation-is-confirmed-desperation\"><a href=\"#The-mass-of-men-lead-lives-of-quiet-desperation-What-is-called-resignation-is-confirmed-desperation\" class=\"headerlink\" title=\"The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. \"></a><em>The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. </em></h5><hr>\n<p>Halfway programmer, post-90s, game instrument film technology are involved</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"About-Me\"><a href=\"#About-Me\" class=\"headerlink\" title=\"About Me\"></a>About Me</h3><hr>\n<h5 id=\"The-mass-of-men-lead-lives-of-quiet-desperation-What-is-called-resignation-is-confirmed-desperation\"><a href=\"#The-mass-of-men-lead-lives-of-quiet-desperation-What-is-called-resignation-is-confirmed-desperation\" class=\"headerlink\" title=\"The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. \"></a><em>The mass of men lead lives of quiet desperation. What is called resignation is confirmed desperation. </em></h5><hr>\n<p>Halfway programmer, post-90s, game instrument film technology are involved</p>\n"},{"title":"Article Categories","date":"2023-05-12T04:01:27.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: Article Categories\ndate: 2023-05-12 12:01:27\ntype: \"categories\"\n---\n","updated":"2023-05-12T11:55:48.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clhkxjinp0008qqfdg41o70ur","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Before Start","date":"2023-05-12T04:14:16.000Z","_content":"\n​\t\tI had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I joined the new company, I decided to build a simple personal blog because I had time and some personal reasons, and the blog will record my technical problems and attempts, as well as record my learning and growth process.\n\n","source":"_posts/写在开始.md","raw":"---\ntitle: Before Start\ndate: 2023-05-12 12:14:16\ncategories: life\ntags:\n  - Trying\n---\n\n​\t\tI had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I joined the new company, I decided to build a simple personal blog because I had time and some personal reasons, and the blog will record my technical problems and attempts, as well as record my learning and growth process.\n\n","slug":"写在开始","published":1,"updated":"2023-05-12T11:57:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinj0001qqfdgat41gno","content":"<p>​        I had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I joined the new company, I decided to build a simple personal blog because I had time and some personal reasons, and the blog will record my technical problems and attempts, as well as record my learning and growth process.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        I had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I joined the new company, I decided to build a simple personal blog because I had time and some personal reasons, and the blog will record my technical problems and attempts, as well as record my learning and growth process.</p>\n"},{"title":"springboot+cucumber practice","date":"2023-05-12T07:09:40.000Z","_content":"\n# springboot+cucumber实践\n\n## why BDD\n\n- **Achieve business objectives.\"**\n- **Focus on user needs\"**\n- **Good readability**\n\nActually, there are other reasons for me as well:\n\n1. Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.\n2. Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.\n\n<!-- more -->\n\n## Sample Project Start\n\n#### Project stratification:\n\n![WX20230512-151458@2x](基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png)\n\n#### Code:\n\nTake **functional configuration** single upline operation as an example\n\nThere is a go live interface in the application\n\n```java\nclass interface ConfigurationCmdService{\n    /**\n     * online\n     *\n     * @param cmd\n     * @return\n     */\n    Result<Boolean>  online(ConfigOnlineCmd cmd);\n}\n/**\n* The interface needs to implement the on-line function\n* Assume that the operation requires only 3 steps:\n* 1. Find out the configuration that needs to go live\n* 2. Go live operation\n* 3. Update the db\n*/\nclass class ConfigurationCmdServiceImpl implements ConfigurationCmdService{\n\t    \n    private final ConfigRepository    repository;\n\n\n    private final ConfigFactory factory;\n\n    public ConfigurationCmdServiceImpl(ConfigRepository repository,ConfigFactory factory){\n        this.repository = repository;\n        this.factory = factory;\n    }\n\n    public ManualQueryServiceImpl(SnapshotRepository repository, ManualSnapshotFactory factory) {\n        this.repository = repository;\n        this.factory = factory;\n    }\n    @AutoWired\n    Result<Boolean>  online(ConfigOnlineCmd cmd){\n        Config config = repository.queryById(cmd.getId());\n        config.online();\n        //可能还有其他的一些操作\n        return repository.update(config);\n    }\n}\n```\n\n## BDD access\n\n### Preliminary work\n\n#### cucumber dependency\n\n```xml\n<!-- bdd dependency -->\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-java</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-junit</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-spring</artifactId>\n</dependency>\n```\n\n#### Combined with junit4\n\n```xml\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <includes>\n                        com.example.**Test.java\n                    </includes>\n                    <testFailureIgnore>false</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit4</artifactId>\n                        <version>2.22.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n#### Combine with jacoco to generate single test reports\n\n```xml\n<plugin>\n  <groupId>org.jacoco</groupId>\n  <artifactId>jacoco-maven-plugin</artifactId>\n  <version>${jacoco.version}</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>prepare-agent</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>report</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>report</goal>\n      </goals>\n      <configuration>\n        <excludes>\n          <!-- -Exclude the toolkit Let's say that the toolkit needs to be excluded-->\n          <exclude>com.example.util.*</exclude>\n        </excludes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n\n\n### First step\n\nStart the class\n\nglue actually tells cucumber to scan the file containing @CucumberContextConfiguration under the corresponding package when it starts\n\n```java\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features = {\"classpath:feature\"},\n        glue = {\"com.example.step\"},\n        plugin = {\"pretty\",\"html:target/html-reports.htm\"}\n)\npublic class ApplicationTest {\n\n}\n```\n\nConfigure the beans that need to be started in the test and some beans that need to be de-mocked,\n\nThe init method is triggered before running, and the reset method is shown in step 4\n\n```java\n@CucumberContextConfiguration\n@SpringBootTest(classes = {\n        SpringTestConfig.class,\n        MockObjectConfiguration.class\n    }\n)\npublic class SpringTest {\n\n    @Autowired\n    private List<Resetable> resetables;\n\n    @Before\n    public void init(){\n        CollectionUtils.emptyIfNull(resetables)\n                .stream().forEach(v->v.reset());\n    }\n}\n```\n\n\n\n### Step 2\n\nCreate a new feature file under classpath:feature\n\n\\#language:zh-CN for Chinese language\n\n```feature\nFeature:Configured crud operations\n  Scenario:Online a configuration\n    Given The following configurations exist\n        |id  | content| status | bizCode |\n        |1\t |xxxxx   | AUDIT  | XXXX    |\n        |2\t |xxxxx   | DRAFT  | XXXX    |\n    When id is \"1\" on line\n        | languageType | bizCode |\n        | zh_CN        | 008     |\n    Then The configuration status of id \"1\" is \"On-line\"\n```\n\n### 第三步\n\n实现上述的功能：\n\n```java\npublic class ContentStep {\n\n    @Autowired\n    private FakeConfigRepositoryImpl       configRepository;\n\n    private String                            result;\n\n    @Autowired\n    private ConfigurationCmdService cmdService;\n\n    private final String DEFAULT_CODE = \"xxx\";\n\n    AssertService contentAssertService = new AssertService<>();\n\n    private static final Map<String,String> codeMap = new HashMap<String,String>(){\n        {\n            put(\"上线\",\"ONLINE\");\n            put(\"审核\",\"AUDIT\");\n            put(\"草稿\",\"DRAFT\");\n        }\n    };\n\n    @Given(\"The following configurations exist\")\n    public void The following configurations exist(DataTable dataTable) {\n        //Create contents based on dataTable\n        List<Config> configs = ConfigTransform.transToConfig(dataTable.entries());\n        contentRepository.createAll(configs);\n    }\n\n    @Then(\"The configuration status of id {string} is {string}\")\n    public void The_configuration_status_of_id_is(String id,String status){\n        Config config = configRepository.queryById(id);\n        //判断结果\n        Assert.assertEquals(config.getStatus(),codeMap.get(status));\n    }\n\n    @When(\"id is {string} on line\")\n    public void id_is_on_line(String id){\n        //Create command\n        ContentCreateParam param = createOnlineCmd(id);\n        //Get Results\n        result = cmdService.online(param).getData().toString();\n    }\n```\n\n### Step 4\n\nmock db, external services. Take mock db as an example\n\nDB uses a map to mock database operations\n\nThe reset operation is used to empty the map, and the map is automatically emptied for each use case.\n\n```java\npublic class FakeConfigRepositoryImpl implements SearchDataRepository ,Resetable{\n\n    @Getter\n    private final Map<String, SearchDataDO> doMap;\n\n    private final ConfigConverter converter;\n\n    public FakeSearchDataRepositoryImpl(SearchDataConverter converter) {\n        this.doMap = new HashMap<>();\n        this.converter = converter;\n    }\n\n    /**\n     * Create Data\n     *\n     * @param config\n     * @return\n     */\n    @Override\n    public boolean create(Config config) {\n        ConfigDO configDo = converter.convert2DO(config);\n        doMap.put(String.valueOf(config.getId()),configDo);\n        return true;\n    }\n\n    /**\n     * update\n     *\n     * @param searchData\n     * @return\n     */\n    @Override\n    public boolean update(Config config) {\n        create(searchData);\n        return true;\n    }\n\n    @Override\n    public void reset() {\n        doMap.clear();\n    }\n```\n\n**spring-test and spring-context versions must be the same, otherwise it will report an error**\n\n","source":"_posts/基于springboot——一个简单的BDD实践.md","raw":"---\ntitle: springboot+cucumber practice\ndate: 2023-05-12 15:09:40\ncategories: technology\ntags:\n  - project\n  - java\n---\n\n# springboot+cucumber实践\n\n## why BDD\n\n- **Achieve business objectives.\"**\n- **Focus on user needs\"**\n- **Good readability**\n\nActually, there are other reasons for me as well:\n\n1. Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.\n2. Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.\n\n<!-- more -->\n\n## Sample Project Start\n\n#### Project stratification:\n\n![WX20230512-151458@2x](基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png)\n\n#### Code:\n\nTake **functional configuration** single upline operation as an example\n\nThere is a go live interface in the application\n\n```java\nclass interface ConfigurationCmdService{\n    /**\n     * online\n     *\n     * @param cmd\n     * @return\n     */\n    Result<Boolean>  online(ConfigOnlineCmd cmd);\n}\n/**\n* The interface needs to implement the on-line function\n* Assume that the operation requires only 3 steps:\n* 1. Find out the configuration that needs to go live\n* 2. Go live operation\n* 3. Update the db\n*/\nclass class ConfigurationCmdServiceImpl implements ConfigurationCmdService{\n\t    \n    private final ConfigRepository    repository;\n\n\n    private final ConfigFactory factory;\n\n    public ConfigurationCmdServiceImpl(ConfigRepository repository,ConfigFactory factory){\n        this.repository = repository;\n        this.factory = factory;\n    }\n\n    public ManualQueryServiceImpl(SnapshotRepository repository, ManualSnapshotFactory factory) {\n        this.repository = repository;\n        this.factory = factory;\n    }\n    @AutoWired\n    Result<Boolean>  online(ConfigOnlineCmd cmd){\n        Config config = repository.queryById(cmd.getId());\n        config.online();\n        //可能还有其他的一些操作\n        return repository.update(config);\n    }\n}\n```\n\n## BDD access\n\n### Preliminary work\n\n#### cucumber dependency\n\n```xml\n<!-- bdd dependency -->\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-java</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-junit</artifactId>\n  <scope>test</scope>\n</dependency>\n<dependency>\n  <groupId>io.cucumber</groupId>\n  <artifactId>cucumber-spring</artifactId>\n</dependency>\n```\n\n#### Combined with junit4\n\n```xml\n<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-surefire-plugin</artifactId>\n                <version>${maven-surefire-plugin.version}</version>\n                <configuration>\n                    <includes>\n                        com.example.**Test.java\n                    </includes>\n                    <testFailureIgnore>false</testFailureIgnore>\n                    <skipTests>false</skipTests>\n                </configuration>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.apache.maven.surefire</groupId>\n                        <artifactId>surefire-junit4</artifactId>\n                        <version>2.22.2</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n```\n\n#### Combine with jacoco to generate single test reports\n\n```xml\n<plugin>\n  <groupId>org.jacoco</groupId>\n  <artifactId>jacoco-maven-plugin</artifactId>\n  <version>${jacoco.version}</version>\n  <executions>\n    <execution>\n      <goals>\n        <goal>prepare-agent</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>report</id>\n      <phase>prepare-package</phase>\n      <goals>\n        <goal>report</goal>\n      </goals>\n      <configuration>\n        <excludes>\n          <!-- -Exclude the toolkit Let's say that the toolkit needs to be excluded-->\n          <exclude>com.example.util.*</exclude>\n        </excludes>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\n```\n\n\n\n### First step\n\nStart the class\n\nglue actually tells cucumber to scan the file containing @CucumberContextConfiguration under the corresponding package when it starts\n\n```java\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        features = {\"classpath:feature\"},\n        glue = {\"com.example.step\"},\n        plugin = {\"pretty\",\"html:target/html-reports.htm\"}\n)\npublic class ApplicationTest {\n\n}\n```\n\nConfigure the beans that need to be started in the test and some beans that need to be de-mocked,\n\nThe init method is triggered before running, and the reset method is shown in step 4\n\n```java\n@CucumberContextConfiguration\n@SpringBootTest(classes = {\n        SpringTestConfig.class,\n        MockObjectConfiguration.class\n    }\n)\npublic class SpringTest {\n\n    @Autowired\n    private List<Resetable> resetables;\n\n    @Before\n    public void init(){\n        CollectionUtils.emptyIfNull(resetables)\n                .stream().forEach(v->v.reset());\n    }\n}\n```\n\n\n\n### Step 2\n\nCreate a new feature file under classpath:feature\n\n\\#language:zh-CN for Chinese language\n\n```feature\nFeature:Configured crud operations\n  Scenario:Online a configuration\n    Given The following configurations exist\n        |id  | content| status | bizCode |\n        |1\t |xxxxx   | AUDIT  | XXXX    |\n        |2\t |xxxxx   | DRAFT  | XXXX    |\n    When id is \"1\" on line\n        | languageType | bizCode |\n        | zh_CN        | 008     |\n    Then The configuration status of id \"1\" is \"On-line\"\n```\n\n### 第三步\n\n实现上述的功能：\n\n```java\npublic class ContentStep {\n\n    @Autowired\n    private FakeConfigRepositoryImpl       configRepository;\n\n    private String                            result;\n\n    @Autowired\n    private ConfigurationCmdService cmdService;\n\n    private final String DEFAULT_CODE = \"xxx\";\n\n    AssertService contentAssertService = new AssertService<>();\n\n    private static final Map<String,String> codeMap = new HashMap<String,String>(){\n        {\n            put(\"上线\",\"ONLINE\");\n            put(\"审核\",\"AUDIT\");\n            put(\"草稿\",\"DRAFT\");\n        }\n    };\n\n    @Given(\"The following configurations exist\")\n    public void The following configurations exist(DataTable dataTable) {\n        //Create contents based on dataTable\n        List<Config> configs = ConfigTransform.transToConfig(dataTable.entries());\n        contentRepository.createAll(configs);\n    }\n\n    @Then(\"The configuration status of id {string} is {string}\")\n    public void The_configuration_status_of_id_is(String id,String status){\n        Config config = configRepository.queryById(id);\n        //判断结果\n        Assert.assertEquals(config.getStatus(),codeMap.get(status));\n    }\n\n    @When(\"id is {string} on line\")\n    public void id_is_on_line(String id){\n        //Create command\n        ContentCreateParam param = createOnlineCmd(id);\n        //Get Results\n        result = cmdService.online(param).getData().toString();\n    }\n```\n\n### Step 4\n\nmock db, external services. Take mock db as an example\n\nDB uses a map to mock database operations\n\nThe reset operation is used to empty the map, and the map is automatically emptied for each use case.\n\n```java\npublic class FakeConfigRepositoryImpl implements SearchDataRepository ,Resetable{\n\n    @Getter\n    private final Map<String, SearchDataDO> doMap;\n\n    private final ConfigConverter converter;\n\n    public FakeSearchDataRepositoryImpl(SearchDataConverter converter) {\n        this.doMap = new HashMap<>();\n        this.converter = converter;\n    }\n\n    /**\n     * Create Data\n     *\n     * @param config\n     * @return\n     */\n    @Override\n    public boolean create(Config config) {\n        ConfigDO configDo = converter.convert2DO(config);\n        doMap.put(String.valueOf(config.getId()),configDo);\n        return true;\n    }\n\n    /**\n     * update\n     *\n     * @param searchData\n     * @return\n     */\n    @Override\n    public boolean update(Config config) {\n        create(searchData);\n        return true;\n    }\n\n    @Override\n    public void reset() {\n        doMap.clear();\n    }\n```\n\n**spring-test and spring-context versions must be the same, otherwise it will report an error**\n\n","slug":"基于springboot——一个简单的BDD实践","published":1,"updated":"2023-05-12T13:17:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinl0003qqfd6bzpd42i","content":"<h1 id=\"springboot-cucumber实践\"><a href=\"#springboot-cucumber实践\" class=\"headerlink\" title=\"springboot+cucumber实践\"></a>springboot+cucumber实践</h1><h2 id=\"why-BDD\"><a href=\"#why-BDD\" class=\"headerlink\" title=\"why BDD\"></a>why BDD</h2><ul>\n<li><strong>Achieve business objectives.”</strong></li>\n<li><strong>Focus on user needs”</strong></li>\n<li><strong>Good readability</strong></li>\n</ul>\n<p>Actually, there are other reasons for me as well:</p>\n<ol>\n<li>Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.</li>\n<li>Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.</li>\n</ol>\n<span id=\"more\"></span>\n<h2 id=\"Sample-Project-Start\"><a href=\"#Sample-Project-Start\" class=\"headerlink\" title=\"Sample Project Start\"></a>Sample Project Start</h2><h4 id=\"Project-stratification\"><a href=\"#Project-stratification\" class=\"headerlink\" title=\"Project stratification:\"></a>Project stratification:</h4><p><img src=\"/en/2023/05/12/%E5%9F%BA%E4%BA%8Espringboot%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84BDD%E5%AE%9E%E8%B7%B5/WX20230512-151458@2x.png\" alt=\"WX20230512-151458@2x\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><p>Take <strong>functional configuration</strong> single upline operation as an example</p>\n<p>There is a go live interface in the application</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">interface</span> ConfigurationCmdService&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * online</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cmd</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The interface needs to implement the on-line function</span></span><br><span class=\"line\"><span class=\"comment\">* Assume that the operation requires only 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">* 1. Find out the configuration that needs to go live</span></span><br><span class=\"line\"><span class=\"comment\">* 2. Go live operation</span></span><br><span class=\"line\"><span class=\"comment\">* 3. Update the db</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">class</span> ConfigurationCmdServiceImpl <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCmdService</span>&#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigRepository    repository;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConfigurationCmdServiceImpl</span><span class=\"params\">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ManualQueryServiceImpl</span><span class=\"params\">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AutoWired</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> repository.queryById(cmd.getId());</span><br><span class=\"line\">        config.online();</span><br><span class=\"line\">        <span class=\"comment\">//可能还有其他的一些操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.update(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BDD-access\"><a href=\"#BDD-access\" class=\"headerlink\" title=\"BDD access\"></a>BDD access</h2><h3 id=\"Preliminary-work\"><a href=\"#Preliminary-work\" class=\"headerlink\" title=\"Preliminary work\"></a>Preliminary work</h3><h4 id=\"cucumber-dependency\"><a href=\"#cucumber-dependency\" class=\"headerlink\" title=\"cucumber dependency\"></a>cucumber dependency</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bdd dependency --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Combined-with-junit4\"><a href=\"#Combined-with-junit4\" class=\"headerlink\" title=\"Combined with junit4\"></a>Combined with junit4</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                        com.example.**Test.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">testFailureIgnore</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">testFailureIgnore</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">skipTests</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">skipTests</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.surefire<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>surefire-junit4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Combine-with-jacoco-to-generate-single-test-reports\"><a href=\"#Combine-with-jacoco-to-generate-single-test-reports\" class=\"headerlink\" title=\"Combine with jacoco to generate single test reports\"></a>Combine with jacoco to generate single test reports</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jacoco<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jacoco-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>prepare-agent<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>prepare-package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- -Exclude the toolkit Let&#x27;s say that the toolkit needs to be excluded--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>com.example.util.*<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"First-step\"><a href=\"#First-step\" class=\"headerlink\" title=\"First step\"></a>First step</h3><p>Start the class</p>\n<p>glue actually tells cucumber to scan the file containing @CucumberContextConfiguration under the corresponding package when it starts</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(Cucumber.class)</span></span><br><span class=\"line\"><span class=\"meta\">@CucumberOptions(</span></span><br><span class=\"line\"><span class=\"meta\">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Configure the beans that need to be started in the test and some beans that need to be de-mocked,</p>\n<p>The init method is triggered before running, and the reset method is shown in step 4</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CucumberContextConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        SpringTestConfig.class,</span></span><br><span class=\"line\"><span class=\"meta\">        MockObjectConfiguration.class</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Resetable&gt; resetables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        CollectionUtils.emptyIfNull(resetables)</span><br><span class=\"line\">                .stream().forEach(v-&gt;v.reset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>Create a new feature file under classpath:feature</p>\n<p>#language:zh-CN for Chinese language</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>:Configured crud operations</span><br><span class=\"line\">  <span class=\"keyword\">Scenario</span>:Online a configuration</span><br><span class=\"line\">    <span class=\"keyword\">Given</span> The following configurations exist</span><br><span class=\"line\">        |<span class=\"string\">id  </span>|<span class=\"string\"> content</span>|<span class=\"string\"> status </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\">1\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> AUDIT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">        |<span class=\"string\">2\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> DRAFT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">    <span class=\"keyword\">When</span> id is <span class=\"string\">&quot;1&quot;</span> on line</span><br><span class=\"line\">        |<span class=\"string\"> languageType </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\"> zh_CN        </span>|<span class=\"string\"> 008     </span>|</span><br><span class=\"line\">    <span class=\"keyword\">Then</span> The configuration status of id <span class=\"string\">&quot;1&quot;</span> is <span class=\"string\">&quot;On-line&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>实现上述的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentStep</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                            result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurationCmdService cmdService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_CODE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AssertService</span> <span class=\"variable\">contentAssertService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertService</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String,String&gt; codeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;上线&quot;</span>,<span class=\"string\">&quot;ONLINE&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;审核&quot;</span>,<span class=\"string\">&quot;AUDIT&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;草稿&quot;</span>,<span class=\"string\">&quot;DRAFT&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Given(&quot;The following configurations exist&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> The following configurations <span class=\"title function_\">exist</span><span class=\"params\">(DataTable dataTable)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Create contents based on dataTable</span></span><br><span class=\"line\">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class=\"line\">        contentRepository.createAll(configs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Then(&quot;The configuration status of id &#123;string&#125; is &#123;string&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">The_configuration_status_of_id_is</span><span class=\"params\">(String id,String status)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> configRepository.queryById(id);</span><br><span class=\"line\">        <span class=\"comment\">//判断结果</span></span><br><span class=\"line\">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@When(&quot;id is &#123;string&#125; on line&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">id_is_on_line</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Create command</span></span><br><span class=\"line\">        <span class=\"type\">ContentCreateParam</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> createOnlineCmd(id);</span><br><span class=\"line\">        <span class=\"comment\">//Get Results</span></span><br><span class=\"line\">        result = cmdService.online(param).getData().toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>mock db, external services. Take mock db as an example</p>\n<p>DB uses a map to mock database operations</p>\n<p>The reset operation is used to empty the map, and the map is automatically emptied for each use case.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FakeConfigRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SearchDataRepository</span> ,Resetable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigConverter converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FakeSearchDataRepositoryImpl</span><span class=\"params\">(SearchDataConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.converter = converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create Data</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">create</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigDO</span> <span class=\"variable\">configDo</span> <span class=\"operator\">=</span> converter.convert2DO(config);</span><br><span class=\"line\">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * update</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> searchData</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">update</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        create(searchData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reset</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doMap.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>spring-test and spring-context versions must be the same, otherwise it will report an error</strong></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"springboot-cucumber实践\"><a href=\"#springboot-cucumber实践\" class=\"headerlink\" title=\"springboot+cucumber实践\"></a>springboot+cucumber实践</h1><h2 id=\"why-BDD\"><a href=\"#why-BDD\" class=\"headerlink\" title=\"why BDD\"></a>why BDD</h2><ul>\n<li><strong>Achieve business objectives.”</strong></li>\n<li><strong>Focus on user needs”</strong></li>\n<li><strong>Good readability</strong></li>\n</ul>\n<p>Actually, there are other reasons for me as well:</p>\n<ol>\n<li>Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.</li>\n<li>Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.</li>\n</ol>","more":"<h2 id=\"Sample-Project-Start\"><a href=\"#Sample-Project-Start\" class=\"headerlink\" title=\"Sample Project Start\"></a>Sample Project Start</h2><h4 id=\"Project-stratification\"><a href=\"#Project-stratification\" class=\"headerlink\" title=\"Project stratification:\"></a>Project stratification:</h4><p><img src=\"/en/2023/05/12/%E5%9F%BA%E4%BA%8Espringboot%E2%80%94%E2%80%94%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84BDD%E5%AE%9E%E8%B7%B5/WX20230512-151458@2x.png\" alt=\"WX20230512-151458@2x\"></p>\n<h4 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h4><p>Take <strong>functional configuration</strong> single upline operation as an example</p>\n<p>There is a go live interface in the application</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">interface</span> ConfigurationCmdService&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * online</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cmd</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* The interface needs to implement the on-line function</span></span><br><span class=\"line\"><span class=\"comment\">* Assume that the operation requires only 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">* 1. Find out the configuration that needs to go live</span></span><br><span class=\"line\"><span class=\"comment\">* 2. Go live operation</span></span><br><span class=\"line\"><span class=\"comment\">* 3. Update the db</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">class</span> ConfigurationCmdServiceImpl <span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurationCmdService</span>&#123;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigRepository    repository;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ConfigurationCmdServiceImpl</span><span class=\"params\">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ManualQueryServiceImpl</span><span class=\"params\">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AutoWired</span></span><br><span class=\"line\">    Result&lt;Boolean&gt;  <span class=\"title function_\">online</span><span class=\"params\">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> repository.queryById(cmd.getId());</span><br><span class=\"line\">        config.online();</span><br><span class=\"line\">        <span class=\"comment\">//可能还有其他的一些操作</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> repository.update(config);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"BDD-access\"><a href=\"#BDD-access\" class=\"headerlink\" title=\"BDD access\"></a>BDD access</h2><h3 id=\"Preliminary-work\"><a href=\"#Preliminary-work\" class=\"headerlink\" title=\"Preliminary work\"></a>Preliminary work</h3><h4 id=\"cucumber-dependency\"><a href=\"#cucumber-dependency\" class=\"headerlink\" title=\"cucumber dependency\"></a>cucumber dependency</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- bdd dependency --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.cucumber<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cucumber-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Combined-with-junit4\"><a href=\"#Combined-with-junit4\" class=\"headerlink\" title=\"Combined with junit4\"></a>Combined with junit4</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-surefire-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                        com.example.**Test.java</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">testFailureIgnore</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">testFailureIgnore</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">skipTests</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">skipTests</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.surefire<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>surefire-junit4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.22.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Combine-with-jacoco-to-generate-single-test-reports\"><a href=\"#Combine-with-jacoco-to-generate-single-test-reports\" class=\"headerlink\" title=\"Combine with jacoco to generate single test reports\"></a>Combine with jacoco to generate single test reports</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.jacoco<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jacoco-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>prepare-agent<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>prepare-package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>report<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- -Exclude the toolkit Let&#x27;s say that the toolkit needs to be excluded--&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">exclude</span>&gt;</span>com.example.util.*<span class=\"tag\">&lt;/<span class=\"name\">exclude</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">excludes</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"First-step\"><a href=\"#First-step\" class=\"headerlink\" title=\"First step\"></a>First step</h3><p>Start the class</p>\n<p>glue actually tells cucumber to scan the file containing @CucumberContextConfiguration under the corresponding package when it starts</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(Cucumber.class)</span></span><br><span class=\"line\"><span class=\"meta\">@CucumberOptions(</span></span><br><span class=\"line\"><span class=\"meta\">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Configure the beans that need to be started in the test and some beans that need to be de-mocked,</p>\n<p>The init method is triggered before running, and the reset method is shown in step 4</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CucumberContextConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest(classes = &#123;</span></span><br><span class=\"line\"><span class=\"meta\">        SpringTestConfig.class,</span></span><br><span class=\"line\"><span class=\"meta\">        MockObjectConfiguration.class</span></span><br><span class=\"line\"><span class=\"meta\">    &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Resetable&gt; resetables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        CollectionUtils.emptyIfNull(resetables)</span><br><span class=\"line\">                .stream().forEach(v-&gt;v.reset());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-2\"><a href=\"#Step-2\" class=\"headerlink\" title=\"Step 2\"></a>Step 2</h3><p>Create a new feature file under classpath:feature</p>\n<p>#language:zh-CN for Chinese language</p>\n<figure class=\"highlight feature\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Feature</span>:Configured crud operations</span><br><span class=\"line\">  <span class=\"keyword\">Scenario</span>:Online a configuration</span><br><span class=\"line\">    <span class=\"keyword\">Given</span> The following configurations exist</span><br><span class=\"line\">        |<span class=\"string\">id  </span>|<span class=\"string\"> content</span>|<span class=\"string\"> status </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\">1\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> AUDIT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">        |<span class=\"string\">2\t </span>|<span class=\"string\">xxxxx   </span>|<span class=\"string\"> DRAFT  </span>|<span class=\"string\"> XXXX    </span>|</span><br><span class=\"line\">    <span class=\"keyword\">When</span> id is <span class=\"string\">&quot;1&quot;</span> on line</span><br><span class=\"line\">        |<span class=\"string\"> languageType </span>|<span class=\"string\"> bizCode </span>|</span><br><span class=\"line\">        |<span class=\"string\"> zh_CN        </span>|<span class=\"string\"> 008     </span>|</span><br><span class=\"line\">    <span class=\"keyword\">Then</span> The configuration status of id <span class=\"string\">&quot;1&quot;</span> is <span class=\"string\">&quot;On-line&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h3><p>实现上述的功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ContentStep</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                            result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ConfigurationCmdService cmdService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_CODE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xxx&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">AssertService</span> <span class=\"variable\">contentAssertService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertService</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Map&lt;String,String&gt; codeMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;上线&quot;</span>,<span class=\"string\">&quot;ONLINE&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;审核&quot;</span>,<span class=\"string\">&quot;AUDIT&quot;</span>);</span><br><span class=\"line\">            put(<span class=\"string\">&quot;草稿&quot;</span>,<span class=\"string\">&quot;DRAFT&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Given(&quot;The following configurations exist&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> The following configurations <span class=\"title function_\">exist</span><span class=\"params\">(DataTable dataTable)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Create contents based on dataTable</span></span><br><span class=\"line\">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class=\"line\">        contentRepository.createAll(configs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Then(&quot;The configuration status of id &#123;string&#125; is &#123;string&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">The_configuration_status_of_id_is</span><span class=\"params\">(String id,String status)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Config</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> configRepository.queryById(id);</span><br><span class=\"line\">        <span class=\"comment\">//判断结果</span></span><br><span class=\"line\">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@When(&quot;id is &#123;string&#125; on line&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">id_is_on_line</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Create command</span></span><br><span class=\"line\">        <span class=\"type\">ContentCreateParam</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> createOnlineCmd(id);</span><br><span class=\"line\">        <span class=\"comment\">//Get Results</span></span><br><span class=\"line\">        result = cmdService.online(param).getData().toString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Step-4\"><a href=\"#Step-4\" class=\"headerlink\" title=\"Step 4\"></a>Step 4</h3><p>mock db, external services. Take mock db as an example</p>\n<p>DB uses a map to mock database operations</p>\n<p>The reset operation is used to empty the map, and the map is automatically emptied for each use case.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FakeConfigRepositoryImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SearchDataRepository</span> ,Resetable&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Getter</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConfigConverter converter;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">FakeSearchDataRepositoryImpl</span><span class=\"params\">(SearchDataConverter converter)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.doMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.converter = converter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Create Data</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> config</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">create</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ConfigDO</span> <span class=\"variable\">configDo</span> <span class=\"operator\">=</span> converter.convert2DO(config);</span><br><span class=\"line\">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * update</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> searchData</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">update</span><span class=\"params\">(Config config)</span> &#123;</span><br><span class=\"line\">        create(searchData);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reset</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        doMap.clear();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>spring-test and spring-context versions must be the same, otherwise it will report an error</strong></p>"},{"title":"Data structures - chain tables, stacks, queues","date":"2023-05-12T05:15:17.000Z","_content":"\n### Preface\n\nLink tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.\n\n### Linked list\n\nA threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.\n\n![linkedlist](数据结构——链表、栈、队列/WX20230512-133517@2x.png)\n\n<!-- more -->\n\nTo implement a linked list of tables using java, you first need to define a node\n\n```java\nclass Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n```\n\nTherefore, for a linked list, if you want to find an element based on the index, you can only start from the beginning with time complexity O(N).\n\nIf a predecessor node is added to the Node, then it becomes a bi-directional linked list.\n\n![doublelinkedlist](数据结构——链表、栈、队列/WX20230512-134440@2x.png)\n\nThe LinkedList in Java is a typical two-way linked list.\n\nIf you combine HashMap(Set) on LinkedList, it is **LinkedHashMap**(Set), which ensures the orderliness of the elements and allows O1 to get the elements.\n\nA simple implementation of a linked list is as follows\n\n```java\n// Singly linked list\n// The head node does not store elements\n// Need to record the head node, content is null; record the length of the list\npublic class LinkList<T> implements Iterable<T>{\n    private Node head; // head node\n    private int N; // length of the list\n    public class Node<T> {\n        T item; // store element\n        Node next; // point to the next node, a Node object\n        public Node(T item, Node next){ // constructor with arguments\n            this.item = item;\n            this.next = next;\n        }\n    }\n    public LinkList(){ // constructor with no arguments\n        this.head = new Node(null,null);\n        this.N = 0;\n    }\n    public void clear(){ // clear the list: head node does not point to the next element\n        N=0;\n        head.next = null;\n    }\n    public  boolean isEmpty(){ // check if the list is empty\n        return N==0;\n    }\n    public int length(){ // get the length of the list\n        return N;\n    }\n    public T get(int i){ // get the i-th element\n        // Use loop, traverse from the head node, find i times\n        Node n = head.next;\n        for (int index =0;index <i;index++){\n            n = n.next; // loop to point to the next node\n        }\n        return (T) n.item;\n    }\n    public void insert(T t){ // insert data\n                             // adding elements only requires the last node to point to the new node\n        Node n = head;\n        while(n.next!=null){\n            n = n.next; // tail node cannot be null\n        }\n        Node newNode = new Node(t,null);\n        n.next =newNode;\n        N++;\n    }\n    public void insert(int i,T t){ // insert data before i\n                                   // find the node before i\n        Node pre = head;\n        for (int index = 0;index<=i-1;index++){ // because the head node actually loops i-1 times\n            pre = pre.next;\n        }\n                                   // find the i node\n        Node curr = pre.next;\n        // create a new node and point to i\n        Node newNode = new Node(t,curr);\n        // node before i points to the new node\n        pre.next = newNode;\n        // increment by 1\n        N++;\n    }\n    public T remove (int i){ // remove the i-th element and return it\n        // get the node before i\n        Node pre = head;\n        for (int index = 0;index<=i-1;index++){\n            pre = pre.next;\n        }\n        // find i\n        Node curr = pre.next;\n        // find the node after i\n        Node fur = curr.next;\n        // connect the two and decrement by 1\n        pre.next = fur;\n        N--;\n        return (T) curr.item;\n\n    }\n    public int indexOf(T t){ // return the first occurrence of the element\n        // start iterating from the head node, find every node's element, take out item and compare with T\n        Node n = head;\n        for (int i =0;n.next!=null;i++){ // keep finding as long as the next element is not null\n            n = n.next;\n            if (n.item.equals(t)){\n                return i;\n            } // no alert has been set for elements that do not exist\n        }\n        return -1;\n    }\n    public void reverse(){  //Flipping single linked list; Recursive flipping\n        if (isEmpty()){\n            return;\n        }\n        else{\n            reverse(head.next);\n        }\n    }\n    public Node reverse(Node curr){ //flip the single-linked cur, and return\n        if(curr.next==null){\n            head.next = curr;\n            return curr;\n        }\n        //recursively reverse the next node of the current node\n        Node per = reverse(curr.next); // the new node is the next node after the flip\n        per.next = curr; //the next node of the new node is the previous node before reversal\n        curr.next = null; //this node is set as the tail node\n        return curr;\n            //not the last node then recursively flip the node before the last node\n    }\n\nTranslated with www.DeepL.com/Translator (free version)\n\n    @Override\n    public Iterator iterator() {\n\n        return new LIterator();\n    }\n    private class LIterator implements Iterator {\n        private node n;\n        public LIterator(){\n            this.n = head; //// initialize\n        }\n        @Override\n        public boolean hasNext() { //execute next continuously if the hasNext condition is met\n            return n.next!=null;\n        }\n\n        @Override\n        public Object next() {\n            n = n.next;\n            return n.item;\n        }\n    }\n}\n\n```\n\n#### \tAlgorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.\n\n### Queue/Stack\n\n​\tChained tables and queues are essentially a special type of single-linked table, differing in that they restrict the order of insertion/deletion of elements.\n\n#### Queues:\n\nFor a queue, elements enter from one end and exit from the other, that is, the elements that enter first are deleted first, called in English: First In, First Out, abbreviated FIFO.\n\n![queue](数据结构——链表、栈、队列/WX20230512-135224@2x.png)\n\n​\tThe more classical use of queues is in breadth-first search (hierarchical traversal of trees is actually also breadth-first search). In addition, queues can also have order, called priority queues, which have been implemented in java and are called **PriorityQueue**.\n\n#### \t\tQueue Code：\n\n```java\n// FIFO Compared to a stack, one end of a queue goes in and one end goes out.\npublic class Queue<T> implements Iterable<T> {\n    private class Node<T>{\n        public T item;\n        public Node next;\n        public Node(T item,Node next){\n            this.item = item;\n            this.next = next;\n        }\n    }\n    private Node head;  //head\n    private int N;\n    private Node last;  //tail\n    public Queue(){\n        this.head = new Node(null,null);\n        this.last = null;\n        this.N = 0;\n    }\n    public boolean isEmpty(){\n        return N==0;\n    }\n    public int size(){\n        return N;\n    }\n    public void enqueue(T t){           //Insert the chain from tail, in order from the first node\n        if (last == null){\n            last= new Node(t,null);\n            head.next = last;\n        }\n        else{\n            Node oldlast = last;\n            last = new Node(t,null);\n            oldlast.next = last;\n        }\n        N++;\n    }\n    public T dequeue(){\n        if (isEmpty()){\n            return null;            //Header node start deletion\n        }\n        Node oldeFirst = head.next;\n        head.next = oldeFirst.next;\n        N--;\n        //The delete queue is deleting elements, so it needs to be reset last\n        if (isEmpty()){\n            last = null;\n        }\n        return (T)oldeFirst.item;\n    }\n    @Override\n    public Iterator<T> iterator(){\n        return new QIterator();\n    }\n    private class QIterator implements Iterator{\n        private Node n;\n        public QIterator(){\n            this.n = head;\n        }\n        @Override\n        public boolean hasNext() {\n            return n.next!=null;\n        }\n\n        @Override\n        public Object next() {\n            n = n.next;\n            return (T)n.item;\n        }\n    }\n}\n\n\n```\n\n\n\n#### stacks：\n\nThe stack is the opposite, elements from one end into, to be from one end out. That is, first in, last out, called in English: First In, Last Out, or FILO.\n\n![stack](数据结构——链表、栈、队列/WX20230512-135651@2x.png)\n\n​\tStacks are often used in algorithms, such as bracket punctuation matching problems, monotone stack problems, etc. Recursion is also a special use of stacks.\n\n#### \t\tStack Code:\n\n```java\npublic class Stack<T> implements Iterable<T>{\n\n    private class Node<T>{     \n        public T item;\n        public Node next;\n        public Node(T item,Node next){\n            this.item =item;\n            this.next = next;\n        }\n    }\n    private int N;          //Number of stack elements\n    private Node head;      \n    public Stack(){\n        this.N = N;\n        this.head = new Node(null,null);\n    }\n    public boolean isEmpty(){\n        return N==0;\n    }\n    public int size(){\n        return N;\n    }\n    //insert\n    public void push(T t){\n        //Find the first node pointed to by the first node\n        Node oldNode = head.next;\n        //create new node\n        Node newNode = new Node(t,null);\n        //The first node points to the new node\n        head.next = newNode;\n        //The new node points to the original first node\n        newNode.next = oldNode;\n        N++;\n    }\n    public T pop(){\n        //The head node points to the first node\n        Node oldFirst = head.next;\n        //head.next = oldFirst.next is not safe and needs to be verified\n        if (oldFirst==null){\n            return null;\n        }\n        head.next = oldFirst.next;\n        N--;\n        return (T)oldFirst.item;\n    }\n    @Override\n    public Iterator<T> iterator() {\n        return new LIterator();\n    }\n    private class LIterator implements Iterator{\n        private Node n;\n        public LIterator(){\n            this.n = head;\n        }\n        @Override\n        public boolean hasNext() {\n            return n.next!=null;\n        }\n        @Override\n        public Object next() {\n            n = n.next;\n            return n.item;\n        }\n    }\n\n\n}\n```\n\n","source":"_posts/数据结构——链表、栈、队列.md","raw":"---\ntitle: Data structures - chain tables, stacks, queues\ndate: 2023-05-12 13:15:17\ncategories: technology\ntags:\n  - Data structures\n  - java\n---\n\n### Preface\n\nLink tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.\n\n### Linked list\n\nA threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.\n\n![linkedlist](数据结构——链表、栈、队列/WX20230512-133517@2x.png)\n\n<!-- more -->\n\nTo implement a linked list of tables using java, you first need to define a node\n\n```java\nclass Node<T> {\n        T       value;\n        Node<T> next;\n\n        public Node(T value) {\n            this.value = value;\n        }\n    }\n```\n\nTherefore, for a linked list, if you want to find an element based on the index, you can only start from the beginning with time complexity O(N).\n\nIf a predecessor node is added to the Node, then it becomes a bi-directional linked list.\n\n![doublelinkedlist](数据结构——链表、栈、队列/WX20230512-134440@2x.png)\n\nThe LinkedList in Java is a typical two-way linked list.\n\nIf you combine HashMap(Set) on LinkedList, it is **LinkedHashMap**(Set), which ensures the orderliness of the elements and allows O1 to get the elements.\n\nA simple implementation of a linked list is as follows\n\n```java\n// Singly linked list\n// The head node does not store elements\n// Need to record the head node, content is null; record the length of the list\npublic class LinkList<T> implements Iterable<T>{\n    private Node head; // head node\n    private int N; // length of the list\n    public class Node<T> {\n        T item; // store element\n        Node next; // point to the next node, a Node object\n        public Node(T item, Node next){ // constructor with arguments\n            this.item = item;\n            this.next = next;\n        }\n    }\n    public LinkList(){ // constructor with no arguments\n        this.head = new Node(null,null);\n        this.N = 0;\n    }\n    public void clear(){ // clear the list: head node does not point to the next element\n        N=0;\n        head.next = null;\n    }\n    public  boolean isEmpty(){ // check if the list is empty\n        return N==0;\n    }\n    public int length(){ // get the length of the list\n        return N;\n    }\n    public T get(int i){ // get the i-th element\n        // Use loop, traverse from the head node, find i times\n        Node n = head.next;\n        for (int index =0;index <i;index++){\n            n = n.next; // loop to point to the next node\n        }\n        return (T) n.item;\n    }\n    public void insert(T t){ // insert data\n                             // adding elements only requires the last node to point to the new node\n        Node n = head;\n        while(n.next!=null){\n            n = n.next; // tail node cannot be null\n        }\n        Node newNode = new Node(t,null);\n        n.next =newNode;\n        N++;\n    }\n    public void insert(int i,T t){ // insert data before i\n                                   // find the node before i\n        Node pre = head;\n        for (int index = 0;index<=i-1;index++){ // because the head node actually loops i-1 times\n            pre = pre.next;\n        }\n                                   // find the i node\n        Node curr = pre.next;\n        // create a new node and point to i\n        Node newNode = new Node(t,curr);\n        // node before i points to the new node\n        pre.next = newNode;\n        // increment by 1\n        N++;\n    }\n    public T remove (int i){ // remove the i-th element and return it\n        // get the node before i\n        Node pre = head;\n        for (int index = 0;index<=i-1;index++){\n            pre = pre.next;\n        }\n        // find i\n        Node curr = pre.next;\n        // find the node after i\n        Node fur = curr.next;\n        // connect the two and decrement by 1\n        pre.next = fur;\n        N--;\n        return (T) curr.item;\n\n    }\n    public int indexOf(T t){ // return the first occurrence of the element\n        // start iterating from the head node, find every node's element, take out item and compare with T\n        Node n = head;\n        for (int i =0;n.next!=null;i++){ // keep finding as long as the next element is not null\n            n = n.next;\n            if (n.item.equals(t)){\n                return i;\n            } // no alert has been set for elements that do not exist\n        }\n        return -1;\n    }\n    public void reverse(){  //Flipping single linked list; Recursive flipping\n        if (isEmpty()){\n            return;\n        }\n        else{\n            reverse(head.next);\n        }\n    }\n    public Node reverse(Node curr){ //flip the single-linked cur, and return\n        if(curr.next==null){\n            head.next = curr;\n            return curr;\n        }\n        //recursively reverse the next node of the current node\n        Node per = reverse(curr.next); // the new node is the next node after the flip\n        per.next = curr; //the next node of the new node is the previous node before reversal\n        curr.next = null; //this node is set as the tail node\n        return curr;\n            //not the last node then recursively flip the node before the last node\n    }\n\nTranslated with www.DeepL.com/Translator (free version)\n\n    @Override\n    public Iterator iterator() {\n\n        return new LIterator();\n    }\n    private class LIterator implements Iterator {\n        private node n;\n        public LIterator(){\n            this.n = head; //// initialize\n        }\n        @Override\n        public boolean hasNext() { //execute next continuously if the hasNext condition is met\n            return n.next!=null;\n        }\n\n        @Override\n        public Object next() {\n            n = n.next;\n            return n.item;\n        }\n    }\n}\n\n```\n\n#### \tAlgorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.\n\n### Queue/Stack\n\n​\tChained tables and queues are essentially a special type of single-linked table, differing in that they restrict the order of insertion/deletion of elements.\n\n#### Queues:\n\nFor a queue, elements enter from one end and exit from the other, that is, the elements that enter first are deleted first, called in English: First In, First Out, abbreviated FIFO.\n\n![queue](数据结构——链表、栈、队列/WX20230512-135224@2x.png)\n\n​\tThe more classical use of queues is in breadth-first search (hierarchical traversal of trees is actually also breadth-first search). In addition, queues can also have order, called priority queues, which have been implemented in java and are called **PriorityQueue**.\n\n#### \t\tQueue Code：\n\n```java\n// FIFO Compared to a stack, one end of a queue goes in and one end goes out.\npublic class Queue<T> implements Iterable<T> {\n    private class Node<T>{\n        public T item;\n        public Node next;\n        public Node(T item,Node next){\n            this.item = item;\n            this.next = next;\n        }\n    }\n    private Node head;  //head\n    private int N;\n    private Node last;  //tail\n    public Queue(){\n        this.head = new Node(null,null);\n        this.last = null;\n        this.N = 0;\n    }\n    public boolean isEmpty(){\n        return N==0;\n    }\n    public int size(){\n        return N;\n    }\n    public void enqueue(T t){           //Insert the chain from tail, in order from the first node\n        if (last == null){\n            last= new Node(t,null);\n            head.next = last;\n        }\n        else{\n            Node oldlast = last;\n            last = new Node(t,null);\n            oldlast.next = last;\n        }\n        N++;\n    }\n    public T dequeue(){\n        if (isEmpty()){\n            return null;            //Header node start deletion\n        }\n        Node oldeFirst = head.next;\n        head.next = oldeFirst.next;\n        N--;\n        //The delete queue is deleting elements, so it needs to be reset last\n        if (isEmpty()){\n            last = null;\n        }\n        return (T)oldeFirst.item;\n    }\n    @Override\n    public Iterator<T> iterator(){\n        return new QIterator();\n    }\n    private class QIterator implements Iterator{\n        private Node n;\n        public QIterator(){\n            this.n = head;\n        }\n        @Override\n        public boolean hasNext() {\n            return n.next!=null;\n        }\n\n        @Override\n        public Object next() {\n            n = n.next;\n            return (T)n.item;\n        }\n    }\n}\n\n\n```\n\n\n\n#### stacks：\n\nThe stack is the opposite, elements from one end into, to be from one end out. That is, first in, last out, called in English: First In, Last Out, or FILO.\n\n![stack](数据结构——链表、栈、队列/WX20230512-135651@2x.png)\n\n​\tStacks are often used in algorithms, such as bracket punctuation matching problems, monotone stack problems, etc. Recursion is also a special use of stacks.\n\n#### \t\tStack Code:\n\n```java\npublic class Stack<T> implements Iterable<T>{\n\n    private class Node<T>{     \n        public T item;\n        public Node next;\n        public Node(T item,Node next){\n            this.item =item;\n            this.next = next;\n        }\n    }\n    private int N;          //Number of stack elements\n    private Node head;      \n    public Stack(){\n        this.N = N;\n        this.head = new Node(null,null);\n    }\n    public boolean isEmpty(){\n        return N==0;\n    }\n    public int size(){\n        return N;\n    }\n    //insert\n    public void push(T t){\n        //Find the first node pointed to by the first node\n        Node oldNode = head.next;\n        //create new node\n        Node newNode = new Node(t,null);\n        //The first node points to the new node\n        head.next = newNode;\n        //The new node points to the original first node\n        newNode.next = oldNode;\n        N++;\n    }\n    public T pop(){\n        //The head node points to the first node\n        Node oldFirst = head.next;\n        //head.next = oldFirst.next is not safe and needs to be verified\n        if (oldFirst==null){\n            return null;\n        }\n        head.next = oldFirst.next;\n        N--;\n        return (T)oldFirst.item;\n    }\n    @Override\n    public Iterator<T> iterator() {\n        return new LIterator();\n    }\n    private class LIterator implements Iterator{\n        private Node n;\n        public LIterator(){\n            this.n = head;\n        }\n        @Override\n        public boolean hasNext() {\n            return n.next!=null;\n        }\n        @Override\n        public Object next() {\n            n = n.next;\n            return n.item;\n        }\n    }\n\n\n}\n```\n\n","slug":"数据结构——链表、栈、队列","published":1,"updated":"2023-05-12T14:09:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinm0007qqfd83ul7163","content":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>Link tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.</p>\n<h3 id=\"Linked-list\"><a href=\"#Linked-list\" class=\"headerlink\" title=\"Linked list\"></a>Linked list</h3><p>A threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-133517@2x.png\" alt=\"linkedlist\"></p>\n<span id=\"more\"></span>\n<p>To implement a linked list of tables using java, you first need to define a node</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, for a linked list, if you want to find an element based on the index, you can only start from the beginning with time complexity O(N).</p>\n<p>If a predecessor node is added to the Node, then it becomes a bi-directional linked list.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-134440@2x.png\" alt=\"doublelinkedlist\"></p>\n<p>The LinkedList in Java is a typical two-way linked list.</p>\n<p>If you combine HashMap(Set) on LinkedList, it is <strong>LinkedHashMap</strong>(Set), which ensures the orderliness of the elements and allows O1 to get the elements.</p>\n<p>A simple implementation of a linked list is as follows</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Singly linked list</span></span><br><span class=\"line\"><span class=\"comment\">// The head node does not store elements</span></span><br><span class=\"line\"><span class=\"comment\">// Need to record the head node, content is null; record the length of the list</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkList</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head; <span class=\"comment\">// head node</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N; <span class=\"comment\">// length of the list</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T item; <span class=\"comment\">// store element</span></span><br><span class=\"line\">        Node next; <span class=\"comment\">// point to the next node, a Node object</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item, Node next)</span>&#123; <span class=\"comment\">// constructor with arguments</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkList</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// constructor with no arguments</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// clear the list: head node does not point to the next element</span></span><br><span class=\"line\">        N=<span class=\"number\">0</span>;</span><br><span class=\"line\">        head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// check if the list is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// get the length of the list</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123; <span class=\"comment\">// get the i-th element</span></span><br><span class=\"line\">        <span class=\"comment\">// Use loop, traverse from the head node, find i times</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;index &lt;i;index++)&#123;</span><br><span class=\"line\">            n = n.next; <span class=\"comment\">// loop to point to the next node</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) n.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(T t)</span>&#123; <span class=\"comment\">// insert data</span></span><br><span class=\"line\">                             <span class=\"comment\">// adding elements only requires the last node to point to the new node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n.next!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            n = n.next; <span class=\"comment\">// tail node cannot be null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        n.next =newNode;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> i,T t)</span>&#123; <span class=\"comment\">// insert data before i</span></span><br><span class=\"line\">                                   <span class=\"comment\">// find the node before i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;index&lt;=i-<span class=\"number\">1</span>;index++)&#123; <span class=\"comment\">// because the head node actually loops i-1 times</span></span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                                   <span class=\"comment\">// find the i node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// create a new node and point to i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,curr);</span><br><span class=\"line\">        <span class=\"comment\">// node before i points to the new node</span></span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// increment by 1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">remove</span> <span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123; <span class=\"comment\">// remove the i-th element and return it</span></span><br><span class=\"line\">        <span class=\"comment\">// get the node before i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;index&lt;=i-<span class=\"number\">1</span>;index++)&#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// find i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// find the node after i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">fur</span> <span class=\"operator\">=</span> curr.next;</span><br><span class=\"line\">        <span class=\"comment\">// connect the two and decrement by 1</span></span><br><span class=\"line\">        pre.next = fur;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) curr.item;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(T t)</span>&#123; <span class=\"comment\">// return the first occurrence of the element</span></span><br><span class=\"line\">        <span class=\"comment\">// start iterating from the head node, find every node&#x27;s element, take out item and compare with T</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;n.next!=<span class=\"literal\">null</span>;i++)&#123; <span class=\"comment\">// keep finding as long as the next element is not null</span></span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.item.equals(t))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125; <span class=\"comment\">// no alert has been set for elements that do not exist</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">()</span>&#123;  <span class=\"comment\">//Flipping single linked list; Recursive flipping</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reverse(head.next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">reverse</span><span class=\"params\">(Node curr)</span>&#123; <span class=\"comment\">//flip the single-linked cur, and return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr.next==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head.next = curr;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//recursively reverse the next node of the current node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">per</span> <span class=\"operator\">=</span> reverse(curr.next); <span class=\"comment\">// the new node is the next node after the flip</span></span><br><span class=\"line\">        per.next = curr; <span class=\"comment\">//the next node of the new node is the previous node before reversal</span></span><br><span class=\"line\">        curr.next = <span class=\"literal\">null</span>; <span class=\"comment\">//this node is set as the tail node</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            <span class=\"comment\">//not the last node then recursively flip the node before the last node</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Translated with www.DeepL.com/Translator (free version)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">LIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head; <span class=\"comment\">//// initialize</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//execute next continuously if the hasNext condition is met</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables\"><a href=\"#Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables\" class=\"headerlink\" title=\"Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.\"></a>Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.</h4><h3 id=\"Queue-Stack\"><a href=\"#Queue-Stack\" class=\"headerlink\" title=\"Queue/Stack\"></a>Queue/Stack</h3><p>​    Chained tables and queues are essentially a special type of single-linked table, differing in that they restrict the order of insertion/deletion of elements.</p>\n<h4 id=\"Queues\"><a href=\"#Queues\" class=\"headerlink\" title=\"Queues:\"></a>Queues:</h4><p>For a queue, elements enter from one end and exit from the other, that is, the elements that enter first are deleted first, called in English: First In, First Out, abbreviated FIFO.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135224@2x.png\" alt=\"queue\"></p>\n<p>​    The more classical use of queues is in breadth-first search (hierarchical traversal of trees is actually also breadth-first search). In addition, queues can also have order, called priority queues, which have been implemented in java and are called <strong>PriorityQueue</strong>.</p>\n<h4 id=\"Queue-Code：\"><a href=\"#Queue-Code：\" class=\"headerlink\" title=\"Queue Code：\"></a>Queue Code：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FIFO Compared to a stack, one end of a queue goes in and one end goes out.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item,Node next)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;  <span class=\"comment\">//head</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;  <span class=\"comment\">//tail</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Queue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.last = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">enqueue</span><span class=\"params\">(T t)</span>&#123;           <span class=\"comment\">//Insert the chain from tail, in order from the first node</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            last= <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            head.next = last;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">oldlast</span> <span class=\"operator\">=</span> last;</span><br><span class=\"line\">            last = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            oldlast.next = last;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">dequeue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;            <span class=\"comment\">//Header node start deletion</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldeFirst</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        head.next = oldeFirst.next;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"comment\">//The delete queue is deleting elements, so it needs to be reset last</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            last = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)oldeFirst.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"stacks：\"><a href=\"#stacks：\" class=\"headerlink\" title=\"stacks：\"></a>stacks：</h4><p>The stack is the opposite, elements from one end into, to be from one end out. That is, first in, last out, called in English: First In, Last Out, or FILO.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135651@2x.png\" alt=\"stack\"></p>\n<p>​    Stacks are often used in algorithms, such as bracket punctuation matching problems, monotone stack problems, etc. Recursion is also a special use of stacks.</p>\n<h4 id=\"Stack-Code\"><a href=\"#Stack-Code\" class=\"headerlink\" title=\"Stack Code:\"></a>Stack Code:</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt;&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item,Node next)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item =item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N;          <span class=\"comment\">//Number of stack elements</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Stack</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = N;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Find the first node pointed to by the first node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldNode</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"comment\">//create new node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//The first node points to the new node</span></span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">//The new node points to the original first node</span></span><br><span class=\"line\">        newNode.next = oldNode;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">pop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//The head node points to the first node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldFirst</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"comment\">//head.next = oldFirst.next is not safe and needs to be verified</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldFirst==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = oldFirst.next;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)oldFirst.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">LIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>Link tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.</p>\n<h3 id=\"Linked-list\"><a href=\"#Linked-list\" class=\"headerlink\" title=\"Linked list\"></a>Linked list</h3><p>A threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-133517@2x.png\" alt=\"linkedlist\"></p>","more":"<p>To implement a linked list of tables using java, you first need to define a node</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T       value;</span><br><span class=\"line\">        Node&lt;T&gt; next;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Therefore, for a linked list, if you want to find an element based on the index, you can only start from the beginning with time complexity O(N).</p>\n<p>If a predecessor node is added to the Node, then it becomes a bi-directional linked list.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-134440@2x.png\" alt=\"doublelinkedlist\"></p>\n<p>The LinkedList in Java is a typical two-way linked list.</p>\n<p>If you combine HashMap(Set) on LinkedList, it is <strong>LinkedHashMap</strong>(Set), which ensures the orderliness of the elements and allows O1 to get the elements.</p>\n<p>A simple implementation of a linked list is as follows</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Singly linked list</span></span><br><span class=\"line\"><span class=\"comment\">// The head node does not store elements</span></span><br><span class=\"line\"><span class=\"comment\">// Need to record the head node, content is null; record the length of the list</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LinkList</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head; <span class=\"comment\">// head node</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N; <span class=\"comment\">// length of the list</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt; &#123;</span><br><span class=\"line\">        T item; <span class=\"comment\">// store element</span></span><br><span class=\"line\">        Node next; <span class=\"comment\">// point to the next node, a Node object</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item, Node next)</span>&#123; <span class=\"comment\">// constructor with arguments</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LinkList</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// constructor with no arguments</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">clear</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// clear the list: head node does not point to the next element</span></span><br><span class=\"line\">        N=<span class=\"number\">0</span>;</span><br><span class=\"line\">        head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>  <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// check if the list is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">length</span><span class=\"params\">()</span>&#123; <span class=\"comment\">// get the length of the list</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123; <span class=\"comment\">// get the i-th element</span></span><br><span class=\"line\">        <span class=\"comment\">// Use loop, traverse from the head node, find i times</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;index &lt;i;index++)&#123;</span><br><span class=\"line\">            n = n.next; <span class=\"comment\">// loop to point to the next node</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) n.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(T t)</span>&#123; <span class=\"comment\">// insert data</span></span><br><span class=\"line\">                             <span class=\"comment\">// adding elements only requires the last node to point to the new node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n.next!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            n = n.next; <span class=\"comment\">// tail node cannot be null</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        n.next =newNode;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> i,T t)</span>&#123; <span class=\"comment\">// insert data before i</span></span><br><span class=\"line\">                                   <span class=\"comment\">// find the node before i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;index&lt;=i-<span class=\"number\">1</span>;index++)&#123; <span class=\"comment\">// because the head node actually loops i-1 times</span></span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                                   <span class=\"comment\">// find the i node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// create a new node and point to i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,curr);</span><br><span class=\"line\">        <span class=\"comment\">// node before i points to the new node</span></span><br><span class=\"line\">        pre.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">// increment by 1</span></span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">remove</span> <span class=\"params\">(<span class=\"type\">int</span> i)</span>&#123; <span class=\"comment\">// remove the i-th element and return it</span></span><br><span class=\"line\">        <span class=\"comment\">// get the node before i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;index&lt;=i-<span class=\"number\">1</span>;index++)&#123;</span><br><span class=\"line\">            pre = pre.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// find i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> pre.next;</span><br><span class=\"line\">        <span class=\"comment\">// find the node after i</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">fur</span> <span class=\"operator\">=</span> curr.next;</span><br><span class=\"line\">        <span class=\"comment\">// connect the two and decrement by 1</span></span><br><span class=\"line\">        pre.next = fur;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) curr.item;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">indexOf</span><span class=\"params\">(T t)</span>&#123; <span class=\"comment\">// return the first occurrence of the element</span></span><br><span class=\"line\">        <span class=\"comment\">// start iterating from the head node, find every node&#x27;s element, take out item and compare with T</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;n.next!=<span class=\"literal\">null</span>;i++)&#123; <span class=\"comment\">// keep finding as long as the next element is not null</span></span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n.item.equals(t))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125; <span class=\"comment\">// no alert has been set for elements that do not exist</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">()</span>&#123;  <span class=\"comment\">//Flipping single linked list; Recursive flipping</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reverse(head.next);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">reverse</span><span class=\"params\">(Node curr)</span>&#123; <span class=\"comment\">//flip the single-linked cur, and return</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(curr.next==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            head.next = curr;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//recursively reverse the next node of the current node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">per</span> <span class=\"operator\">=</span> reverse(curr.next); <span class=\"comment\">// the new node is the next node after the flip</span></span><br><span class=\"line\">        per.next = curr; <span class=\"comment\">//the next node of the new node is the previous node before reversal</span></span><br><span class=\"line\">        curr.next = <span class=\"literal\">null</span>; <span class=\"comment\">//this node is set as the tail node</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">            <span class=\"comment\">//not the last node then recursively flip the node before the last node</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Translated with www.DeepL.com/Translator (free version)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">LIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head; <span class=\"comment\">//// initialize</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123; <span class=\"comment\">//execute next continuously if the hasNext condition is met</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables\"><a href=\"#Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables\" class=\"headerlink\" title=\"Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.\"></a>Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.</h4><h3 id=\"Queue-Stack\"><a href=\"#Queue-Stack\" class=\"headerlink\" title=\"Queue/Stack\"></a>Queue/Stack</h3><p>​    Chained tables and queues are essentially a special type of single-linked table, differing in that they restrict the order of insertion/deletion of elements.</p>\n<h4 id=\"Queues\"><a href=\"#Queues\" class=\"headerlink\" title=\"Queues:\"></a>Queues:</h4><p>For a queue, elements enter from one end and exit from the other, that is, the elements that enter first are deleted first, called in English: First In, First Out, abbreviated FIFO.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135224@2x.png\" alt=\"queue\"></p>\n<p>​    The more classical use of queues is in breadth-first search (hierarchical traversal of trees is actually also breadth-first search). In addition, queues can also have order, called priority queues, which have been implemented in java and are called <strong>PriorityQueue</strong>.</p>\n<h4 id=\"Queue-Code：\"><a href=\"#Queue-Code：\" class=\"headerlink\" title=\"Queue Code：\"></a>Queue Code：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FIFO Compared to a stack, one end of a queue goes in and one end goes out.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Queue</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item,Node next)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item = item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;  <span class=\"comment\">//head</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node last;  <span class=\"comment\">//tail</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Queue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.last = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">enqueue</span><span class=\"params\">(T t)</span>&#123;           <span class=\"comment\">//Insert the chain from tail, in order from the first node</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (last == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            last= <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            head.next = last;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">oldlast</span> <span class=\"operator\">=</span> last;</span><br><span class=\"line\">            last = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            oldlast.next = last;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">dequeue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;            <span class=\"comment\">//Header node start deletion</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldeFirst</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        head.next = oldeFirst.next;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"comment\">//The delete queue is deleting elements, so it needs to be reset last</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty())&#123;</span><br><span class=\"line\">            last = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)oldeFirst.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">QIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T)n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"stacks：\"><a href=\"#stacks：\" class=\"headerlink\" title=\"stacks：\"></a>stacks：</h4><p>The stack is the opposite, elements from one end into, to be from one end out. That is, first in, last out, called in English: First In, Last Out, or FILO.</p>\n<p><img src=\"/en/2023/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E2%80%94%E9%93%BE%E8%A1%A8%E3%80%81%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97/WX20230512-135651@2x.png\" alt=\"stack\"></p>\n<p>​    Stacks are often used in algorithms, such as bracket punctuation matching problems, monotone stack problems, etc. Recursion is also a special use of stacks.</p>\n<h4 id=\"Stack-Code\"><a href=\"#Stack-Code\" class=\"headerlink\" title=\"Stack Code:\"></a>Stack Code:</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterable</span>&lt;T&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;T&gt;&#123;     </span><br><span class=\"line\">        <span class=\"keyword\">public</span> T item;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(T item,Node next)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.item =item;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.next = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> N;          <span class=\"comment\">//Number of stack elements</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node head;      </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Stack</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.N = N;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.head = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N==<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">size</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(T t)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Find the first node pointed to by the first node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldNode</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"comment\">//create new node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">newNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(t,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"comment\">//The first node points to the new node</span></span><br><span class=\"line\">        head.next = newNode;</span><br><span class=\"line\">        <span class=\"comment\">//The new node points to the original first node</span></span><br><span class=\"line\">        newNode.next = oldNode;</span><br><span class=\"line\">        N++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">pop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//The head node points to the first node</span></span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">oldFirst</span> <span class=\"operator\">=</span> head.next;</span><br><span class=\"line\">        <span class=\"comment\">//head.next = oldFirst.next is not safe and needs to be verified</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldFirst==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        head.next = oldFirst.next;</span><br><span class=\"line\">        N--;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T)oldFirst.item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;T&gt; <span class=\"title function_\">iterator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LIterator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LIterator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iterator</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Node n;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">LIterator</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.n = head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.next!=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Object <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            n = n.next;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> n.item;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-386","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:31:09.000Z","_content":"\n### Q：\n\nGiven an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.\n\nYou must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space. \n\n<!-- more -->\n\n### S：\n\nFirst: the dictionary order can be abstracted as a tree, as shown in the following figure\n\n![1603875858-aRThUF-QQ20201028-170405@2x](LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png)\n\nSo, there is a small to large output is actually the output of his prior traversal\n\n**Reference to the prior-order traversal of the binary search tree write **\n\n1. Recursion:\n\nThe difference here is the need to round off the head node 0, to 1-9 respectively as the root node for traversal output: 1:\n\n1. recursion end condition, the current node > n, the recursion ends\n\n2. add the element value into res, traverse its 10 sibling nodes, enter the recursion of its child nodes\n\n````java\nclass Solution {\n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i < 10; i++){\n             dfs(n, i, list);\n        }\n        return list;\n    }\n    private void dfs(int n,int i,List<Integer>list){\n        if(i>n){\n            return ;\n        }\n        list.add(i);\n        for(int j=0;j<=9;j++){\n            dfs(n,i*10+j,list);\n        }\n    }\n\n}\n```\n````\n\n\n\n​    2.迭代:\n\n\\2. Iteration .\n\n**tipp **: `while(curr%10==0) curr/=10;` The purpose of this line of code is to handle numbers that should end early in the dictionary order.\n\nFor example, suppose `n` is 130. When we traverse through the dictionary order, it should be in this order: 1, 10, 11, ... , 19, 2, 20, ... , 19, 2, 20, ... , 29, ... , 13, 130, 14, ... , 19, 2, ... , 9.\n\nAfter our `curr` becomes 130, if we directly `curr+=1`, then `curr` becomes 131, which is obviously more than `n` and does not fit the dictionary order. We should skip all 13x (x > 0) numbers and just become 14.\n\nThis is the purpose of the line `while(curr%10==0) curr/=10;`: \n\nwhen the last digit of `curr` is 0 (i.e. `curr%10==0`), we should fall back to the previous level (i.e. `curr/=10`). In this example, 130 falls back to 13, and then `curr+=1` becomes 14, so that it is in dictionary order.\n\nThis treatment ensures that our traversal order is always in dictionary order, i.e., we traverse \n\n       ```java\n       class Solution {\n            public List<Integer> lexicalOrder(int n) {\n                List<Integer> list = new ArrayList<>();\n                int curr = 1;\n                // 遍历/traverse\n                for(int i=0;i<n;i++){\n                    list.add(curr);\n                    if(curr*10<=n){\n                        curr*=10;//遍历下一层/find next level number\n                    }else{\n                        if(curr>=n)   curr/=10;//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level\n                        curr+=1;\n                        while(curr%10==0) curr/=10;\n                    }\n                }\n                return list;\n            }\n       \n       }\n       ```\n\n","source":"_posts/LeetCode/LeetCode-386.md","raw":"---\ntitle: LeetCode-386\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:31:09\ncategories: technology\ntags: \n  - LeetCode\n  - java\n  - DFS\n---\n\n### Q：\n\nGiven an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.\n\nYou must write an algorithm that runs in `O(n)` time and uses `O(1)` extra space. \n\n<!-- more -->\n\n### S：\n\nFirst: the dictionary order can be abstracted as a tree, as shown in the following figure\n\n![1603875858-aRThUF-QQ20201028-170405@2x](LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png)\n\nSo, there is a small to large output is actually the output of his prior traversal\n\n**Reference to the prior-order traversal of the binary search tree write **\n\n1. Recursion:\n\nThe difference here is the need to round off the head node 0, to 1-9 respectively as the root node for traversal output: 1:\n\n1. recursion end condition, the current node > n, the recursion ends\n\n2. add the element value into res, traverse its 10 sibling nodes, enter the recursion of its child nodes\n\n````java\nclass Solution {\n    public List<Integer> lexicalOrder(int n) {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 1; i < 10; i++){\n             dfs(n, i, list);\n        }\n        return list;\n    }\n    private void dfs(int n,int i,List<Integer>list){\n        if(i>n){\n            return ;\n        }\n        list.add(i);\n        for(int j=0;j<=9;j++){\n            dfs(n,i*10+j,list);\n        }\n    }\n\n}\n```\n````\n\n\n\n​    2.迭代:\n\n\\2. Iteration .\n\n**tipp **: `while(curr%10==0) curr/=10;` The purpose of this line of code is to handle numbers that should end early in the dictionary order.\n\nFor example, suppose `n` is 130. When we traverse through the dictionary order, it should be in this order: 1, 10, 11, ... , 19, 2, 20, ... , 19, 2, 20, ... , 29, ... , 13, 130, 14, ... , 19, 2, ... , 9.\n\nAfter our `curr` becomes 130, if we directly `curr+=1`, then `curr` becomes 131, which is obviously more than `n` and does not fit the dictionary order. We should skip all 13x (x > 0) numbers and just become 14.\n\nThis is the purpose of the line `while(curr%10==0) curr/=10;`: \n\nwhen the last digit of `curr` is 0 (i.e. `curr%10==0`), we should fall back to the previous level (i.e. `curr/=10`). In this example, 130 falls back to 13, and then `curr+=1` becomes 14, so that it is in dictionary order.\n\nThis treatment ensures that our traversal order is always in dictionary order, i.e., we traverse \n\n       ```java\n       class Solution {\n            public List<Integer> lexicalOrder(int n) {\n                List<Integer> list = new ArrayList<>();\n                int curr = 1;\n                // 遍历/traverse\n                for(int i=0;i<n;i++){\n                    list.add(curr);\n                    if(curr*10<=n){\n                        curr*=10;//遍历下一层/find next level number\n                    }else{\n                        if(curr>=n)   curr/=10;//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level\n                        curr+=1;\n                        while(curr%10==0) curr/=10;\n                    }\n                }\n                return list;\n            }\n       \n       }\n       ```\n\n","slug":"LeetCode/LeetCode-386","published":1,"updated":"2023-05-12T14:31:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinp0009qqfd85jt2rd7","content":"<h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a>Q：</h3><p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p>\n<p>You must write an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> extra space. </p>\n<span id=\"more\"></span>\n<h3 id=\"S：\"><a href=\"#S：\" class=\"headerlink\" title=\"S：\"></a>S：</h3><p>First: the dictionary order can be abstracted as a tree, as shown in the following figure</p>\n<p><img src=\"/en/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png\" alt=\"1603875858-aRThUF-QQ20201028-170405@2x\"></p>\n<p>So, there is a small to large output is actually the output of his prior traversal</p>\n<p><strong>Reference to the prior-order traversal of the binary search tree write </strong></p>\n<ol>\n<li>Recursion:</li>\n</ol>\n<p>The difference here is the need to round off the head node 0, to 1-9 respectively as the root node for traversal output: 1:</p>\n<ol>\n<li><p>recursion end condition, the current node &gt; n, the recursion ends</p>\n</li>\n<li><p>add the element value into res, traverse its 10 sibling nodes, enter the recursion of its child nodes</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">             dfs(n, i, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">            dfs(n,i*<span class=\"number\">10</span>+j,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p>​    2.迭代:</p>\n<p>\\2. Iteration .</p>\n<p><strong>tipp </strong>: <code>while(curr%10==0) curr/=10;</code> The purpose of this line of code is to handle numbers that should end early in the dictionary order.</p>\n<p>For example, suppose <code>n</code> is 130. When we traverse through the dictionary order, it should be in this order: 1, 10, 11, … , 19, 2, 20, … , 19, 2, 20, … , 29, … , 13, 130, 14, … , 19, 2, … , 9.</p>\n<p>After our <code>curr</code> becomes 130, if we directly <code>curr+=1</code>, then <code>curr</code> becomes 131, which is obviously more than <code>n</code> and does not fit the dictionary order. We should skip all 13x (x &gt; 0) numbers and just become 14.</p>\n<p>This is the purpose of the line <code>while(curr%10==0) curr/=10;</code>: </p>\n<p>when the last digit of <code>curr</code> is 0 (i.e. <code>curr%10==0</code>), we should fall back to the previous level (i.e. <code>curr/=10</code>). In this example, 130 falls back to 13, and then <code>curr+=1</code> becomes 14, so that it is in dictionary order.</p>\n<p>This treatment ensures that our traversal order is always in dictionary order, i.e., we traverse </p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">         List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"comment\">// 遍历/traverse</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">             list.add(curr);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(curr*<span class=\"number\">10</span>&lt;=n)&#123;</span><br><span class=\"line\">                 curr*=<span class=\"number\">10</span>;<span class=\"comment\">//遍历下一层/find next level number</span></span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(curr&gt;=n)   curr/=<span class=\"number\">10</span>;<span class=\"comment\">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class=\"line\">                 curr+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span>(curr%<span class=\"number\">10</span>==<span class=\"number\">0</span>) curr/=<span class=\"number\">10</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"Q：\"><a href=\"#Q：\" class=\"headerlink\" title=\"Q：\"></a>Q：</h3><p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p>\n<p>You must write an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> extra space. </p>","more":"<h3 id=\"S：\"><a href=\"#S：\" class=\"headerlink\" title=\"S：\"></a>S：</h3><p>First: the dictionary order can be abstracted as a tree, as shown in the following figure</p>\n<p><img src=\"/en/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png\" alt=\"1603875858-aRThUF-QQ20201028-170405@2x\"></p>\n<p>So, there is a small to large output is actually the output of his prior traversal</p>\n<p><strong>Reference to the prior-order traversal of the binary search tree write </strong></p>\n<ol>\n<li>Recursion:</li>\n</ol>\n<p>The difference here is the need to round off the head node 0, to 1-9 respectively as the root node for traversal output: 1:</p>\n<ol>\n<li><p>recursion end condition, the current node &gt; n, the recursion ends</p>\n</li>\n<li><p>add the element value into res, traverse its 10 sibling nodes, enter the recursion of its child nodes</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++)&#123;</span><br><span class=\"line\">             dfs(n, i, list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;n)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(i);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=<span class=\"number\">9</span>;j++)&#123;</span><br><span class=\"line\">            dfs(n,i*<span class=\"number\">10</span>+j,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n<p>​    2.迭代:</p>\n<p>\\2. Iteration .</p>\n<p><strong>tipp </strong>: <code>while(curr%10==0) curr/=10;</code> The purpose of this line of code is to handle numbers that should end early in the dictionary order.</p>\n<p>For example, suppose <code>n</code> is 130. When we traverse through the dictionary order, it should be in this order: 1, 10, 11, … , 19, 2, 20, … , 19, 2, 20, … , 29, … , 13, 130, 14, … , 19, 2, … , 9.</p>\n<p>After our <code>curr</code> becomes 130, if we directly <code>curr+=1</code>, then <code>curr</code> becomes 131, which is obviously more than <code>n</code> and does not fit the dictionary order. We should skip all 13x (x &gt; 0) numbers and just become 14.</p>\n<p>This is the purpose of the line <code>while(curr%10==0) curr/=10;</code>: </p>\n<p>when the last digit of <code>curr</code> is 0 (i.e. <code>curr%10==0</code>), we should fall back to the previous level (i.e. <code>curr/=10</code>). In this example, 130 falls back to 13, and then <code>curr+=1</code> becomes 14, so that it is in dictionary order.</p>\n<p>This treatment ensures that our traversal order is always in dictionary order, i.e., we traverse </p>\n<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">lexicalOrder</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">         List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">         <span class=\"type\">int</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">         <span class=\"comment\">// 遍历/traverse</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">             list.add(curr);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(curr*<span class=\"number\">10</span>&lt;=n)&#123;</span><br><span class=\"line\">                 curr*=<span class=\"number\">10</span>;<span class=\"comment\">//遍历下一层/find next level number</span></span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span>(curr&gt;=n)   curr/=<span class=\"number\">10</span>;<span class=\"comment\">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class=\"line\">                 curr+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span>(curr%<span class=\"number\">10</span>==<span class=\"number\">0</span>) curr/=<span class=\"number\">10</span>;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>"},{"title":"LeetCode-406","author":"Ray","top":true,"cover":false,"date":"2023-05-12T08:13:50.000Z","_content":"\n### Q:\n\nYou are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`.\n\nReconstruct and return *the queue that is represented by the input array* `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).\n\n<!-- more -->\n\n#### Input:\n\n```\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n```\n\n### S:\n\nA person has 2 attributes , h stands for height, and the person with the same height should be behind the person with k greater. In order to determine where should go, we can consider ranking the heights backwards so that the number of people taller than him in front is known. Suppose some queue goes to , for the people who have been inserted in front of him, the heights are ≥ him, so when he is inserted in the ith position, it has no effect on the others (because when the heights are the same,i will be sorted in positive order)\n\n```java\nclass Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people,new Comparator<int[]>(){\n            @Override\n            public int compare(int[] o1, int [] o2) {\n                return o1[0]==o2[0]?o1[1]-o2[1]:o2[0]-o1[0];\n            }\n        });\n        List<int[]> res = new ArrayList<>();\n        for(int [] peo:people){\n            res.add(peo[1], peo);\n        }\n        return res.toArray(new int [res.size()][2]);\n    }\n}\n```\n\n","source":"_posts/LeetCode/LeetCode-406.md","raw":"---\n\ntitle: LeetCode-406\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 16:13:50\ncategories: technology\ntags: \n  - LeetCode\n  - java\n---\n\n### Q:\n\nYou are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with **exactly** `ki` other people in front who have a height greater than or equal to `hi`.\n\nReconstruct and return *the queue that is represented by the input array* `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).\n\n<!-- more -->\n\n#### Input:\n\n```\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n```\n\n### S:\n\nA person has 2 attributes , h stands for height, and the person with the same height should be behind the person with k greater. In order to determine where should go, we can consider ranking the heights backwards so that the number of people taller than him in front is known. Suppose some queue goes to , for the people who have been inserted in front of him, the heights are ≥ him, so when he is inserted in the ith position, it has no effect on the others (because when the heights are the same,i will be sorted in positive order)\n\n```java\nclass Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people,new Comparator<int[]>(){\n            @Override\n            public int compare(int[] o1, int [] o2) {\n                return o1[0]==o2[0]?o1[1]-o2[1]:o2[0]-o1[0];\n            }\n        });\n        List<int[]> res = new ArrayList<>();\n        for(int [] peo:people){\n            res.add(peo[1], peo);\n        }\n        return res.toArray(new int [res.size()][2]);\n    }\n}\n```\n\n","slug":"LeetCode/LeetCode-406","published":1,"updated":"2023-05-12T14:32:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinr000aqqfd0oq2f5qj","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [hi, ki]</code> represents the <code>ith</code> person of height <code>hi</code> with <strong>exactly</strong> <code>ki</code> other people in front who have a height greater than or equal to <code>hi</code>.</p>\n<p>Reconstruct and return <em>the queue that is represented by the input array</em> <code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [hj, kj]</code> is the attributes of the <code>jth</code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>\n<span id=\"more\"></span>\n<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class=\"line\">Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">Person 0 has height 5 with no other people taller or the same height in front.</span><br><span class=\"line\">Person 1 has height 7 with no other people taller or the same height in front.</span><br><span class=\"line\">Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.</span><br><span class=\"line\">Person 3 has height 6 with one person taller or the same height in front, which is person 1.</span><br><span class=\"line\">Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.</span><br><span class=\"line\">Person 5 has height 7 with one person taller or the same height in front, which is person 1.</span><br><span class=\"line\">Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>A person has 2 attributes , h stands for height, and the person with the same height should be behind the person with k greater. In order to determine where should go, we can consider ranking the heights backwards so that the number of people taller than him in front is known. Suppose some queue goes to , for the people who have been inserted in front of him, the heights are ≥ him, so when he is inserted in the ith position, it has no effect on the others (because when the heights are the same,i will be sorted in positive order)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] reconstructQueue(<span class=\"type\">int</span>[][] people) &#123;</span><br><span class=\"line\">        Arrays.sort(people,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] o1, <span class=\"type\">int</span> [] o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1[<span class=\"number\">0</span>]==o2[<span class=\"number\">0</span>]?o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]:o2[<span class=\"number\">0</span>]-o1[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> [] peo:people)&#123;</span><br><span class=\"line\">            res.add(peo[<span class=\"number\">1</span>], peo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [res.size()][<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [hi, ki]</code> represents the <code>ith</code> person of height <code>hi</code> with <strong>exactly</strong> <code>ki</code> other people in front who have a height greater than or equal to <code>hi</code>.</p>\n<p>Reconstruct and return <em>the queue that is represented by the input array</em> <code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [hj, kj]</code> is the attributes of the <code>jth</code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p>","more":"<h4 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class=\"line\">Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">Person 0 has height 5 with no other people taller or the same height in front.</span><br><span class=\"line\">Person 1 has height 7 with no other people taller or the same height in front.</span><br><span class=\"line\">Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.</span><br><span class=\"line\">Person 3 has height 6 with one person taller or the same height in front, which is person 1.</span><br><span class=\"line\">Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.</span><br><span class=\"line\">Person 5 has height 7 with one person taller or the same height in front, which is person 1.</span><br><span class=\"line\">Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>A person has 2 attributes , h stands for height, and the person with the same height should be behind the person with k greater. In order to determine where should go, we can consider ranking the heights backwards so that the number of people taller than him in front is known. Suppose some queue goes to , for the people who have been inserted in front of him, the heights are ≥ him, so when he is inserted in the ith position, it has no effect on the others (because when the heights are the same,i will be sorted in positive order)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] reconstructQueue(<span class=\"type\">int</span>[][] people) &#123;</span><br><span class=\"line\">        Arrays.sort(people,<span class=\"keyword\">new</span> <span class=\"title class_\">Comparator</span>&lt;<span class=\"type\">int</span>[]&gt;()&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compare</span><span class=\"params\">(<span class=\"type\">int</span>[] o1, <span class=\"type\">int</span> [] o2)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o1[<span class=\"number\">0</span>]==o2[<span class=\"number\">0</span>]?o1[<span class=\"number\">1</span>]-o2[<span class=\"number\">1</span>]:o2[<span class=\"number\">0</span>]-o1[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        List&lt;<span class=\"type\">int</span>[]&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> [] peo:people)&#123;</span><br><span class=\"line\">            res.add(peo[<span class=\"number\">1</span>], peo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [res.size()][<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-862","author":"Ray","top":true,"cover":false,"date":"2023-05-12T08:14:10.000Z","mathjax":true,"_content":"\n### Q:\n\nGiven an integer array `nums` and an integer `k`, return *the length of the shortest non-empty **subarray** of* `nums` *with a sum of at least* `k`. If there is no such **subarray**, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n<!-- more -->\n\n### Input:\n\n```\nInput: nums = [2,-1,2], k = 3\nOutput: 3\n```\n\n### S:\n\n​\t\tTo find the sum of consecutive subsequences, it is easy to think of using prefix sums.\n\n​\t\tSince there are positive and negative arrays, it is not possible to use bifurcation, and brute force cracking will time out.\n\n\\#### **Optimization:**\n\nBecause it is to find the shortest interval, it can be obvious to think of sliding windows, but this array does not satisfy monotonicity: the\n\nThere are **negative numbers** in the array, resulting in window values **not monotonic**, but because there are negative numbers so that is why when we find a certain window and for K, there may still be feasible solutions within the window, for the following reasons:\n\n**For all indexes ${i_{0-j}}$ that satisfy ≥K before index $i_j$,**\n\n**If $i_1$<$i_2$ and arr[$i_1$]>arr[$i_2$],**\n\n **then the feasible solution must be $i_2$,**\n\n **because $i_2$ is larger and arr[$i_2$] is smaller**\n\nSo  **we can maintain a monotonic queue to guarantee the monotonicity of the values in the window:**\n\n### Idea:\n\nBased on the fact that we always want the left pointer to be as close as possible for each right pointer j and the value to be as large as possible.\n\nIf there is a value at i-1 > i, then the value at i-1 must not be the correct solution, because the value at i is closer and can get a larger array sum, if i-1 is satisfied i must be satisfied, so as to reduce the amount of our judgment\n\nIf the value at the top of the queue satisfies the current value - the value at the top of the queue >= K, record the length and pop the top of the queue\n\n\n\n```java\nclass Solution {\n    public int shortestSubarray(int[] A, int K) {\n        long [] arr = new long [A.length+1];\n        for(int i=0;i<A.length;i++){\n            arr[i+1] = arr[i]+A[i];\n            if(A[i]>=K) return 1;\n        }//得到前缀和数组/ get pre sum\n        int res = Integer.MAX_VALUE;\n        // for(int i=0;i<=A.length-1;i++){  //暴力破解 N^2 超时/O(N^2) out time\n        //     for(int j = i+1;j<=A.length;j++){\n        //         if(arr[j]-arr[i]>=K){\n        //             res = Math.min(j-i,res);\n        //         }\n        //     }\n        // }\n      \t\n        Deque<Integer> queue = new ArrayDeque<>();\n        for(int i=0;i<arr.length;i++){\n            while(!queue.isEmpty()&&arr[i]<=arr[queue.getLast()])   queue.removeLast();\n            while(!queue.isEmpty()&&arr[i]-arr[queue.peek()]>=K)    res = Math.min(res,i-queue.poll());\n            queue.add(i);\n        }\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n}\n```\n\n","source":"_posts/LeetCode/LeetCode-862.md","raw":"---\ntitle: LeetCode-862\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 16:14:10\ncategories: technology\nmathjax: true\ntags: \n  - LeetCode\n  - java\n  - persum\n  - queue\n\n---\n\n### Q:\n\nGiven an integer array `nums` and an integer `k`, return *the length of the shortest non-empty **subarray** of* `nums` *with a sum of at least* `k`. If there is no such **subarray**, return `-1`.\n\nA **subarray** is a **contiguous** part of an array.\n\n<!-- more -->\n\n### Input:\n\n```\nInput: nums = [2,-1,2], k = 3\nOutput: 3\n```\n\n### S:\n\n​\t\tTo find the sum of consecutive subsequences, it is easy to think of using prefix sums.\n\n​\t\tSince there are positive and negative arrays, it is not possible to use bifurcation, and brute force cracking will time out.\n\n\\#### **Optimization:**\n\nBecause it is to find the shortest interval, it can be obvious to think of sliding windows, but this array does not satisfy monotonicity: the\n\nThere are **negative numbers** in the array, resulting in window values **not monotonic**, but because there are negative numbers so that is why when we find a certain window and for K, there may still be feasible solutions within the window, for the following reasons:\n\n**For all indexes ${i_{0-j}}$ that satisfy ≥K before index $i_j$,**\n\n**If $i_1$<$i_2$ and arr[$i_1$]>arr[$i_2$],**\n\n **then the feasible solution must be $i_2$,**\n\n **because $i_2$ is larger and arr[$i_2$] is smaller**\n\nSo  **we can maintain a monotonic queue to guarantee the monotonicity of the values in the window:**\n\n### Idea:\n\nBased on the fact that we always want the left pointer to be as close as possible for each right pointer j and the value to be as large as possible.\n\nIf there is a value at i-1 > i, then the value at i-1 must not be the correct solution, because the value at i is closer and can get a larger array sum, if i-1 is satisfied i must be satisfied, so as to reduce the amount of our judgment\n\nIf the value at the top of the queue satisfies the current value - the value at the top of the queue >= K, record the length and pop the top of the queue\n\n\n\n```java\nclass Solution {\n    public int shortestSubarray(int[] A, int K) {\n        long [] arr = new long [A.length+1];\n        for(int i=0;i<A.length;i++){\n            arr[i+1] = arr[i]+A[i];\n            if(A[i]>=K) return 1;\n        }//得到前缀和数组/ get pre sum\n        int res = Integer.MAX_VALUE;\n        // for(int i=0;i<=A.length-1;i++){  //暴力破解 N^2 超时/O(N^2) out time\n        //     for(int j = i+1;j<=A.length;j++){\n        //         if(arr[j]-arr[i]>=K){\n        //             res = Math.min(j-i,res);\n        //         }\n        //     }\n        // }\n      \t\n        Deque<Integer> queue = new ArrayDeque<>();\n        for(int i=0;i<arr.length;i++){\n            while(!queue.isEmpty()&&arr[i]<=arr[queue.getLast()])   queue.removeLast();\n            while(!queue.isEmpty()&&arr[i]-arr[queue.peek()]>=K)    res = Math.min(res,i-queue.poll());\n            queue.add(i);\n        }\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n}\n```\n\n","slug":"LeetCode/LeetCode-862","published":1,"updated":"2023-05-12T14:35:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjins000eqqfdbyge87fv","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of</em> <code>nums</code> <em>with a sum of at least</em> <code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p>\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n<span id=\"more\"></span>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [2,-1,2], k = 3</span><br><span class=\"line\">Output: 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>​        To find the sum of consecutive subsequences, it is easy to think of using prefix sums.</p>\n<p>​        Since there are positive and negative arrays, it is not possible to use bifurcation, and brute force cracking will time out.</p>\n<p>#### <strong>Optimization:</strong></p>\n<p>Because it is to find the shortest interval, it can be obvious to think of sliding windows, but this array does not satisfy monotonicity: the</p>\n<p>There are <strong>negative numbers</strong> in the array, resulting in window values <strong>not monotonic</strong>, but because there are negative numbers so that is why when we find a certain window and for K, there may still be feasible solutions within the window, for the following reasons:</p>\n<p><strong>For all indexes ${i_{0-j}}$ that satisfy ≥K before index $i_j$,</strong></p>\n<p><strong>If $i_1$&lt;$i_2$ and arr[$i_1$]&gt;arr[$i_2$],</strong></p>\n<p> <strong>then the feasible solution must be $i_2$,</strong></p>\n<p> <strong>because $i_2$ is larger and arr[$i_2$] is smaller</strong></p>\n<p>So  <strong>we can maintain a monotonic queue to guarantee the monotonicity of the values in the window:</strong></p>\n<h3 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea:\"></a>Idea:</h3><p>Based on the fact that we always want the left pointer to be as close as possible for each right pointer j and the value to be as large as possible.</p>\n<p>If there is a value at i-1 &gt; i, then the value at i-1 must not be the correct solution, because the value at i is closer and can get a larger array sum, if i-1 is satisfied i must be satisfied, so as to reduce the amount of our judgment</p>\n<p>If the value at the top of the queue satisfies the current value - the value at the top of the queue &gt;= K, record the length and pop the top of the queue</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestSubarray</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> [] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span> [A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            arr[i+<span class=\"number\">1</span>] = arr[i]+A[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i]&gt;=K) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//得到前缀和数组/ get pre sum</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             res = Math.min(j-i,res);</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      \t</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class=\"line\">            queue.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res==Integer.MAX_VALUE?-<span class=\"number\">1</span>:res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of</em> <code>nums</code> <em>with a sum of at least</em> <code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p>\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>","more":"<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [2,-1,2], k = 3</span><br><span class=\"line\">Output: 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>​        To find the sum of consecutive subsequences, it is easy to think of using prefix sums.</p>\n<p>​        Since there are positive and negative arrays, it is not possible to use bifurcation, and brute force cracking will time out.</p>\n<p>#### <strong>Optimization:</strong></p>\n<p>Because it is to find the shortest interval, it can be obvious to think of sliding windows, but this array does not satisfy monotonicity: the</p>\n<p>There are <strong>negative numbers</strong> in the array, resulting in window values <strong>not monotonic</strong>, but because there are negative numbers so that is why when we find a certain window and for K, there may still be feasible solutions within the window, for the following reasons:</p>\n<p><strong>For all indexes ${i_{0-j}}$ that satisfy ≥K before index $i_j$,</strong></p>\n<p><strong>If $i_1$&lt;$i_2$ and arr[$i_1$]&gt;arr[$i_2$],</strong></p>\n<p> <strong>then the feasible solution must be $i_2$,</strong></p>\n<p> <strong>because $i_2$ is larger and arr[$i_2$] is smaller</strong></p>\n<p>So  <strong>we can maintain a monotonic queue to guarantee the monotonicity of the values in the window:</strong></p>\n<h3 id=\"Idea\"><a href=\"#Idea\" class=\"headerlink\" title=\"Idea:\"></a>Idea:</h3><p>Based on the fact that we always want the left pointer to be as close as possible for each right pointer j and the value to be as large as possible.</p>\n<p>If there is a value at i-1 &gt; i, then the value at i-1 must not be the correct solution, because the value at i is closer and can get a larger array sum, if i-1 is satisfied i must be satisfied, so as to reduce the amount of our judgment</p>\n<p>If the value at the top of the queue satisfies the current value - the value at the top of the queue &gt;= K, record the length and pop the top of the queue</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestSubarray</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> [] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span> [A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            arr[i+<span class=\"number\">1</span>] = arr[i]+A[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i]&gt;=K) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;<span class=\"comment\">//得到前缀和数组/ get pre sum</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"comment\">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//             res = Math.min(j-i,res);</span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">      \t</span><br><span class=\"line\">        Deque&lt;Integer&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class=\"line\">            queue.add(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res==Integer.MAX_VALUE?-<span class=\"number\">1</span>:res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-381","author":"Ray","top":true,"cover":false,"date":"2023-05-12T09:14:10.000Z","mathjax":true,"_content":"\n### Q:\n\n`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the `RandomizedCollection` class:\n\n- `RandomizedCollection()` Initializes the empty `RandomizedCollection` object.\n- `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise.\n- `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n- `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on **average** `O(1)` time complexity.\n\n**Note:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.\n\n<!-- more -->\n\n### Input:\n\n```\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\n\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n```\n\n### S:\n\nBecause the topic needs to find out if the value exists when inserting, we need to achieve a lookup of O1, so there are lists and hashmaps (lists by index) that can do this.\n\nHowever, since list cannot directly find the value of an element O1, we can consider using list and hashmap together.\n\nThe map stores (value, index) and the list stores the value. \n\nSince list can only be O1 when the tail element is deleted, we can swap the element to be deleted with the tail element and then delete the value and index key-value pairs stored in map.\n\nSince a value may have multiple indexes, the indexes also need to be encapsulated in a collection.\n\n Considering that a value will not have 2 identical indexes, and that operations such as delete swap require the deletion of the worthy indexes, set is used to hold the index sequence\n\n```java\nclass RandomizedCollection {\n    int n ;// collection size\n    HashMap<Integer,Set<Integer>>map;\n    ArrayList<Integer>list;\n    Random random;\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n        this.random = new Random();\n        this.map = new HashMap();\n        this.n = 0;\n        this.list = new ArrayList<>();\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public boolean insert(int val) {\n        Set set = map.get(val);\n        if(set==null)   set = new HashSet<>();\n        set.add(n);// add index\n        list.add(val);\n        map.put(val, set);\n        n++;\n        return set.size()==1;\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public boolean remove(int val) {\n        if(map.containsKey(val)){\n            int lastIndex = n-1;// get last index\n            Set lastset = map.get(list.get(lastIndex));\n            Set set = map.get(val);\n            int currIndex = (int)set.iterator().next();//get current index  tip:: iterator in set is ordered when you use next\n            //delete\n            swap(list, currIndex, lastIndex);\n            list.remove(n-1);// list delete\n            set.remove(currIndex);//delete set\n            if(set.size()==0)   map.remove(val);//delete map\n            //edit last index\n            lastset.remove(n-1);\n            lastset.add(currIndex);\n            n--;\n        }else{\n            return false;\n        }\n        return true;\n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n        return list.get(random.nextInt(n));\n    }\n    private void swap(List<Integer> list ,int i,int j){\n        int temp = list.get(i);\n        list.set(i, list.get(j));\n        list.set(j, temp);\n    }\n}\n```\n\n","source":"_posts/LeetCode/LeetCode-381.md","raw":"---\ntitle: LeetCode-381\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 17:14:10\ncategories: technology\nmathjax: true\ntags: \n  - LeetCode\n  - java\n  - Data structures\n---\n\n### Q:\n\n`RandomizedCollection` is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.\n\nImplement the `RandomizedCollection` class:\n\n- `RandomizedCollection()` Initializes the empty `RandomizedCollection` object.\n- `bool insert(int val)` Inserts an item `val` into the multiset, even if the item is already present. Returns `true` if the item is not present, `false` otherwise.\n- `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item is present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n- `int getRandom()` Returns a random element from the current multiset of elements. The probability of each element being returned is **linearly related** to the number of the same values the multiset contains.\n\nYou must implement the functions of the class such that each function works on **average** `O(1)` time complexity.\n\n**Note:** The test cases are generated such that `getRandom` will only be called if there is **at least one** item in the `RandomizedCollection`.\n\n<!-- more -->\n\n### Input:\n\n```\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\n\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1);   // return true since the collection does not contain 1.\n                                  // Inserts 1 into the collection.\nrandomizedCollection.insert(1);   // return false since the collection contains 1.\n                                  // Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2);   // return true since the collection does not contain 2.\n                                  // Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n                                  // - return 1 with probability 2/3, or\n                                  // - return 2 with probability 1/3.\nrandomizedCollection.remove(1);   // return true since the collection contains 1.\n                                  // Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.\n```\n\n### S:\n\nBecause the topic needs to find out if the value exists when inserting, we need to achieve a lookup of O1, so there are lists and hashmaps (lists by index) that can do this.\n\nHowever, since list cannot directly find the value of an element O1, we can consider using list and hashmap together.\n\nThe map stores (value, index) and the list stores the value. \n\nSince list can only be O1 when the tail element is deleted, we can swap the element to be deleted with the tail element and then delete the value and index key-value pairs stored in map.\n\nSince a value may have multiple indexes, the indexes also need to be encapsulated in a collection.\n\n Considering that a value will not have 2 identical indexes, and that operations such as delete swap require the deletion of the worthy indexes, set is used to hold the index sequence\n\n```java\nclass RandomizedCollection {\n    int n ;// collection size\n    HashMap<Integer,Set<Integer>>map;\n    ArrayList<Integer>list;\n    Random random;\n    /** Initialize your data structure here. */\n    public RandomizedCollection() {\n        this.random = new Random();\n        this.map = new HashMap();\n        this.n = 0;\n        this.list = new ArrayList<>();\n    }\n    \n    /** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */\n    public boolean insert(int val) {\n        Set set = map.get(val);\n        if(set==null)   set = new HashSet<>();\n        set.add(n);// add index\n        list.add(val);\n        map.put(val, set);\n        n++;\n        return set.size()==1;\n    }\n    \n    /** Removes a value from the collection. Returns true if the collection contained the specified element. */\n    public boolean remove(int val) {\n        if(map.containsKey(val)){\n            int lastIndex = n-1;// get last index\n            Set lastset = map.get(list.get(lastIndex));\n            Set set = map.get(val);\n            int currIndex = (int)set.iterator().next();//get current index  tip:: iterator in set is ordered when you use next\n            //delete\n            swap(list, currIndex, lastIndex);\n            list.remove(n-1);// list delete\n            set.remove(currIndex);//delete set\n            if(set.size()==0)   map.remove(val);//delete map\n            //edit last index\n            lastset.remove(n-1);\n            lastset.add(currIndex);\n            n--;\n        }else{\n            return false;\n        }\n        return true;\n    }\n    \n    /** Get a random element from the collection. */\n    public int getRandom() {\n        return list.get(random.nextInt(n));\n    }\n    private void swap(List<Integer> list ,int i,int j){\n        int temp = list.get(i);\n        list.set(i, list.get(j));\n        list.set(j, temp);\n    }\n}\n```\n\n","slug":"LeetCode/LeetCode-381","published":1,"updated":"2023-05-12T16:30:00.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjint000fqqfdffhucdde","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p>\n<p>Implement the <code>RandomizedCollection</code> class:</p>\n<ul>\n<li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li>\n<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li>\n<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li>\n<li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li>\n</ul>\n<p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p>\n<p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p>\n<span id=\"more\"></span>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input</span><br><span class=\"line\">[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</span><br><span class=\"line\">[[], [1], [1], [2], [], [1], []]</span><br><span class=\"line\">Output</span><br><span class=\"line\">[null, true, false, true, 2, true, 1]</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation</span><br><span class=\"line\">RandomizedCollection randomizedCollection = new RandomizedCollection();</span><br><span class=\"line\">randomizedCollection.insert(1);   // return true since the collection does not contain 1.</span><br><span class=\"line\">                                  // Inserts 1 into the collection.</span><br><span class=\"line\">randomizedCollection.insert(1);   // return false since the collection contains 1.</span><br><span class=\"line\">                                  // Inserts another 1 into the collection. Collection now contains [1,1].</span><br><span class=\"line\">randomizedCollection.insert(2);   // return true since the collection does not contain 2.</span><br><span class=\"line\">                                  // Inserts 2 into the collection. Collection now contains [1,1,2].</span><br><span class=\"line\">randomizedCollection.getRandom(); // getRandom should:</span><br><span class=\"line\">                                  // - return 1 with probability 2/3, or</span><br><span class=\"line\">                                  // - return 2 with probability 1/3.</span><br><span class=\"line\">randomizedCollection.remove(1);   // return true since the collection contains 1.</span><br><span class=\"line\">                                  // Removes 1 from the collection. Collection now contains [1,2].</span><br><span class=\"line\">randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>Because the topic needs to find out if the value exists when inserting, we need to achieve a lookup of O1, so there are lists and hashmaps (lists by index) that can do this.</p>\n<p>However, since list cannot directly find the value of an element O1, we can consider using list and hashmap together.</p>\n<p>The map stores (value, index) and the list stores the value. </p>\n<p>Since list can only be O1 when the tail element is deleted, we can swap the element to be deleted with the tail element and then delete the value and index key-value pairs stored in map.</p>\n<p>Since a value may have multiple indexes, the indexes also need to be encapsulated in a collection.</p>\n<p> Considering that a value will not have 2 identical indexes, and that operations such as delete swap require the deletion of the worthy indexes, set is used to hold the index sequence</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RandomizedCollection</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;<span class=\"comment\">// collection size</span></span><br><span class=\"line\">    HashMap&lt;Integer,Set&lt;Integer&gt;&gt;map;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt;list;</span><br><span class=\"line\">    Random random;</span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RandomizedCollection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.random = <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> map.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set==<span class=\"literal\">null</span>)   set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        set.add(n);<span class=\"comment\">// add index</span></span><br><span class=\"line\">        list.add(val);</span><br><span class=\"line\">        map.put(val, set);</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.size()==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.containsKey(val))&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">lastIndex</span> <span class=\"operator\">=</span> n-<span class=\"number\">1</span>;<span class=\"comment\">// get last index</span></span><br><span class=\"line\">            <span class=\"type\">Set</span> <span class=\"variable\">lastset</span> <span class=\"operator\">=</span> map.get(list.get(lastIndex));</span><br><span class=\"line\">            <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> map.get(val);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">currIndex</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)set.iterator().next();<span class=\"comment\">//get current index  tip:: iterator in set is ordered when you use next</span></span><br><span class=\"line\">            <span class=\"comment\">//delete</span></span><br><span class=\"line\">            swap(list, currIndex, lastIndex);</span><br><span class=\"line\">            list.remove(n-<span class=\"number\">1</span>);<span class=\"comment\">// list delete</span></span><br><span class=\"line\">            set.remove(currIndex);<span class=\"comment\">//delete set</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.size()==<span class=\"number\">0</span>)   map.remove(val);<span class=\"comment\">//delete map</span></span><br><span class=\"line\">            <span class=\"comment\">//edit last index</span></span><br><span class=\"line\">            lastset.remove(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">            lastset.add(currIndex);</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Get a random element from the collection. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getRandom</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(random.nextInt(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(List&lt;Integer&gt; list ,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">        list.set(i, list.get(j));</span><br><span class=\"line\">        list.set(j, temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p>\n<p>Implement the <code>RandomizedCollection</code> class:</p>\n<ul>\n<li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li>\n<li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li>\n<li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li>\n<li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li>\n</ul>\n<p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p>\n<p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p>","more":"<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input</span><br><span class=\"line\">[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</span><br><span class=\"line\">[[], [1], [1], [2], [], [1], []]</span><br><span class=\"line\">Output</span><br><span class=\"line\">[null, true, false, true, 2, true, 1]</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation</span><br><span class=\"line\">RandomizedCollection randomizedCollection = new RandomizedCollection();</span><br><span class=\"line\">randomizedCollection.insert(1);   // return true since the collection does not contain 1.</span><br><span class=\"line\">                                  // Inserts 1 into the collection.</span><br><span class=\"line\">randomizedCollection.insert(1);   // return false since the collection contains 1.</span><br><span class=\"line\">                                  // Inserts another 1 into the collection. Collection now contains [1,1].</span><br><span class=\"line\">randomizedCollection.insert(2);   // return true since the collection does not contain 2.</span><br><span class=\"line\">                                  // Inserts 2 into the collection. Collection now contains [1,1,2].</span><br><span class=\"line\">randomizedCollection.getRandom(); // getRandom should:</span><br><span class=\"line\">                                  // - return 1 with probability 2/3, or</span><br><span class=\"line\">                                  // - return 2 with probability 1/3.</span><br><span class=\"line\">randomizedCollection.remove(1);   // return true since the collection contains 1.</span><br><span class=\"line\">                                  // Removes 1 from the collection. Collection now contains [1,2].</span><br><span class=\"line\">randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><p>Because the topic needs to find out if the value exists when inserting, we need to achieve a lookup of O1, so there are lists and hashmaps (lists by index) that can do this.</p>\n<p>However, since list cannot directly find the value of an element O1, we can consider using list and hashmap together.</p>\n<p>The map stores (value, index) and the list stores the value. </p>\n<p>Since list can only be O1 when the tail element is deleted, we can swap the element to be deleted with the tail element and then delete the value and index key-value pairs stored in map.</p>\n<p>Since a value may have multiple indexes, the indexes also need to be encapsulated in a collection.</p>\n<p> Considering that a value will not have 2 identical indexes, and that operations such as delete swap require the deletion of the worthy indexes, set is used to hold the index sequence</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RandomizedCollection</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n ;<span class=\"comment\">// collection size</span></span><br><span class=\"line\">    HashMap&lt;Integer,Set&lt;Integer&gt;&gt;map;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt;list;</span><br><span class=\"line\">    Random random;</span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RandomizedCollection</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.random = <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">insert</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> map.get(val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set==<span class=\"literal\">null</span>)   set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        set.add(n);<span class=\"comment\">// add index</span></span><br><span class=\"line\">        list.add(val);</span><br><span class=\"line\">        map.put(val, set);</span><br><span class=\"line\">        n++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> set.size()==<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">remove</span><span class=\"params\">(<span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.containsKey(val))&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">lastIndex</span> <span class=\"operator\">=</span> n-<span class=\"number\">1</span>;<span class=\"comment\">// get last index</span></span><br><span class=\"line\">            <span class=\"type\">Set</span> <span class=\"variable\">lastset</span> <span class=\"operator\">=</span> map.get(list.get(lastIndex));</span><br><span class=\"line\">            <span class=\"type\">Set</span> <span class=\"variable\">set</span> <span class=\"operator\">=</span> map.get(val);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">currIndex</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)set.iterator().next();<span class=\"comment\">//get current index  tip:: iterator in set is ordered when you use next</span></span><br><span class=\"line\">            <span class=\"comment\">//delete</span></span><br><span class=\"line\">            swap(list, currIndex, lastIndex);</span><br><span class=\"line\">            list.remove(n-<span class=\"number\">1</span>);<span class=\"comment\">// list delete</span></span><br><span class=\"line\">            set.remove(currIndex);<span class=\"comment\">//delete set</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(set.size()==<span class=\"number\">0</span>)   map.remove(val);<span class=\"comment\">//delete map</span></span><br><span class=\"line\">            <span class=\"comment\">//edit last index</span></span><br><span class=\"line\">            lastset.remove(n-<span class=\"number\">1</span>);</span><br><span class=\"line\">            lastset.add(currIndex);</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** Get a random element from the collection. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getRandom</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(random.nextInt(n));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(List&lt;Integer&gt; list ,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">        list.set(i, list.get(j));</span><br><span class=\"line\">        list.set(j, temp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"According to LeetCode_813,How to use a recursion to dp","author":"Ray","top":true,"cover":false,"date":"2023-05-13T08:14:10.000Z","mathjax":true,"_content":"\n### Q:\n\nYou are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.\n\nNote that the partition must use every integer in `nums`, and that the score is not necessarily an integer.\n\nReturn *the maximum **score** you can achieve of all the possible partitions*. Answers within `10-6` of the actual answer will be accepted.\n\n<!-- more -->\n\n### Input:\n\n```\nInput: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation: \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n```\n\n### S:\n\n#### First\n\nThe most intuitive idea in solving this problem is that we can enumerate each case and finally get the optimal answer. So, we can solve the problem by recursive enumeration, by enumerating each partitioned case to get the final maximum value \nThe recursive code is as follows:\n\n```java\nclass Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        return dfs(A, 0, K);\n    }\n    private double dfs(int A[] ,int index,int K){\n        if(K==0){\n            return 0.0;\n        }\n        if(K==1){// k=1 return the total array sum\n            int sum = 0;\n            for(int i=index;i<A.length;i++){\n                sum+=A[i];\n            }\n            return (double)sum/(A.length-index);\n        }\n        double sum = 0.0;\n        double res = 0.0;\n        for(int i=index;i<=A.length-K;i++){\n            sum+=A[i];//Enumerate each separation point\n            double avage = sum/(i-index+1);\n            double temp = dfs(A,i+1,K-1);// next sub array sum \n            res = Math.max(res, avage+temp);//select max\n        }\n        return (double)res;\n    }\n}\n\n```\n\n#### Second\n\n​\t\tIn general, using recursion for enumeration is not the optimal solution because it involves a lot of repetition, so we can use mnemonic recursion, which uses an array of recursive values that have already been obtained, so that when we enter the branch again, we can quickly obtain a solution. After understanding the above recursive code, it is easy to obtain the mnemonic recursive code with a little modification\n\n```java\nclass Solution {\n  \t//use a array to record the value which has been caculate\n    double [][] memo ;\n    public double largestSumOfAverages(int[] A, int K) {\n        this.memo = new double [A.length+1][K+1];\n        return dfs(A, 0, K);\n    }\n    private double dfs(int A[] ,int index,int K){\n        if(K==0){\n            return 0.0;\n        }\n        if(memo[index][K]!=0.0)   return memo[index][K];\n        if(K==1){\n            int sum = 0;\n            for(int i=index;i<A.length;i++){\n                sum+=A[i];\n            }\n            memo[index][K] = (double)sum/(A.length-index);\n            return memo[index][K];\n        }\n        double sum = 0.0;\n        double res = 0.0;\n        for(int i=index;i<=A.length-K;i++){\n            sum+=A[i];\n            double avage = sum/(i-index+1);\n            // double temp = dfs(A,i+1,K-1);\n            // memo[i+1][K-1] = temp;\n            memo[i+1][K-1] = dfs(A,i+1,K-1);\n            res = Math.max(res, avage+memo[i+1][K-1]);\n        }\n        memo[index][K] =res;\n        return (double)res;\n    }\n}\n\n```\n\n#### Finally\n\n​\t\tMnemonic recursion is actually very similar to dynamic programming, except that one is top-down tableau and the other is bottom-up tableau. Based on the idea of memetic recursion, we can rewrite memetic recursion as DP\n\n```java\npublic double largestSumOfAverages(int[] A, int K) {\n        double[][] dp = new double[A.length+1][K+1];\n        double [] preSum = new double[A.length+1];\n        for(int i=0;i<A.length;i++){\n            preSum[i+1]= preSum[i]+A[i];\n            dp[i+1][1] = preSum[i+1]/(i+1);//init\n        }\n        for(int i=1;i<=A.length;i++){\n            for(int j=2;j<=Math.min(K, i);j++){\n                //The maximum mean value of dp[i][j] should be the maximum of all possible values of dp[i'][j-1] + the mean sum of i'-i\n                for(int t = 0;t<i;t++){\n                    dp[i][j] = Math.max(dp[i][j], dp[t][j-1]+(preSum[i]-preSum[t])/(i-t));\n                }\n            }\n        }\n        return dp[A.length][K];\n    }\n\n```\n\n","source":"_posts/LeetCode/LeetCode-813.md","raw":"---\ntitle: According to LeetCode_813,How to use a recursion to dp\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-13 16:14:10\ncategories: technology\nmathjax: true\ntags: \n  - LeetCode\n  - java\n  - Data structures\n---\n\n### Q:\n\nYou are given an integer array `nums` and an integer `k`. You can partition the array into **at most** `k` non-empty adjacent subarrays. The **score** of a partition is the sum of the averages of each subarray.\n\nNote that the partition must use every integer in `nums`, and that the score is not necessarily an integer.\n\nReturn *the maximum **score** you can achieve of all the possible partitions*. Answers within `10-6` of the actual answer will be accepted.\n\n<!-- more -->\n\n### Input:\n\n```\nInput: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation: \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n```\n\n### S:\n\n#### First\n\nThe most intuitive idea in solving this problem is that we can enumerate each case and finally get the optimal answer. So, we can solve the problem by recursive enumeration, by enumerating each partitioned case to get the final maximum value \nThe recursive code is as follows:\n\n```java\nclass Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        return dfs(A, 0, K);\n    }\n    private double dfs(int A[] ,int index,int K){\n        if(K==0){\n            return 0.0;\n        }\n        if(K==1){// k=1 return the total array sum\n            int sum = 0;\n            for(int i=index;i<A.length;i++){\n                sum+=A[i];\n            }\n            return (double)sum/(A.length-index);\n        }\n        double sum = 0.0;\n        double res = 0.0;\n        for(int i=index;i<=A.length-K;i++){\n            sum+=A[i];//Enumerate each separation point\n            double avage = sum/(i-index+1);\n            double temp = dfs(A,i+1,K-1);// next sub array sum \n            res = Math.max(res, avage+temp);//select max\n        }\n        return (double)res;\n    }\n}\n\n```\n\n#### Second\n\n​\t\tIn general, using recursion for enumeration is not the optimal solution because it involves a lot of repetition, so we can use mnemonic recursion, which uses an array of recursive values that have already been obtained, so that when we enter the branch again, we can quickly obtain a solution. After understanding the above recursive code, it is easy to obtain the mnemonic recursive code with a little modification\n\n```java\nclass Solution {\n  \t//use a array to record the value which has been caculate\n    double [][] memo ;\n    public double largestSumOfAverages(int[] A, int K) {\n        this.memo = new double [A.length+1][K+1];\n        return dfs(A, 0, K);\n    }\n    private double dfs(int A[] ,int index,int K){\n        if(K==0){\n            return 0.0;\n        }\n        if(memo[index][K]!=0.0)   return memo[index][K];\n        if(K==1){\n            int sum = 0;\n            for(int i=index;i<A.length;i++){\n                sum+=A[i];\n            }\n            memo[index][K] = (double)sum/(A.length-index);\n            return memo[index][K];\n        }\n        double sum = 0.0;\n        double res = 0.0;\n        for(int i=index;i<=A.length-K;i++){\n            sum+=A[i];\n            double avage = sum/(i-index+1);\n            // double temp = dfs(A,i+1,K-1);\n            // memo[i+1][K-1] = temp;\n            memo[i+1][K-1] = dfs(A,i+1,K-1);\n            res = Math.max(res, avage+memo[i+1][K-1]);\n        }\n        memo[index][K] =res;\n        return (double)res;\n    }\n}\n\n```\n\n#### Finally\n\n​\t\tMnemonic recursion is actually very similar to dynamic programming, except that one is top-down tableau and the other is bottom-up tableau. Based on the idea of memetic recursion, we can rewrite memetic recursion as DP\n\n```java\npublic double largestSumOfAverages(int[] A, int K) {\n        double[][] dp = new double[A.length+1][K+1];\n        double [] preSum = new double[A.length+1];\n        for(int i=0;i<A.length;i++){\n            preSum[i+1]= preSum[i]+A[i];\n            dp[i+1][1] = preSum[i+1]/(i+1);//init\n        }\n        for(int i=1;i<=A.length;i++){\n            for(int j=2;j<=Math.min(K, i);j++){\n                //The maximum mean value of dp[i][j] should be the maximum of all possible values of dp[i'][j-1] + the mean sum of i'-i\n                for(int t = 0;t<i;t++){\n                    dp[i][j] = Math.max(dp[i][j], dp[t][j-1]+(preSum[i]-preSum[t])/(i-t));\n                }\n            }\n        }\n        return dp[A.length][K];\n    }\n\n```\n\n","slug":"LeetCode/LeetCode-813","published":1,"updated":"2023-05-12T16:29:46.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinu000jqqfdbosh5qhb","content":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into <strong>at most</strong> <code>k</code> non-empty adjacent subarrays. The <strong>score</strong> of a partition is the sum of the averages of each subarray.</p>\n<p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p>\n<p>Return <em>the maximum <strong>score</strong> you can achieve of all the possible partitions</em>. Answers within <code>10-6</code> of the actual answer will be accepted.</p>\n<span id=\"more\"></span>\n<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [9,1,2,3,9], k = 3</span><br><span class=\"line\">Output: 20.00000</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.</span><br><span class=\"line\">We could have also partitioned nums into [9, 1], [2], [3, 9], for example.</span><br><span class=\"line\">That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><h4 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h4><p>The most intuitive idea in solving this problem is that we can enumerate each case and finally get the optimal answer. So, we can solve the problem by recursive enumeration, by enumerating each partitioned case to get the final maximum value<br>The recursive code is as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(A, <span class=\"number\">0</span>, K);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> A[] ,<span class=\"type\">int</span> index,<span class=\"type\">int</span> K)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">1</span>)&#123;<span class=\"comment\">// k=1 return the total array sum</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">                sum+=A[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)sum/(A.length-index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class=\"line\">            sum+=A[i];<span class=\"comment\">//Enumerate each separation point</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">avage</span> <span class=\"operator\">=</span> sum/(i-index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> dfs(A,i+<span class=\"number\">1</span>,K-<span class=\"number\">1</span>);<span class=\"comment\">// next sub array sum </span></span><br><span class=\"line\">            res = Math.max(res, avage+temp);<span class=\"comment\">//select max</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h4><p>​        In general, using recursion for enumeration is not the optimal solution because it involves a lot of repetition, so we can use mnemonic recursion, which uses an array of recursive values that have already been obtained, so that when we enter the branch again, we can quickly obtain a solution. After understanding the above recursive code, it is easy to obtain the mnemonic recursive code with a little modification</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//use a array to record the value which has been caculate</span></span><br><span class=\"line\">    <span class=\"type\">double</span> [][] memo ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memo = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span> [A.length+<span class=\"number\">1</span>][K+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(A, <span class=\"number\">0</span>, K);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> A[] ,<span class=\"type\">int</span> index,<span class=\"type\">int</span> K)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(memo[index][K]!=<span class=\"number\">0.0</span>)   <span class=\"keyword\">return</span> memo[index][K];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">                sum+=A[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            memo[index][K] = (<span class=\"type\">double</span>)sum/(A.length-index);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[index][K];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class=\"line\">            sum+=A[i];</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">avage</span> <span class=\"operator\">=</span> sum/(i-index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// double temp = dfs(A,i+1,K-1);</span></span><br><span class=\"line\">            <span class=\"comment\">// memo[i+1][K-1] = temp;</span></span><br><span class=\"line\">            memo[i+<span class=\"number\">1</span>][K-<span class=\"number\">1</span>] = dfs(A,i+<span class=\"number\">1</span>,K-<span class=\"number\">1</span>);</span><br><span class=\"line\">            res = Math.max(res, avage+memo[i+<span class=\"number\">1</span>][K-<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[index][K] =res;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h4><p>​        Mnemonic recursion is actually very similar to dynamic programming, except that one is top-down tableau and the other is bottom-up tableau. Based on the idea of memetic recursion, we can rewrite memetic recursion as DP</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[A.length+<span class=\"number\">1</span>][K+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">double</span> [] preSum = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            preSum[i+<span class=\"number\">1</span>]= preSum[i]+A[i];</span><br><span class=\"line\">            dp[i+<span class=\"number\">1</span>][<span class=\"number\">1</span>] = preSum[i+<span class=\"number\">1</span>]/(i+<span class=\"number\">1</span>);<span class=\"comment\">//init</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">2</span>;j&lt;=Math.min(K, i);j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//The maximum mean value of dp[i][j] should be the maximum of all possible values of dp[i&#x27;][j-1] + the mean sum of i&#x27;-i</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;t&lt;i;t++)&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i][j], dp[t][j-<span class=\"number\">1</span>]+(preSum[i]-preSum[t])/(i-t));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[A.length][K];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"Q\"><a href=\"#Q\" class=\"headerlink\" title=\"Q:\"></a>Q:</h3><p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into <strong>at most</strong> <code>k</code> non-empty adjacent subarrays. The <strong>score</strong> of a partition is the sum of the averages of each subarray.</p>\n<p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p>\n<p>Return <em>the maximum <strong>score</strong> you can achieve of all the possible partitions</em>. Answers within <code>10-6</code> of the actual answer will be accepted.</p>","more":"<h3 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input:\"></a>Input:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [9,1,2,3,9], k = 3</span><br><span class=\"line\">Output: 20.00000</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.</span><br><span class=\"line\">We could have also partitioned nums into [9, 1], [2], [3, 9], for example.</span><br><span class=\"line\">That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.</span><br></pre></td></tr></table></figure>\n<h3 id=\"S\"><a href=\"#S\" class=\"headerlink\" title=\"S:\"></a>S:</h3><h4 id=\"First\"><a href=\"#First\" class=\"headerlink\" title=\"First\"></a>First</h4><p>The most intuitive idea in solving this problem is that we can enumerate each case and finally get the optimal answer. So, we can solve the problem by recursive enumeration, by enumerating each partitioned case to get the final maximum value<br>The recursive code is as follows:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(A, <span class=\"number\">0</span>, K);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> A[] ,<span class=\"type\">int</span> index,<span class=\"type\">int</span> K)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">1</span>)&#123;<span class=\"comment\">// k=1 return the total array sum</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">                sum+=A[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)sum/(A.length-index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class=\"line\">            sum+=A[i];<span class=\"comment\">//Enumerate each separation point</span></span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">avage</span> <span class=\"operator\">=</span> sum/(i-index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> dfs(A,i+<span class=\"number\">1</span>,K-<span class=\"number\">1</span>);<span class=\"comment\">// next sub array sum </span></span><br><span class=\"line\">            res = Math.max(res, avage+temp);<span class=\"comment\">//select max</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second\"></a>Second</h4><p>​        In general, using recursion for enumeration is not the optimal solution because it involves a lot of repetition, so we can use mnemonic recursion, which uses an array of recursive values that have already been obtained, so that when we enter the branch again, we can quickly obtain a solution. After understanding the above recursive code, it is easy to obtain the mnemonic recursive code with a little modification</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  \t<span class=\"comment\">//use a array to record the value which has been caculate</span></span><br><span class=\"line\">    <span class=\"type\">double</span> [][] memo ;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.memo = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span> [A.length+<span class=\"number\">1</span>][K+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(A, <span class=\"number\">0</span>, K);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">double</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> A[] ,<span class=\"type\">int</span> index,<span class=\"type\">int</span> K)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(memo[index][K]!=<span class=\"number\">0.0</span>)   <span class=\"keyword\">return</span> memo[index][K];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(K==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">                sum+=A[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            memo[index][K] = (<span class=\"type\">double</span>)sum/(A.length-index);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[index][K];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class=\"line\">            sum+=A[i];</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">avage</span> <span class=\"operator\">=</span> sum/(i-index+<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"comment\">// double temp = dfs(A,i+1,K-1);</span></span><br><span class=\"line\">            <span class=\"comment\">// memo[i+1][K-1] = temp;</span></span><br><span class=\"line\">            memo[i+<span class=\"number\">1</span>][K-<span class=\"number\">1</span>] = dfs(A,i+<span class=\"number\">1</span>,K-<span class=\"number\">1</span>);</span><br><span class=\"line\">            res = Math.max(res, avage+memo[i+<span class=\"number\">1</span>][K-<span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memo[index][K] =res;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">double</span>)res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Finally\"><a href=\"#Finally\" class=\"headerlink\" title=\"Finally\"></a>Finally</h4><p>​        Mnemonic recursion is actually very similar to dynamic programming, except that one is top-down tableau and the other is bottom-up tableau. Based on the idea of memetic recursion, we can rewrite memetic recursion as DP</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">largestSumOfAverages</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">double</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[A.length+<span class=\"number\">1</span>][K+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">double</span> [] preSum = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[A.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length;i++)&#123;</span><br><span class=\"line\">            preSum[i+<span class=\"number\">1</span>]= preSum[i]+A[i];</span><br><span class=\"line\">            dp[i+<span class=\"number\">1</span>][<span class=\"number\">1</span>] = preSum[i+<span class=\"number\">1</span>]/(i+<span class=\"number\">1</span>);<span class=\"comment\">//init</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=A.length;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">2</span>;j&lt;=Math.min(K, i);j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//The maximum mean value of dp[i][j] should be the maximum of all possible values of dp[i&#x27;][j-1] + the mean sum of i&#x27;-i</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;t&lt;i;t++)&#123;</span><br><span class=\"line\">                    dp[i][j] = Math.max(dp[i][j], dp[t][j-<span class=\"number\">1</span>]+(preSum[i]-preSum[t])/(i-t));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[A.length][K];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"LeetCode-934","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:22:55.000Z","_content":"\n## LeetCode-934\n\n### Question:\n\nYou are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water.\n\nAn **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`.\n\nYou may change `0`'s to `1`'s to connect the two islands to form **one island**.\n\nReturn *the smallest number of* `0`*'s you must flip to connect the two islands*.\n\n<!-- more -->\n\n### Solution:\n\nSince there are only 2 islands in the stem, we can use a deep search to find one of them first.\n\n\n\nUsing breadth-first search for this island can be interpreted as expanding this island outward 1 at a time, and when the expansion finds the other island for the Nth time, it is the solution sought by the stem.\n\n### \n\n### Code：\n\n```java\nclass Solution {\n    public int shortestBridge(int[][] A) {\n        int [][] direction = new int [][]{{1,0},{-1,0},{0,1},{0,-1}};\n        Deque<int []> queue = new ArrayDeque<>();\n        int ans = -1;\n        boolean [][] visited = new boolean[A.length][A[0].length];\n        boolean flag = true;\n        for(int i=0;i<A.length&&flag;i++){\n            for(int j=0;j<A[0].length;j++) {\n                if (A[i][j] == 1) {\n                    dfs(  A, i, j, queue, visited);\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        while (!queue.isEmpty()){\n            int size = queue.size();\n            ans++;\n            for(int i=0;i<size;i++){\n                int []node = queue.poll();\n                for(int j=0;j<4;j++){\n                    int  nx = node[0]+direction[j][0];\n                    int ny = node[1]+direction[j][1];\n                    if(nx<0||nx>=A.length||ny<0||ny>=A[0].length||visited[nx][ny])    continue;\n                    if(A[nx][ny]==1)    return ans;\n                    visited[nx][ny] = true;\n                    queue.add(new int []{nx,ny});\n                }\n            }\n        }\n        return ans;\n    }\n    private void dfs(int [][]A,int i,int j,Deque queue,boolean[][]visited){\n        if(i<0||i>=A.length||j<0||j>=A[0].length||visited[i][j]||A[i][j]!=1)    return;\n        visited[i][j] = true;\n        queue.add(new int []{i,j});\n        dfs( A, i-1, j, queue, visited);\n        dfs( A, i+1, j, queue, visited);\n        dfs( A, i, j-1, queue, visited);\n        dfs( A, i, j+1, queue, visited);\n        \n    }\n}\n\n```\n\n","source":"_posts/LeetCode/LeetCode-934.md","raw":"---\ntitle: LeetCode-934\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:22:55\ncategories: technology\ntags: \n  - LeetCode\n  - java\n  - DFS\n---\n\n## LeetCode-934\n\n### Question:\n\nYou are given an `n x n` binary matrix `grid` where `1` represents land and `0` represents water.\n\nAn **island** is a 4-directionally connected group of `1`'s not connected to any other `1`'s. There are **exactly two islands** in `grid`.\n\nYou may change `0`'s to `1`'s to connect the two islands to form **one island**.\n\nReturn *the smallest number of* `0`*'s you must flip to connect the two islands*.\n\n<!-- more -->\n\n### Solution:\n\nSince there are only 2 islands in the stem, we can use a deep search to find one of them first.\n\n\n\nUsing breadth-first search for this island can be interpreted as expanding this island outward 1 at a time, and when the expansion finds the other island for the Nth time, it is the solution sought by the stem.\n\n### \n\n### Code：\n\n```java\nclass Solution {\n    public int shortestBridge(int[][] A) {\n        int [][] direction = new int [][]{{1,0},{-1,0},{0,1},{0,-1}};\n        Deque<int []> queue = new ArrayDeque<>();\n        int ans = -1;\n        boolean [][] visited = new boolean[A.length][A[0].length];\n        boolean flag = true;\n        for(int i=0;i<A.length&&flag;i++){\n            for(int j=0;j<A[0].length;j++) {\n                if (A[i][j] == 1) {\n                    dfs(  A, i, j, queue, visited);\n                    flag = false;\n                    break;\n                }\n            }\n        }\n        while (!queue.isEmpty()){\n            int size = queue.size();\n            ans++;\n            for(int i=0;i<size;i++){\n                int []node = queue.poll();\n                for(int j=0;j<4;j++){\n                    int  nx = node[0]+direction[j][0];\n                    int ny = node[1]+direction[j][1];\n                    if(nx<0||nx>=A.length||ny<0||ny>=A[0].length||visited[nx][ny])    continue;\n                    if(A[nx][ny]==1)    return ans;\n                    visited[nx][ny] = true;\n                    queue.add(new int []{nx,ny});\n                }\n            }\n        }\n        return ans;\n    }\n    private void dfs(int [][]A,int i,int j,Deque queue,boolean[][]visited){\n        if(i<0||i>=A.length||j<0||j>=A[0].length||visited[i][j]||A[i][j]!=1)    return;\n        visited[i][j] = true;\n        queue.add(new int []{i,j});\n        dfs( A, i-1, j, queue, visited);\n        dfs( A, i+1, j, queue, visited);\n        dfs( A, i, j-1, queue, visited);\n        dfs( A, i, j+1, queue, visited);\n        \n    }\n}\n\n```\n\n","slug":"LeetCode/LeetCode-934","published":1,"updated":"2023-05-12T14:29:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinv000kqqfd1e2wcav3","content":"<h2 id=\"LeetCode-934\"><a href=\"#LeetCode-934\" class=\"headerlink\" title=\"LeetCode-934\"></a>LeetCode-934</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h3><p>You are given an <code>n x n</code> binary matrix <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water.</p>\n<p>An <strong>island</strong> is a 4-directionally connected group of <code>1</code>‘s not connected to any other <code>1</code>‘s. There are <strong>exactly two islands</strong> in <code>grid</code>.</p>\n<p>You may change <code>0</code>‘s to <code>1</code>‘s to connect the two islands to form <strong>one island</strong>.</p>\n<p>Return <em>the smallest number of</em> <code>0</code><em>‘s you must flip to connect the two islands</em>.</p>\n<span id=\"more\"></span>\n<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h3><p>Since there are only 2 islands in the stem, we can use a deep search to find one of them first.</p>\n<p>Using breadth-first search for this island can be interpreted as expanding this island outward 1 at a time, and when the expansion finds the other island for the Nth time, it is the solution sought by the stem.</p>\n<p>### </p>\n<h3 id=\"Code：\"><a href=\"#Code：\" class=\"headerlink\" title=\"Code：\"></a>Code：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestBridge</span><span class=\"params\">(<span class=\"type\">int</span>[][] A)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [][] direction = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        Deque&lt;<span class=\"type\">int</span> []&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> [][] visited = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[A.length][A[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;A[<span class=\"number\">0</span>].length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (A[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dfs(  A, i, j, queue, visited);</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> []node = queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span>  <span class=\"variable\">nx</span> <span class=\"operator\">=</span> node[<span class=\"number\">0</span>]+direction[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">ny</span> <span class=\"operator\">=</span> node[<span class=\"number\">1</span>]+direction[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||nx&gt;=A.length||ny&lt;<span class=\"number\">0</span>||ny&gt;=A[<span class=\"number\">0</span>].length||visited[nx][ny])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[nx][ny]==<span class=\"number\">1</span>)    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;nx,ny&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> [][]A,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,Deque queue,<span class=\"type\">boolean</span>[][]visited)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||i&gt;=A.length||j&lt;<span class=\"number\">0</span>||j&gt;=A[<span class=\"number\">0</span>].length||visited[i][j]||A[i][j]!=<span class=\"number\">1</span>)    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        visited[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;i,j&#125;);</span><br><span class=\"line\">        dfs( A, i-<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i+<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j-<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j+<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"LeetCode-934\"><a href=\"#LeetCode-934\" class=\"headerlink\" title=\"LeetCode-934\"></a>LeetCode-934</h2><h3 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h3><p>You are given an <code>n x n</code> binary matrix <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water.</p>\n<p>An <strong>island</strong> is a 4-directionally connected group of <code>1</code>‘s not connected to any other <code>1</code>‘s. There are <strong>exactly two islands</strong> in <code>grid</code>.</p>\n<p>You may change <code>0</code>‘s to <code>1</code>‘s to connect the two islands to form <strong>one island</strong>.</p>\n<p>Return <em>the smallest number of</em> <code>0</code><em>‘s you must flip to connect the two islands</em>.</p>","more":"<h3 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution:\"></a>Solution:</h3><p>Since there are only 2 islands in the stem, we can use a deep search to find one of them first.</p>\n<p>Using breadth-first search for this island can be interpreted as expanding this island outward 1 at a time, and when the expansion finds the other island for the Nth time, it is the solution sought by the stem.</p>\n<p>### </p>\n<h3 id=\"Code：\"><a href=\"#Code：\" class=\"headerlink\" title=\"Code：\"></a>Code：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">shortestBridge</span><span class=\"params\">(<span class=\"type\">int</span>[][] A)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> [][] direction = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [][]&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\">        Deque&lt;<span class=\"type\">int</span> []&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> [][] visited = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[A.length][A[<span class=\"number\">0</span>].length];</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;A[<span class=\"number\">0</span>].length;j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (A[i][j] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    dfs(  A, i, j, queue, visited);</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!queue.isEmpty())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> queue.size();</span><br><span class=\"line\">            ans++;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> []node = queue.poll();</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">4</span>;j++)&#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span>  <span class=\"variable\">nx</span> <span class=\"operator\">=</span> node[<span class=\"number\">0</span>]+direction[j][<span class=\"number\">0</span>];</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">ny</span> <span class=\"operator\">=</span> node[<span class=\"number\">1</span>]+direction[j][<span class=\"number\">1</span>];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(nx&lt;<span class=\"number\">0</span>||nx&gt;=A.length||ny&lt;<span class=\"number\">0</span>||ny&gt;=A[<span class=\"number\">0</span>].length||visited[nx][ny])    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(A[nx][ny]==<span class=\"number\">1</span>)    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">                    visited[nx][ny] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;nx,ny&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> [][]A,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,Deque queue,<span class=\"type\">boolean</span>[][]visited)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>||i&gt;=A.length||j&lt;<span class=\"number\">0</span>||j&gt;=A[<span class=\"number\">0</span>].length||visited[i][j]||A[i][j]!=<span class=\"number\">1</span>)    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        visited[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.add(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span> []&#123;i,j&#125;);</span><br><span class=\"line\">        dfs( A, i-<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i+<span class=\"number\">1</span>, j, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j-<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        dfs( A, i, j+<span class=\"number\">1</span>, queue, visited);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"KMP algorithm","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:44:17.000Z","_content":"\n### KMP:\n\n​\tThe KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.\n\nThe basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.\n\nThe following are the steps of the KMP algorithm:\n\n1. Construct a \"partial match table\" (also called a \"failure function\"). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. \n2. Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.\n\n<!-- more -->\n\n### Why KMP\n\n​\tIn the first approach, if the comparison from String[i] fails, the algorithm directly starts trying to compare from S[i+1]. This kind of behavior is a typical \"not learning from previous mistakes\".We should note that a failed match will provide us with valuable information - **if the match between String[i : i+len(P)] and P fails at the r th position, then from S[i] : the first (r-1) consecutive characters must be exactly the same as the first (r-1) characters of P**\n\n![](KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg)\n\n​\tTherefore, we can skip those unlikely strings as much as possible to optimize our method。\n\nGive a Exapmle:\n\n![](KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg)\n\n​\tFirst, P[5] fails to match, then it means that S[0:5] is equal to P[0:5], which is \"abcab\". \n\nNow let's consider: from S[1], S[2], S[3] Is there any chance that the initial matching attempt will succeed?\n\nWhen we start in S[1], it won't success. Because we can see : P[1] != P[0], But P[1] = S[1], So P[0] != S[1].\n\nAs same in S[2].\n\nBut when we start in S[3](it's important): **P[0] = P[3], S[3] = P[3], so P[0] = S[3].**\n\nWe can find that in S[3], it is possible to match successfully. And we will find that if it is known that S and P are the same within the length L, then whether any i can be used as the starting point of matching depends only on whether P[0] = P[i] are equal. Here we can get the core next array of the KMP algorithm\n\n### Next Array\n\nThe next array is for the pattern string. The next array of P is defined as: **next[i] represents a substring of P[0] ~ P[i], so that the first k characters are exactly equal to the largest k of the last k characters. In particular, k cannot be i+ 1** (Because this substring has only i+1 characters in total, it must be equal to itself, so it is meaningless).  **In fact, it is to get the maximum length of the longest same prefix and suffix in the P string when different starting points i.**\n\n![](KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg)\n\n### NOW, How to use next array match\n\n```java\n        int i=0;\n        int j = 0;\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n```\n\n![](KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg)\n\n#### First: we use two point to mactch the Strings. The problem is how to change the point?\n\n#### Second: \n\n \tString[i] != P [j] ,now we need change the j to find a new start which prefix of String is equals to P. Only in this way it may success. So, next array is useful: j = next[j]\n\n### How to get next array\n\n```java\nvoid getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\nthis code use a small skills：make next[0] = -1 . you can remember it ,it will make easier to code;\n\n#### dynamic programming:\n\nnext[i] means the max(i) that p[0,next[i]] = p[i-next[i],i]\n\nso, for if we know next[0],next[1],...next[i-1], how to know next[i]?\n\nset `next[i-1] = pre` \n\nif` p[i] = p[pre+1]` , it means `next[i] = pre+1`\n\nelse if `p[i] != p[pre+1],` it means `p[i-pre-1,i-1] = p[pre-1]`\n\nwe should reduce the pre. `pre = next[pre]`\n\n![](KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg)\n\n\n\n### Code:\n\n```java\n/**\n     * now we can use kmp algorithm，a prefix matching algorithm\n     *\n     */\n\n    public int strStr(String haystack, String needle){\n        //in first method,we can find that we need match all the substring if it's not match.\n        //some message have been lost: the prefix of the last string we have compared.\n        //we can start with the same prefix string to match,so that the time can be saved\n        // we can store the same prefix in a array or list, so we called kmp algorithm\n        int length = haystack.length();\n        int length1 = needle.length();\n        int i=0;\n        int j = 0;\n        int [] next = new int [length1];\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n\n        if (j == length1){\n            return i - j;\n        }\n        else {\n            return -1;\n        }\n    }\n\n    void getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n","source":"_posts/algorithm/KMP-algorithm.md","raw":"---\ntitle: KMP algorithm\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:44:17\ncategories: technology\ntags:\n  - java\n  - algorithm\n---\n\n### KMP:\n\n​\tThe KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.\n\nThe basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.\n\nThe following are the steps of the KMP algorithm:\n\n1. Construct a \"partial match table\" (also called a \"failure function\"). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. \n2. Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.\n\n<!-- more -->\n\n### Why KMP\n\n​\tIn the first approach, if the comparison from String[i] fails, the algorithm directly starts trying to compare from S[i+1]. This kind of behavior is a typical \"not learning from previous mistakes\".We should note that a failed match will provide us with valuable information - **if the match between String[i : i+len(P)] and P fails at the r th position, then from S[i] : the first (r-1) consecutive characters must be exactly the same as the first (r-1) characters of P**\n\n![](KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg)\n\n​\tTherefore, we can skip those unlikely strings as much as possible to optimize our method。\n\nGive a Exapmle:\n\n![](KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg)\n\n​\tFirst, P[5] fails to match, then it means that S[0:5] is equal to P[0:5], which is \"abcab\". \n\nNow let's consider: from S[1], S[2], S[3] Is there any chance that the initial matching attempt will succeed?\n\nWhen we start in S[1], it won't success. Because we can see : P[1] != P[0], But P[1] = S[1], So P[0] != S[1].\n\nAs same in S[2].\n\nBut when we start in S[3](it's important): **P[0] = P[3], S[3] = P[3], so P[0] = S[3].**\n\nWe can find that in S[3], it is possible to match successfully. And we will find that if it is known that S and P are the same within the length L, then whether any i can be used as the starting point of matching depends only on whether P[0] = P[i] are equal. Here we can get the core next array of the KMP algorithm\n\n### Next Array\n\nThe next array is for the pattern string. The next array of P is defined as: **next[i] represents a substring of P[0] ~ P[i], so that the first k characters are exactly equal to the largest k of the last k characters. In particular, k cannot be i+ 1** (Because this substring has only i+1 characters in total, it must be equal to itself, so it is meaningless).  **In fact, it is to get the maximum length of the longest same prefix and suffix in the P string when different starting points i.**\n\n![](KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg)\n\n### NOW, How to use next array match\n\n```java\n        int i=0;\n        int j = 0;\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n```\n\n![](KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg)\n\n#### First: we use two point to mactch the Strings. The problem is how to change the point?\n\n#### Second: \n\n \tString[i] != P [j] ,now we need change the j to find a new start which prefix of String is equals to P. Only in this way it may success. So, next array is useful: j = next[j]\n\n### How to get next array\n\n```java\nvoid getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\nthis code use a small skills：make next[0] = -1 . you can remember it ,it will make easier to code;\n\n#### dynamic programming:\n\nnext[i] means the max(i) that p[0,next[i]] = p[i-next[i],i]\n\nso, for if we know next[0],next[1],...next[i-1], how to know next[i]?\n\nset `next[i-1] = pre` \n\nif` p[i] = p[pre+1]` , it means `next[i] = pre+1`\n\nelse if `p[i] != p[pre+1],` it means `p[i-pre-1,i-1] = p[pre-1]`\n\nwe should reduce the pre. `pre = next[pre]`\n\n![](KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg)\n\n\n\n### Code:\n\n```java\n/**\n     * now we can use kmp algorithm，a prefix matching algorithm\n     *\n     */\n\n    public int strStr(String haystack, String needle){\n        //in first method,we can find that we need match all the substring if it's not match.\n        //some message have been lost: the prefix of the last string we have compared.\n        //we can start with the same prefix string to match,so that the time can be saved\n        // we can store the same prefix in a array or list, so we called kmp algorithm\n        int length = haystack.length();\n        int length1 = needle.length();\n        int i=0;\n        int j = 0;\n        int [] next = new int [length1];\n        getNext(needle,next);\n        while (i < length && j < length1)\n        {\n            if (j == -1 || haystack.charAt(i) == needle.charAt(j))\n            {\n                i++;\n                j++;\n            }\n            else {\n                j = next[j];\n            }\n        }\n\n        if (j == length1){\n            return i - j;\n        }\n        else {\n            return -1;\n        }\n    }\n\n    void getNext(String p, int [] next)\n    {\n        next[0] = -1;\n        int i = 0, j = -1;\n\n        while (i < (p.length())){\n            if (j == -1 || p.charAt(i)==p.charAt(j)) {\n                ++i;\n                ++j;\n                next[i] = j;\n            }\n            else {\n                j = next[j];\n            }\n        }\n    }\n```\n\n","slug":"algorithm/KMP-algorithm","published":1,"updated":"2023-05-12T16:53:28.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinw000oqqfdbtw33uxl","content":"<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP:\"></a>KMP:</h3><p>​    The KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.</p>\n<p>The basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.</p>\n<p>The following are the steps of the KMP algorithm:</p>\n<ol>\n<li>Construct a “partial match table” (also called a “failure function”). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. </li>\n<li>Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.</li>\n</ol>\n<span id=\"more\"></span>\n<h3 id=\"Why-KMP\"><a href=\"#Why-KMP\" class=\"headerlink\" title=\"Why KMP\"></a>Why KMP</h3><p>​    In the first approach, if the comparison from String[i] fails, the algorithm directly starts trying to compare from S[i+1]. This kind of behavior is a typical “not learning from previous mistakes”.We should note that a failed match will provide us with valuable information - <strong>if the match between String[i : i+len(P)] and P fails at the r th position, then from S[i] : the first (r-1) consecutive characters must be exactly the same as the first (r-1) characters of P</strong></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg\" alt></p>\n<p>​    Therefore, we can skip those unlikely strings as much as possible to optimize our method。</p>\n<p>Give a Exapmle:</p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg\" alt></p>\n<p>​    First, P[5] fails to match, then it means that S[0:5] is equal to P[0:5], which is “abcab”. </p>\n<p>Now let’s consider: from S[1], S[2], S[3] Is there any chance that the initial matching attempt will succeed?</p>\n<p>When we start in S[1], it won’t success. Because we can see : P[1] != P[0], But P[1] = S[1], So P[0] != S[1].</p>\n<p>As same in S[2].</p>\n<p>But when we start in S<a href=\"it&#39;s important\">3</a>: <strong>P[0] = P[3], S[3] = P[3], so P[0] = S[3].</strong></p>\n<p>We can find that in S[3], it is possible to match successfully. And we will find that if it is known that S and P are the same within the length L, then whether any i can be used as the starting point of matching depends only on whether P[0] = P[i] are equal. Here we can get the core next array of the KMP algorithm</p>\n<h3 id=\"Next-Array\"><a href=\"#Next-Array\" class=\"headerlink\" title=\"Next Array\"></a>Next Array</h3><p>The next array is for the pattern string. The next array of P is defined as: <strong>next[i] represents a substring of P[0] ~ P[i], so that the first k characters are exactly equal to the largest k of the last k characters. In particular, k cannot be i+ 1</strong> (Because this substring has only i+1 characters in total, it must be equal to itself, so it is meaningless).  <strong>In fact, it is to get the maximum length of the longest same prefix and suffix in the P string when different starting points i.</strong></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg\" alt></p>\n<h3 id=\"NOW-How-to-use-next-array-match\"><a href=\"#NOW-How-to-use-next-array-match\" class=\"headerlink\" title=\"NOW, How to use next array match\"></a>NOW, How to use next array match</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">getNext(needle,next);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        j = next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg\" alt></p>\n<h4 id=\"First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point\"><a href=\"#First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point\" class=\"headerlink\" title=\"First: we use two point to mactch the Strings. The problem is how to change the point?\"></a>First: we use two point to mactch the Strings. The problem is how to change the point?</h4><h4 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second:\"></a>Second:</h4><pre><code>String[i] != P [j] ,now we need change the j to find a new start which prefix of String is equals to P. Only in this way it may success. So, next array is useful: j = next[j]\n</code></pre><h3 id=\"How-to-get-next-array\"><a href=\"#How-to-get-next-array\" class=\"headerlink\" title=\"How to get next array\"></a>How to get next array</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>this code use a small skills：make next[0] = -1 . you can remember it ,it will make easier to code;</p>\n<h4 id=\"dynamic-programming\"><a href=\"#dynamic-programming\" class=\"headerlink\" title=\"dynamic programming:\"></a>dynamic programming:</h4><p>next[i] means the max(i) that p[0,next[i]] = p[i-next[i],i]</p>\n<p>so, for if we know next[0],next[1],…next[i-1], how to know next[i]?</p>\n<p>set <code>next[i-1] = pre</code> </p>\n<p>if<code>p[i] = p[pre+1]</code> , it means <code>next[i] = pre+1</code></p>\n<p>else if <code>p[i] != p[pre+1],</code> it means <code>p[i-pre-1,i-1] = p[pre-1]</code></p>\n<p>we should reduce the pre. <code>pre = next[pre]</code></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg\" alt></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class=\"line\">        <span class=\"comment\">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class=\"line\">        <span class=\"comment\">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class=\"line\">        <span class=\"comment\">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> haystack.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length1</span> <span class=\"operator\">=</span> needle.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [length1];</span><br><span class=\"line\">        getNext(needle,next);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == length1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP:\"></a>KMP:</h3><p>​    The KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.</p>\n<p>The basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.</p>\n<p>The following are the steps of the KMP algorithm:</p>\n<ol>\n<li>Construct a “partial match table” (also called a “failure function”). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. </li>\n<li>Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.</li>\n</ol>","more":"<h3 id=\"Why-KMP\"><a href=\"#Why-KMP\" class=\"headerlink\" title=\"Why KMP\"></a>Why KMP</h3><p>​    In the first approach, if the comparison from String[i] fails, the algorithm directly starts trying to compare from S[i+1]. This kind of behavior is a typical “not learning from previous mistakes”.We should note that a failed match will provide us with valuable information - <strong>if the match between String[i : i+len(P)] and P fails at the r th position, then from S[i] : the first (r-1) consecutive characters must be exactly the same as the first (r-1) characters of P</strong></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg\" alt></p>\n<p>​    Therefore, we can skip those unlikely strings as much as possible to optimize our method。</p>\n<p>Give a Exapmle:</p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg\" alt></p>\n<p>​    First, P[5] fails to match, then it means that S[0:5] is equal to P[0:5], which is “abcab”. </p>\n<p>Now let’s consider: from S[1], S[2], S[3] Is there any chance that the initial matching attempt will succeed?</p>\n<p>When we start in S[1], it won’t success. Because we can see : P[1] != P[0], But P[1] = S[1], So P[0] != S[1].</p>\n<p>As same in S[2].</p>\n<p>But when we start in S<a href=\"it&#39;s important\">3</a>: <strong>P[0] = P[3], S[3] = P[3], so P[0] = S[3].</strong></p>\n<p>We can find that in S[3], it is possible to match successfully. And we will find that if it is known that S and P are the same within the length L, then whether any i can be used as the starting point of matching depends only on whether P[0] = P[i] are equal. Here we can get the core next array of the KMP algorithm</p>\n<h3 id=\"Next-Array\"><a href=\"#Next-Array\" class=\"headerlink\" title=\"Next Array\"></a>Next Array</h3><p>The next array is for the pattern string. The next array of P is defined as: <strong>next[i] represents a substring of P[0] ~ P[i], so that the first k characters are exactly equal to the largest k of the last k characters. In particular, k cannot be i+ 1</strong> (Because this substring has only i+1 characters in total, it must be equal to itself, so it is meaningless).  <strong>In fact, it is to get the maximum length of the longest same prefix and suffix in the P string when different starting points i.</strong></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg\" alt></p>\n<h3 id=\"NOW-How-to-use-next-array-match\"><a href=\"#NOW-How-to-use-next-array-match\" class=\"headerlink\" title=\"NOW, How to use next array match\"></a>NOW, How to use next array match</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">getNext(needle,next);</span><br><span class=\"line\"><span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        j = next[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg\" alt></p>\n<h4 id=\"First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point\"><a href=\"#First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point\" class=\"headerlink\" title=\"First: we use two point to mactch the Strings. The problem is how to change the point?\"></a>First: we use two point to mactch the Strings. The problem is how to change the point?</h4><h4 id=\"Second\"><a href=\"#Second\" class=\"headerlink\" title=\"Second:\"></a>Second:</h4><pre><code>String[i] != P [j] ,now we need change the j to find a new start which prefix of String is equals to P. Only in this way it may success. So, next array is useful: j = next[j]\n</code></pre><h3 id=\"How-to-get-next-array\"><a href=\"#How-to-get-next-array\" class=\"headerlink\" title=\"How to get next array\"></a>How to get next array</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>this code use a small skills：make next[0] = -1 . you can remember it ,it will make easier to code;</p>\n<h4 id=\"dynamic-programming\"><a href=\"#dynamic-programming\" class=\"headerlink\" title=\"dynamic programming:\"></a>dynamic programming:</h4><p>next[i] means the max(i) that p[0,next[i]] = p[i-next[i],i]</p>\n<p>so, for if we know next[0],next[1],…next[i-1], how to know next[i]?</p>\n<p>set <code>next[i-1] = pre</code> </p>\n<p>if<code>p[i] = p[pre+1]</code> , it means <code>next[i] = pre+1</code></p>\n<p>else if <code>p[i] != p[pre+1],</code> it means <code>p[i-pre-1,i-1] = p[pre-1]</code></p>\n<p>we should reduce the pre. <code>pre = next[pre]</code></p>\n<p><img src=\"/en/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg\" alt></p>\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class=\"line\">        <span class=\"comment\">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class=\"line\">        <span class=\"comment\">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class=\"line\">        <span class=\"comment\">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> haystack.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length1</span> <span class=\"operator\">=</span> needle.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> [] next = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span> [length1];</span><br><span class=\"line\">        getNext(needle,next);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == length1)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i - j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">getNext</span><span class=\"params\">(String p, <span class=\"type\">int</span> [] next)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; (p.length()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == -<span class=\"number\">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">                next[i] = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j = next[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"chatGPT with confluence","author":"Ray","top":true,"cover":false,"date":"2023-05-12T07:44:05.000Z","_content":"\n### Target:\n\nSince there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files\n\n<!-- more -->\n\nHere is the code of a demo, referring to the GPT official website\n\n\n```python\n##crawler\nimport requests\nimport re\nimport urllib.request\nfrom bs4 import BeautifulSoup\nfrom collections import deque\nfrom html.parser import HTMLParser\nfrom urllib.parse import urlparse\nimport os\nimport html2text\nfrom atlassian import Confluence\nimport tiktoken\nimport pandas as pd\nimport openai\nfrom openai.embeddings_utils import distances_from_embeddings\nimport numpy as np\nfrom openai.embeddings_utils import distances_from_embeddings, cosine_similarity\nimport time\n\n\n# public account and confluence space configuration\ndomain = \"confluence.xxxxx.com\"\nfull_url = \"https://confluence.xxxxx.com/\"\nlogin_url = \"https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action\"\npage_url = \"https://confluence.xxxxx.com/display/41JTSP/\"\nuser_name = \"xxxx\"\npassword = \"xxxx\"\n# Define the space key to be crawled, which is currently our space\nspace_key = \"xxxx\"\n##Data saving address, please customize\nfilePath = \"\"\nprocessPath = \"\"\n\n##Separators and replacements, mainly for file name generation and title reduction\nsplitFlag = \"$\"\nreplaceFlag = \"_\"\n\n\n\n\n##Setting up openai environment\nopenai.organization = \"\"\nopenai.api_key = \"\"\n```\n\n\n```python\ndef crawler(base_url,username,password,space_key,totalSpace = False):\n    confluence = Confluence(url=base_url, username=username, password=password)\n    ##To be implemented, crawl all spaces\n    ##Get the corresponding space\n    space = confluence.get_space(space_key, expand='description.plain,homepage')\n    ##get space page id\n    page_id = space[\"homepage\"][\"id\"]\n    \n        # Create a directory to store the text files\n    if not os.path.exists(filePath):\n            os.mkdir(filePath)\n\n    # Create a directory to store the csv files\n    if not os.path.exists(processPath):\n            os.mkdir(processPath)\n    \n    ##subpage\n    child = confluence.get_page_child_by_type(page_id, type='page', start=None, limit=None, expand=None)\n    \n    ##init queue\n    queue = deque()\n    for i in child:\n        queue.append(i)\n    \n    while queue:\n        # Get the next URL from the queue\n        childPage = queue.pop()\n        ##get page id\n        html = confluence.get_page_by_id(childPage[\"id\"], expand=\"body.storage\")\n        # html->text\n        content = html[\"body\"][\"storage\"][\"value\"]\n        content_text = html2text.html2text(content)\n        \n        ##insert not null\n        if content_text.lstrip() != \"\":\n            title = str(html[\"title\"]).replace(\"/\",replaceFlag)\n    #         if not os.path.exists(\"/Users/lei.zhou/text/\"+html[\"title\"]):\n    #             os.mkdir(\"/Users/lei.zhou/text/\")\n            with open(filePath+ childPage[\"id\"]+splitFlag+title+ \".txt\", \"w\") as f:\n                f.write(content_text)\n\n        ##add sub point‘\n        for i in confluence.get_page_child_by_type(childPage[\"id\"], type='page', start=None, limit=None, expand=None):\n            queue.append(i)\n\n```\n\n\n```python\nmax_tokens = 500\n\ndef remove_newlines(serie):\n    serie = serie.str.replace('\\n', ' ')\n    serie = serie.str.replace('\\\\n', ' ')\n    serie = serie.str.replace('  ', ' ')\n    serie = serie.str.replace('  ', ' ')\n    return serie\ndef create_context(\n    question, df, max_len=1800, size=\"ada\"\n):\n    \"\"\"\n    Find the most similar text segment\n    \"\"\"\n    # Get the embeddings for the question\n    q_embeddings = openai.Embedding.create(input=question, engine='text-embedding-ada-002')['data'][0]['embedding']\n    # Calculate the most similar text using the cosine algorithm\n    df['distances'] = distances_from_embeddings(q_embeddings, df['embeddings'].values, distance_metric='cosine')\n\n\n    returns = []\n    cur_len = 0\n\n    # Keep adding text to the upper limit\n    for i, row in df.sort_values('distances', ascending=True).iterrows():\n        \n        # Text creation\n        cur_len += row['n_tokens'] + 4\n        \n        # Exits when limit is exceeded\n        if cur_len > max_len.\n            break\n        \n        # Add text\n        returns.append(row[\"text\"])\n\n    \n    return \"\\n\\n###\\n\\n\".join(returns)\n\n\n# token split\ndef split_into_many(text, max_tokens = max_tokens):\n\n    # Define segmentation symbols, allowing customization\n    sentences = re.split('[.。！？!?]',text)\n\n    # get token for each sentence\n    n_tokens = [len(tokenizer.encode(\" \" + sentence)) for sentence in sentences]\n    \n    chunks = []\n    tokens_so_far = 0\n    chunk = []\n\n    \n    for sentence, token in zip(sentences, n_tokens):\n\n        # If the number of tokens so far plus the number of tokens in the current sentence is greater than,greater than the maximum number of tokens, the block is added to the list of blocks and the number of blocks and tokens so far is reset\n        if tokens_so_far + token > max_tokens:\n            chunks.append(\". \".join(chunk) + \".\")\n            chunk = []\n            tokens_so_far = 0\n\n    \n        if token > max_tokens:\n            continue\n\n        \n        chunk.append(sentence)\n        tokens_so_far += token + 1\n\n    return chunks\n\n\n\ndef answer_question(\n    df,\n    model=\"text-davinci-003\",\n    question=\"what's your problem\",\n    max_len=1800,\n    size=\"ada\",\n    debug=False,\n    max_tokens=1800,\n    stop_sequence=None,\n    use_GPT=False\n):\n    \"\"\"\n    answer\n    \"\"\"\n    context = create_context(\n        question,\n        df,\n        max_len=max_len,\n        size=size,\n    )\n    \n    # If debug, print the raw model response\n    if debug:\n        print(\"Context:\\n\" + context)\n        print(\"\\n\\n\")\n        print(f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\")\n    if use_GPT:\n        completion = openai.ChatCompletion.create(model=\"gpt-3.5-turbo\",messages=[\n    {\"role\": \"user\", \"content\": f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\"}])\n        return completion.to_dict()[\"choices\"][0][\"message\"][\"content\"]\n    try:\n        # Create a completions using the question and context\n        response = openai.Completion.create(\n            prompt=f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\",\n            temperature=0,\n            max_tokens=max_tokens,\n            top_p=1,\n            frequency_penalty=0,\n            presence_penalty=0,\n            stop=stop_sequence,\n            model=model,\n        )\n        return response[\"choices\"][0][\"text\"].strip()\n    except Exception as e:\n        print(e)\n        return \"\"\n\n    \n```\n\n\n```python\ncrawler(base_url,username,password,space_key)\n```\n\n```python\n#Original Text\ntexts=[]\n\nfor file in os.listdir(filePath):\n    # file read\n    with open(filePath+file, \"r\") as f:\n        titles = file.split(splitFlag)\n        if len(titles) <= 1:\n            continue\n        title = titles[1]\n        text = f.read()\n        # Title restore, replace _ with a space insert\n        texts.append((title.replace(replaceFlag,\" \"), text))\n        \ndf = pd.DataFrame(texts, columns = ['fname', 'text'])\n\n# split by row\ndf['text'] = df.fname + \". \" + remove_newlines(df.text)\ndf.to_csv('processed/scraped.csv')\ndf.head()\n```\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fname</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n```python\ntokenizer = tiktoken.get_encoding(\"cl100k_base\")\n\ndf = pd.read_csv('processed/scraped.csv', index_col=0)\ndf.columns = ['title', 'text']\n\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\ndf\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>n_tokens</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>1355</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>1106</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>1429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>B1 OnePortal Qulification Test Report.txt</td>\n      <td>B1 OnePortal Qulification Test Report.txt.   #...</td>\n      <td>966</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Detailed Solution Architecture.txt</td>\n      <td>Detailed Solution Architecture.txt. 250</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>B1.3 Release.txt</td>\n      <td>B1.3 Release.txt. true</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>04  B1验收Charging&amp;RBC.txt</td>\n      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|...</td>\n      <td>1492</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>38</td>\n    </tr>\n  </tbody>\n</table>\n<p>417 rows × 3 columns</p>\n\n</div>\n\n\n\n\n```python\n# Tokenize the text and save the number of tokens to a new column\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\n# Visualize the distribution of the number of tokens per row using a histogram\ndf.n_tokens.hist()\n```\n\n\n\n\n    <AxesSubplot:>\n\n\n\n\n![png](chatGPT-with-confluence/output_7_1-3877587.png)\n​    \n\n\n\n```python\nshortened = []\n\n# Cyclic text reduction\nfor row in df.iterrows():\n    print(row)\n\n    if row[1]['text'] is None:\n        continue\n\n    if row[1]['n_tokens'] > max_tokens:\n        shortened += split_into_many(row[1]['text'])\n    else:\n        shortened.append( row[1]['text'] )\ndf = pd.DataFrame(shortened, columns = ['text'])\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\ndf.n_tokens.hist()\n```\n\n\n\n\n\n![png](chatGPT-with-confluence/output_8_1-3877587.png)\n​    \n\n\n```python\n## Due to the official limit, a maximum of 60 requests initiated in 1 minute, so to prevent the reporting of errors here active hibernation\n## due to the amount of data is too large, if you can not run, you can intercept part of the data in the above column df = df[0:x] x is the interception length\ndef cal(x,waittime = 0.6):\n    res = openai.Embedding.create(input=x, engine='text-embedding-ada-002')['data'][0]['embedding']\n    time.sleep(waittime)\n    return res\ndf['embeddings'] = df.text.apply(lambda x: cal(x))\n\ndf.to_csv('processed/embeddings.csv')\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n```python\n##read token\ndf=pd.read_csv('processed/embeddings.csv', index_col=0)\ndf['embeddings'] = df['embeddings'].apply(eval).apply(np.array)\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\n##Enter the maximum token and return the length for questioning, here we use Chinese for testing to check the applicability of different languages\nanswer_question(df, question=\"测试用例需要满足那些要求?\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    '测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。'\n\n\n```python\nanswer_question(df, question=\"一份DD文档或是AD文档需要满足那些要求?,请用中文回答\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    'DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。'\n\n\n\n\n\n\n\n","source":"_posts/algorithm/chatGPT-with-confluence.md","raw":"---\ntitle: chatGPT with confluence\nauthor: Ray\ntop: true\ncover: false\ndate: 2023-05-12 15:44:05\ncategories: technology\ntags:\n  - python\n  - chatGpt\n  - algorithm\n---\n\n### Target:\n\nSince there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files\n\n<!-- more -->\n\nHere is the code of a demo, referring to the GPT official website\n\n\n```python\n##crawler\nimport requests\nimport re\nimport urllib.request\nfrom bs4 import BeautifulSoup\nfrom collections import deque\nfrom html.parser import HTMLParser\nfrom urllib.parse import urlparse\nimport os\nimport html2text\nfrom atlassian import Confluence\nimport tiktoken\nimport pandas as pd\nimport openai\nfrom openai.embeddings_utils import distances_from_embeddings\nimport numpy as np\nfrom openai.embeddings_utils import distances_from_embeddings, cosine_similarity\nimport time\n\n\n# public account and confluence space configuration\ndomain = \"confluence.xxxxx.com\"\nfull_url = \"https://confluence.xxxxx.com/\"\nlogin_url = \"https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action\"\npage_url = \"https://confluence.xxxxx.com/display/41JTSP/\"\nuser_name = \"xxxx\"\npassword = \"xxxx\"\n# Define the space key to be crawled, which is currently our space\nspace_key = \"xxxx\"\n##Data saving address, please customize\nfilePath = \"\"\nprocessPath = \"\"\n\n##Separators and replacements, mainly for file name generation and title reduction\nsplitFlag = \"$\"\nreplaceFlag = \"_\"\n\n\n\n\n##Setting up openai environment\nopenai.organization = \"\"\nopenai.api_key = \"\"\n```\n\n\n```python\ndef crawler(base_url,username,password,space_key,totalSpace = False):\n    confluence = Confluence(url=base_url, username=username, password=password)\n    ##To be implemented, crawl all spaces\n    ##Get the corresponding space\n    space = confluence.get_space(space_key, expand='description.plain,homepage')\n    ##get space page id\n    page_id = space[\"homepage\"][\"id\"]\n    \n        # Create a directory to store the text files\n    if not os.path.exists(filePath):\n            os.mkdir(filePath)\n\n    # Create a directory to store the csv files\n    if not os.path.exists(processPath):\n            os.mkdir(processPath)\n    \n    ##subpage\n    child = confluence.get_page_child_by_type(page_id, type='page', start=None, limit=None, expand=None)\n    \n    ##init queue\n    queue = deque()\n    for i in child:\n        queue.append(i)\n    \n    while queue:\n        # Get the next URL from the queue\n        childPage = queue.pop()\n        ##get page id\n        html = confluence.get_page_by_id(childPage[\"id\"], expand=\"body.storage\")\n        # html->text\n        content = html[\"body\"][\"storage\"][\"value\"]\n        content_text = html2text.html2text(content)\n        \n        ##insert not null\n        if content_text.lstrip() != \"\":\n            title = str(html[\"title\"]).replace(\"/\",replaceFlag)\n    #         if not os.path.exists(\"/Users/lei.zhou/text/\"+html[\"title\"]):\n    #             os.mkdir(\"/Users/lei.zhou/text/\")\n            with open(filePath+ childPage[\"id\"]+splitFlag+title+ \".txt\", \"w\") as f:\n                f.write(content_text)\n\n        ##add sub point‘\n        for i in confluence.get_page_child_by_type(childPage[\"id\"], type='page', start=None, limit=None, expand=None):\n            queue.append(i)\n\n```\n\n\n```python\nmax_tokens = 500\n\ndef remove_newlines(serie):\n    serie = serie.str.replace('\\n', ' ')\n    serie = serie.str.replace('\\\\n', ' ')\n    serie = serie.str.replace('  ', ' ')\n    serie = serie.str.replace('  ', ' ')\n    return serie\ndef create_context(\n    question, df, max_len=1800, size=\"ada\"\n):\n    \"\"\"\n    Find the most similar text segment\n    \"\"\"\n    # Get the embeddings for the question\n    q_embeddings = openai.Embedding.create(input=question, engine='text-embedding-ada-002')['data'][0]['embedding']\n    # Calculate the most similar text using the cosine algorithm\n    df['distances'] = distances_from_embeddings(q_embeddings, df['embeddings'].values, distance_metric='cosine')\n\n\n    returns = []\n    cur_len = 0\n\n    # Keep adding text to the upper limit\n    for i, row in df.sort_values('distances', ascending=True).iterrows():\n        \n        # Text creation\n        cur_len += row['n_tokens'] + 4\n        \n        # Exits when limit is exceeded\n        if cur_len > max_len.\n            break\n        \n        # Add text\n        returns.append(row[\"text\"])\n\n    \n    return \"\\n\\n###\\n\\n\".join(returns)\n\n\n# token split\ndef split_into_many(text, max_tokens = max_tokens):\n\n    # Define segmentation symbols, allowing customization\n    sentences = re.split('[.。！？!?]',text)\n\n    # get token for each sentence\n    n_tokens = [len(tokenizer.encode(\" \" + sentence)) for sentence in sentences]\n    \n    chunks = []\n    tokens_so_far = 0\n    chunk = []\n\n    \n    for sentence, token in zip(sentences, n_tokens):\n\n        # If the number of tokens so far plus the number of tokens in the current sentence is greater than,greater than the maximum number of tokens, the block is added to the list of blocks and the number of blocks and tokens so far is reset\n        if tokens_so_far + token > max_tokens:\n            chunks.append(\". \".join(chunk) + \".\")\n            chunk = []\n            tokens_so_far = 0\n\n    \n        if token > max_tokens:\n            continue\n\n        \n        chunk.append(sentence)\n        tokens_so_far += token + 1\n\n    return chunks\n\n\n\ndef answer_question(\n    df,\n    model=\"text-davinci-003\",\n    question=\"what's your problem\",\n    max_len=1800,\n    size=\"ada\",\n    debug=False,\n    max_tokens=1800,\n    stop_sequence=None,\n    use_GPT=False\n):\n    \"\"\"\n    answer\n    \"\"\"\n    context = create_context(\n        question,\n        df,\n        max_len=max_len,\n        size=size,\n    )\n    \n    # If debug, print the raw model response\n    if debug:\n        print(\"Context:\\n\" + context)\n        print(\"\\n\\n\")\n        print(f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\")\n    if use_GPT:\n        completion = openai.ChatCompletion.create(model=\"gpt-3.5-turbo\",messages=[\n    {\"role\": \"user\", \"content\": f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\"}])\n        return completion.to_dict()[\"choices\"][0][\"message\"][\"content\"]\n    try:\n        # Create a completions using the question and context\n        response = openai.Completion.create(\n            prompt=f\"Answer the question based on the context below, and if the question can't be answered based on the context, say \\\"I don't know\\\"\\n\\nContext: {context}\\n\\n---\\n\\nQuestion: {question}\\nAnswer:\",\n            temperature=0,\n            max_tokens=max_tokens,\n            top_p=1,\n            frequency_penalty=0,\n            presence_penalty=0,\n            stop=stop_sequence,\n            model=model,\n        )\n        return response[\"choices\"][0][\"text\"].strip()\n    except Exception as e:\n        print(e)\n        return \"\"\n\n    \n```\n\n\n```python\ncrawler(base_url,username,password,space_key)\n```\n\n```python\n#Original Text\ntexts=[]\n\nfor file in os.listdir(filePath):\n    # file read\n    with open(filePath+file, \"r\") as f:\n        titles = file.split(splitFlag)\n        if len(titles) <= 1:\n            continue\n        title = titles[1]\n        text = f.read()\n        # Title restore, replace _ with a space insert\n        texts.append((title.replace(replaceFlag,\" \"), text))\n        \ndf = pd.DataFrame(texts, columns = ['fname', 'text'])\n\n# split by row\ndf['text'] = df.fname + \". \" + remove_newlines(df.text)\ndf.to_csv('processed/scraped.csv')\ndf.head()\n```\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>fname</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n    </tr>\n  </tbody>\n</table>\n\n\n\n\n```python\ntokenizer = tiktoken.get_encoding(\"cl100k_base\")\n\ndf = pd.read_csv('processed/scraped.csv', index_col=0)\ndf.columns = ['title', 'text']\n\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\ndf\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>title</th>\n      <th>text</th>\n      <th>n_tokens</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>1423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>1355</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>bak.B1.1 Payment Center Integration Test Repor...</td>\n      <td>1106</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit...</td>\n      <td>1429</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>OnlineRadio and OlineMusic B0.2 testcase revie...</td>\n      <td>2736</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>412</th>\n      <td>B1 OnePortal Qulification Test Report.txt</td>\n      <td>B1 OnePortal Qulification Test Report.txt.   #...</td>\n      <td>966</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>Detailed Solution Architecture.txt</td>\n      <td>Detailed Solution Architecture.txt. 250</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>414</th>\n      <td>B1.3 Release.txt</td>\n      <td>B1.3 Release.txt. true</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>415</th>\n      <td>04  B1验收Charging&amp;RBC.txt</td>\n      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|...</td>\n      <td>1492</td>\n    </tr>\n    <tr>\n      <th>416</th>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>ULH - Integration Outline and API-Specificatio...</td>\n      <td>38</td>\n    </tr>\n  </tbody>\n</table>\n<p>417 rows × 3 columns</p>\n\n</div>\n\n\n\n\n```python\n# Tokenize the text and save the number of tokens to a new column\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\n\n# Visualize the distribution of the number of tokens per row using a histogram\ndf.n_tokens.hist()\n```\n\n\n\n\n    <AxesSubplot:>\n\n\n\n\n![png](chatGPT-with-confluence/output_7_1-3877587.png)\n​    \n\n\n\n```python\nshortened = []\n\n# Cyclic text reduction\nfor row in df.iterrows():\n    print(row)\n\n    if row[1]['text'] is None:\n        continue\n\n    if row[1]['n_tokens'] > max_tokens:\n        shortened += split_into_many(row[1]['text'])\n    else:\n        shortened.append( row[1]['text'] )\ndf = pd.DataFrame(shortened, columns = ['text'])\ndf['n_tokens'] = df.text.apply(lambda x: len(tokenizer.encode(x)))\ndf.n_tokens.hist()\n```\n\n\n\n\n\n![png](chatGPT-with-confluence/output_8_1-3877587.png)\n​    \n\n\n```python\n## Due to the official limit, a maximum of 60 requests initiated in 1 minute, so to prevent the reporting of errors here active hibernation\n## due to the amount of data is too large, if you can not run, you can intercept part of the data in the above column df = df[0:x] x is the interception length\ndef cal(x,waittime = 0.6):\n    res = openai.Embedding.create(input=x, engine='text-embedding-ada-002')['data'][0]['embedding']\n    time.sleep(waittime)\n    return res\ndf['embeddings'] = df.text.apply(lambda x: cal(x))\n\ndf.to_csv('processed/embeddings.csv')\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n\n</div>\n\n\n\n\n```python\n##read token\ndf=pd.read_csv('processed/embeddings.csv', index_col=0)\ndf['embeddings'] = df['embeddings'].apply(eval).apply(np.array)\ndf.head()\n```\n\n\n\n</style>\n\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>n_tokens</th>\n      <th>embeddings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to ...</td>\n      <td>472</td>\n      <td>[-0.0035752991680055857, 0.015155627392232418,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试...</td>\n      <td>343</td>\n      <td>[0.012331507168710232, 0.002946529071778059, -...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte...</td>\n      <td>454</td>\n      <td>[0.004054947756230831, -0.0028905682265758514,...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>| 203 complete OK |  |   **专属部分** |  | 检查人：Zh...</td>\n      <td>492</td>\n      <td>[0.019448528066277504, 0.00747803645208478, 0....</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>bak. B1. 1 Payment Center Integration Test Rep...</td>\n      <td>481</td>\n      <td>[0.0010055731981992722, -0.013514618389308453,...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\n##Enter the maximum token and return the length for questioning, here we use Chinese for testing to check the applicability of different languages\nanswer_question(df, question=\"测试用例需要满足那些要求?\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    '测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。'\n\n\n```python\nanswer_question(df, question=\"一份DD文档或是AD文档需要满足那些要求?,请用中文回答\", debug=False,use_GPT=True,max_len=1800,max_tokens = 1800)\n```\n\n\n    'DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。'\n\n\n\n\n\n\n\n","slug":"algorithm/chatGPT-with-confluence","published":1,"updated":"2023-05-12T14:18:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkxjinx000rqqfdgvlw7e5s","content":"<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target:\"></a>Target:</h3><p>Since there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files</p>\n<span id=\"more\"></span>\n<p>Here is the code of a demo, referring to the GPT official website</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##crawler</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">from</span> html.parser <span class=\"keyword\">import</span> HTMLParser</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2text</span><br><span class=\"line\"><span class=\"keyword\">from</span> atlassian <span class=\"keyword\">import</span> Confluence</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings, cosine_similarity</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># public account and confluence space configuration</span></span><br><span class=\"line\">domain = <span class=\"string\">&quot;confluence.xxxxx.com&quot;</span></span><br><span class=\"line\">full_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class=\"line\">login_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class=\"line\">page_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class=\"line\">user_name = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\">password = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Define the space key to be crawled, which is currently our space</span></span><br><span class=\"line\">space_key = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##Data saving address, please customize</span></span><br><span class=\"line\">filePath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">processPath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##Separators and replacements, mainly for file name generation and title reduction</span></span><br><span class=\"line\">splitFlag = <span class=\"string\">&quot;$&quot;</span></span><br><span class=\"line\">replaceFlag = <span class=\"string\">&quot;_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##Setting up openai environment</span></span><br><span class=\"line\">openai.organization = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">openai.api_key = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crawler</span>(<span class=\"params\">base_url,username,password,space_key,totalSpace = <span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class=\"line\">    <span class=\"comment\">##To be implemented, crawl all spaces</span></span><br><span class=\"line\">    <span class=\"comment\">##Get the corresponding space</span></span><br><span class=\"line\">    space = confluence.get_space(space_key, expand=<span class=\"string\">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">##get space page id</span></span><br><span class=\"line\">    page_id = space[<span class=\"string\">&quot;homepage&quot;</span>][<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># Create a directory to store the text files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filePath):</span><br><span class=\"line\">            os.mkdir(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a directory to store the csv files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(processPath):</span><br><span class=\"line\">            os.mkdir(processPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##subpage</span></span><br><span class=\"line\">    child = confluence.get_page_child_by_type(page_id, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##init queue</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> child:</span><br><span class=\"line\">        queue.append(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        <span class=\"comment\"># Get the next URL from the queue</span></span><br><span class=\"line\">        childPage = queue.pop()</span><br><span class=\"line\">        <span class=\"comment\">##get page id</span></span><br><span class=\"line\">        html = confluence.get_page_by_id(childPage[<span class=\"string\">&quot;id&quot;</span>], expand=<span class=\"string\">&quot;body.storage&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># html-&gt;text</span></span><br><span class=\"line\">        content = html[<span class=\"string\">&quot;body&quot;</span>][<span class=\"string\">&quot;storage&quot;</span>][<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">        content_text = html2text.html2text(content)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">##insert not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_text.lstrip() != <span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">            title = <span class=\"built_in\">str</span>(html[<span class=\"string\">&quot;title&quot;</span>]).replace(<span class=\"string\">&quot;/&quot;</span>,replaceFlag)</span><br><span class=\"line\">    <span class=\"comment\">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class=\"line\">    <span class=\"comment\">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+ childPage[<span class=\"string\">&quot;id&quot;</span>]+splitFlag+title+ <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(content_text)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">##add sub point‘</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> confluence.get_page_child_by_type(childPage[<span class=\"string\">&quot;id&quot;</span>], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>):</span><br><span class=\"line\">            queue.append(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max_tokens = <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_newlines</span>(<span class=\"params\">serie</span>):</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> serie</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_context</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    question, df, max_len=<span class=\"number\">1800</span>, size=<span class=\"string\">&quot;ada&quot;</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Find the most similar text segment</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Get the embeddings for the question</span></span><br><span class=\"line\">    q_embeddings = openai.Embedding.create(<span class=\"built_in\">input</span>=question, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># Calculate the most similar text using the cosine algorithm</span></span><br><span class=\"line\">    df[<span class=\"string\">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class=\"string\">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class=\"string\">&#x27;cosine&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    returns = []</span><br><span class=\"line\">    cur_len = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Keep adding text to the upper limit</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, row <span class=\"keyword\">in</span> df.sort_values(<span class=\"string\">&#x27;distances&#x27;</span>, ascending=<span class=\"literal\">True</span>).iterrows():</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Text creation</span></span><br><span class=\"line\">        cur_len += row[<span class=\"string\">&#x27;n_tokens&#x27;</span>] + <span class=\"number\">4</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Exits when limit is exceeded</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_len &gt; max_len.</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Add text</span></span><br><span class=\"line\">        returns.append(row[<span class=\"string\">&quot;text&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\n\\n###\\n\\n&quot;</span>.join(returns)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># token split</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_into_many</span>(<span class=\"params\">text, max_tokens = max_tokens</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Define segmentation symbols, allowing customization</span></span><br><span class=\"line\">    sentences = re.split(<span class=\"string\">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get token for each sentence</span></span><br><span class=\"line\">    n_tokens = [<span class=\"built_in\">len</span>(tokenizer.encode(<span class=\"string\">&quot; &quot;</span> + sentence)) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> sentences]</span><br><span class=\"line\">    </span><br><span class=\"line\">    chunks = []</span><br><span class=\"line\">    tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\">    chunk = []</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> sentence, token <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(sentences, n_tokens):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># If the number of tokens so far plus the number of tokens in the current sentence is greater than,greater than the maximum number of tokens, the block is added to the list of blocks and the number of blocks and tokens so far is reset</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class=\"line\">            chunks.append(<span class=\"string\">&quot;. &quot;</span>.join(chunk) + <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">            chunk = []</span><br><span class=\"line\">            tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> token &gt; max_tokens:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        chunk.append(sentence)</span><br><span class=\"line\">        tokens_so_far += token + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chunks</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">answer_question</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    df,</span></span><br><span class=\"line\"><span class=\"params\">    model=<span class=\"string\">&quot;text-davinci-003&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    question=<span class=\"string\">&quot;what&#x27;s your problem&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_len=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    size=<span class=\"string\">&quot;ada&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    debug=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_tokens=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    stop_sequence=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">    use_GPT=<span class=\"literal\">False</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    answer</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    context = create_context(</span><br><span class=\"line\">        question,</span><br><span class=\"line\">        df,</span><br><span class=\"line\">        max_len=max_len,</span><br><span class=\"line\">        size=size,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If debug, print the raw model response</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> debug:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Context:\\n&quot;</span> + context)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_GPT:</span><br><span class=\"line\">        completion = openai.ChatCompletion.create(model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>&#125;])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion.to_dict()[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;message&quot;</span>][<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Create a completions using the question and context</span></span><br><span class=\"line\">        response = openai.Completion.create(</span><br><span class=\"line\">            prompt=<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>,</span><br><span class=\"line\">            temperature=<span class=\"number\">0</span>,</span><br><span class=\"line\">            max_tokens=max_tokens,</span><br><span class=\"line\">            top_p=<span class=\"number\">1</span>,</span><br><span class=\"line\">            frequency_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            presence_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            stop=stop_sequence,</span><br><span class=\"line\">            model=model,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Original Text</span></span><br><span class=\"line\">texts=[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> os.listdir(filePath):</span><br><span class=\"line\">    <span class=\"comment\"># file read</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+file, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        titles = file.split(splitFlag)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(titles) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        title = titles[<span class=\"number\">1</span>]</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># Title restore, replace _ with a space insert</span></span><br><span class=\"line\">        texts.append((title.replace(replaceFlag,<span class=\"string\">&quot; &quot;</span>), text))</span><br><span class=\"line\">        </span><br><span class=\"line\">df = pd.DataFrame(texts, columns = [<span class=\"string\">&#x27;fname&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># split by row</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;text&#x27;</span>] = df.fname + <span class=\"string\">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tokenizer = tiktoken.get_encoding(<span class=\"string\">&quot;cl100k_base&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df.columns = [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href=\"AxesSubplot:\">AxesSubplot:</a><br><br><br><br><br><img src=\"/en/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png\" alt=\"png\"><br>​<br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortened = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Cyclic text reduction</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class=\"line\">        shortened += split_into_many(row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        shortened.append( row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] )</span><br><span class=\"line\">df = pd.DataFrame(shortened, columns = [<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src=\"/en/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png\" alt=\"png\"><br>​<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Due to the official limit, a maximum of 60 requests initiated in 1 minute, so to prevent the reporting of errors here active hibernation</span></span><br><span class=\"line\"><span class=\"comment\">## due to the amount of data is too large, if you can not run, you can intercept part of the data in the above column df = df[0:x] x is the interception length</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cal</span>(<span class=\"params\">x,waittime = <span class=\"number\">0.6</span></span>):</span><br><span class=\"line\">    res = openai.Embedding.create(<span class=\"built_in\">input</span>=x, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    time.sleep(waittime)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: cal(x))</span><br><span class=\"line\"></span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table>\n\n<p></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##read token</span></span><br><span class=\"line\">df=pd.read_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df[<span class=\"string\">&#x27;embeddings&#x27;</span>].apply(<span class=\"built_in\">eval</span>).apply(np.array)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<p><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##Enter the maximum token and return the length for questioning, here we use Chinese for testing to check the applicability of different languages</span></span><br><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。&apos;\n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target:\"></a>Target:</h3><p>Since there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files</p>","more":"<p>Here is the code of a demo, referring to the GPT official website</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##crawler</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">from</span> html.parser <span class=\"keyword\">import</span> HTMLParser</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib.parse <span class=\"keyword\">import</span> urlparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> html2text</span><br><span class=\"line\"><span class=\"keyword\">from</span> atlassian <span class=\"keyword\">import</span> Confluence</span><br><span class=\"line\"><span class=\"keyword\">import</span> tiktoken</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> openai</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">from</span> openai.embeddings_utils <span class=\"keyword\">import</span> distances_from_embeddings, cosine_similarity</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># public account and confluence space configuration</span></span><br><span class=\"line\">domain = <span class=\"string\">&quot;confluence.xxxxx.com&quot;</span></span><br><span class=\"line\">full_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class=\"line\">login_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class=\"line\">page_url = <span class=\"string\">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class=\"line\">user_name = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\">password = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Define the space key to be crawled, which is currently our space</span></span><br><span class=\"line\">space_key = <span class=\"string\">&quot;xxxx&quot;</span></span><br><span class=\"line\"><span class=\"comment\">##Data saving address, please customize</span></span><br><span class=\"line\">filePath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">processPath = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##Separators and replacements, mainly for file name generation and title reduction</span></span><br><span class=\"line\">splitFlag = <span class=\"string\">&quot;$&quot;</span></span><br><span class=\"line\">replaceFlag = <span class=\"string\">&quot;_&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##Setting up openai environment</span></span><br><span class=\"line\">openai.organization = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">openai.api_key = <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crawler</span>(<span class=\"params\">base_url,username,password,space_key,totalSpace = <span class=\"literal\">False</span></span>):</span><br><span class=\"line\">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class=\"line\">    <span class=\"comment\">##To be implemented, crawl all spaces</span></span><br><span class=\"line\">    <span class=\"comment\">##Get the corresponding space</span></span><br><span class=\"line\">    space = confluence.get_space(space_key, expand=<span class=\"string\">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">##get space page id</span></span><br><span class=\"line\">    page_id = space[<span class=\"string\">&quot;homepage&quot;</span>][<span class=\"string\">&quot;id&quot;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\"># Create a directory to store the text files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(filePath):</span><br><span class=\"line\">            os.mkdir(filePath)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Create a directory to store the csv files</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.exists(processPath):</span><br><span class=\"line\">            os.mkdir(processPath)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##subpage</span></span><br><span class=\"line\">    child = confluence.get_page_child_by_type(page_id, <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">##init queue</span></span><br><span class=\"line\">    queue = deque()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> child:</span><br><span class=\"line\">        queue.append(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        <span class=\"comment\"># Get the next URL from the queue</span></span><br><span class=\"line\">        childPage = queue.pop()</span><br><span class=\"line\">        <span class=\"comment\">##get page id</span></span><br><span class=\"line\">        html = confluence.get_page_by_id(childPage[<span class=\"string\">&quot;id&quot;</span>], expand=<span class=\"string\">&quot;body.storage&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># html-&gt;text</span></span><br><span class=\"line\">        content = html[<span class=\"string\">&quot;body&quot;</span>][<span class=\"string\">&quot;storage&quot;</span>][<span class=\"string\">&quot;value&quot;</span>]</span><br><span class=\"line\">        content_text = html2text.html2text(content)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">##insert not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> content_text.lstrip() != <span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">            title = <span class=\"built_in\">str</span>(html[<span class=\"string\">&quot;title&quot;</span>]).replace(<span class=\"string\">&quot;/&quot;</span>,replaceFlag)</span><br><span class=\"line\">    <span class=\"comment\">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class=\"line\">    <span class=\"comment\">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+ childPage[<span class=\"string\">&quot;id&quot;</span>]+splitFlag+title+ <span class=\"string\">&quot;.txt&quot;</span>, <span class=\"string\">&quot;w&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(content_text)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">##add sub point‘</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> confluence.get_page_child_by_type(childPage[<span class=\"string\">&quot;id&quot;</span>], <span class=\"built_in\">type</span>=<span class=\"string\">&#x27;page&#x27;</span>, start=<span class=\"literal\">None</span>, limit=<span class=\"literal\">None</span>, expand=<span class=\"literal\">None</span>):</span><br><span class=\"line\">            queue.append(i)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max_tokens = <span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">remove_newlines</span>(<span class=\"params\">serie</span>):</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;\\\\n&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    serie = serie.<span class=\"built_in\">str</span>.replace(<span class=\"string\">&#x27;  &#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> serie</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">create_context</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    question, df, max_len=<span class=\"number\">1800</span>, size=<span class=\"string\">&quot;ada&quot;</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Find the most similar text segment</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Get the embeddings for the question</span></span><br><span class=\"line\">    q_embeddings = openai.Embedding.create(<span class=\"built_in\">input</span>=question, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    <span class=\"comment\"># Calculate the most similar text using the cosine algorithm</span></span><br><span class=\"line\">    df[<span class=\"string\">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class=\"string\">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class=\"string\">&#x27;cosine&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    returns = []</span><br><span class=\"line\">    cur_len = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Keep adding text to the upper limit</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, row <span class=\"keyword\">in</span> df.sort_values(<span class=\"string\">&#x27;distances&#x27;</span>, ascending=<span class=\"literal\">True</span>).iterrows():</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Text creation</span></span><br><span class=\"line\">        cur_len += row[<span class=\"string\">&#x27;n_tokens&#x27;</span>] + <span class=\"number\">4</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Exits when limit is exceeded</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> cur_len &gt; max_len.</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># Add text</span></span><br><span class=\"line\">        returns.append(row[<span class=\"string\">&quot;text&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;\\n\\n###\\n\\n&quot;</span>.join(returns)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># token split</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">split_into_many</span>(<span class=\"params\">text, max_tokens = max_tokens</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Define segmentation symbols, allowing customization</span></span><br><span class=\"line\">    sentences = re.split(<span class=\"string\">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># get token for each sentence</span></span><br><span class=\"line\">    n_tokens = [<span class=\"built_in\">len</span>(tokenizer.encode(<span class=\"string\">&quot; &quot;</span> + sentence)) <span class=\"keyword\">for</span> sentence <span class=\"keyword\">in</span> sentences]</span><br><span class=\"line\">    </span><br><span class=\"line\">    chunks = []</span><br><span class=\"line\">    tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\">    chunk = []</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> sentence, token <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(sentences, n_tokens):</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># If the number of tokens so far plus the number of tokens in the current sentence is greater than,greater than the maximum number of tokens, the block is added to the list of blocks and the number of blocks and tokens so far is reset</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class=\"line\">            chunks.append(<span class=\"string\">&quot;. &quot;</span>.join(chunk) + <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">            chunk = []</span><br><span class=\"line\">            tokens_so_far = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> token &gt; max_tokens:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        chunk.append(sentence)</span><br><span class=\"line\">        tokens_so_far += token + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> chunks</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">answer_question</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    df,</span></span><br><span class=\"line\"><span class=\"params\">    model=<span class=\"string\">&quot;text-davinci-003&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    question=<span class=\"string\">&quot;what&#x27;s your problem&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_len=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    size=<span class=\"string\">&quot;ada&quot;</span>,</span></span><br><span class=\"line\"><span class=\"params\">    debug=<span class=\"literal\">False</span>,</span></span><br><span class=\"line\"><span class=\"params\">    max_tokens=<span class=\"number\">1800</span>,</span></span><br><span class=\"line\"><span class=\"params\">    stop_sequence=<span class=\"literal\">None</span>,</span></span><br><span class=\"line\"><span class=\"params\">    use_GPT=<span class=\"literal\">False</span></span></span><br><span class=\"line\"><span class=\"params\"></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    answer</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    context = create_context(</span><br><span class=\"line\">        question,</span><br><span class=\"line\">        df,</span><br><span class=\"line\">        max_len=max_len,</span><br><span class=\"line\">        size=size,</span><br><span class=\"line\">    )</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># If debug, print the raw model response</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> debug:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Context:\\n&quot;</span> + context)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n\\n&quot;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> use_GPT:</span><br><span class=\"line\">        completion = openai.ChatCompletion.create(model=<span class=\"string\">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>&#125;])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> completion.to_dict()[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;message&quot;</span>][<span class=\"string\">&quot;content&quot;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Create a completions using the question and context</span></span><br><span class=\"line\">        response = openai.Completion.create(</span><br><span class=\"line\">            prompt=<span class=\"string\">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \\&quot;I don&#x27;t know\\&quot;\\n\\nContext: <span class=\"subst\">&#123;context&#125;</span>\\n\\n---\\n\\nQuestion: <span class=\"subst\">&#123;question&#125;</span>\\nAnswer:&quot;</span>,</span><br><span class=\"line\">            temperature=<span class=\"number\">0</span>,</span><br><span class=\"line\">            max_tokens=max_tokens,</span><br><span class=\"line\">            top_p=<span class=\"number\">1</span>,</span><br><span class=\"line\">            frequency_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            presence_penalty=<span class=\"number\">0</span>,</span><br><span class=\"line\">            stop=stop_sequence,</span><br><span class=\"line\">            model=model,</span><br><span class=\"line\">        )</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response[<span class=\"string\">&quot;choices&quot;</span>][<span class=\"number\">0</span>][<span class=\"string\">&quot;text&quot;</span>].strip()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Original Text</span></span><br><span class=\"line\">texts=[]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> file <span class=\"keyword\">in</span> os.listdir(filePath):</span><br><span class=\"line\">    <span class=\"comment\"># file read</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(filePath+file, <span class=\"string\">&quot;r&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        titles = file.split(splitFlag)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(titles) &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        title = titles[<span class=\"number\">1</span>]</span><br><span class=\"line\">        text = f.read()</span><br><span class=\"line\">        <span class=\"comment\"># Title restore, replace _ with a space insert</span></span><br><span class=\"line\">        texts.append((title.replace(replaceFlag,<span class=\"string\">&quot; &quot;</span>), text))</span><br><span class=\"line\">        </span><br><span class=\"line\">df = pd.DataFrame(texts, columns = [<span class=\"string\">&#x27;fname&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># split by row</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;text&#x27;</span>] = df.fname + <span class=\"string\">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table>\n\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tokenizer = tiktoken.get_encoding(<span class=\"string\">&quot;cl100k_base&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">df = pd.read_csv(<span class=\"string\">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df.columns = [<span class=\"string\">&#x27;title&#x27;</span>, <span class=\"string\">&#x27;text&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\">df</span><br></pre></td></tr></table></figure>\n<p></p>\n<table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href=\"AxesSubplot:\">AxesSubplot:</a><br><br><br><br><br><img src=\"/en/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png\" alt=\"png\"><br>​<br><br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shortened = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Cyclic text reduction</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> df.iterrows():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(row)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class=\"line\">        shortened += split_into_many(row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        shortened.append( row[<span class=\"number\">1</span>][<span class=\"string\">&#x27;text&#x27;</span>] )</span><br><span class=\"line\">df = pd.DataFrame(shortened, columns = [<span class=\"string\">&#x27;text&#x27;</span>])</span><br><span class=\"line\">df[<span class=\"string\">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: <span class=\"built_in\">len</span>(tokenizer.encode(x)))</span><br><span class=\"line\">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src=\"/en/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png\" alt=\"png\"><br>​<br><br><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## Due to the official limit, a maximum of 60 requests initiated in 1 minute, so to prevent the reporting of errors here active hibernation</span></span><br><span class=\"line\"><span class=\"comment\">## due to the amount of data is too large, if you can not run, you can intercept part of the data in the above column df = df[0:x] x is the interception length</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cal</span>(<span class=\"params\">x,waittime = <span class=\"number\">0.6</span></span>):</span><br><span class=\"line\">    res = openai.Embedding.create(<span class=\"built_in\">input</span>=x, engine=<span class=\"string\">&#x27;text-embedding-ada-002&#x27;</span>)[<span class=\"string\">&#x27;data&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;embedding&#x27;</span>]</span><br><span class=\"line\">    time.sleep(waittime)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class=\"keyword\">lambda</span> x: cal(x))</span><br><span class=\"line\"></span><br><span class=\"line\">df.to_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table>\n\n<p></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##read token</span></span><br><span class=\"line\">df=pd.read_csv(<span class=\"string\">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class=\"number\">0</span>)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;embeddings&#x27;</span>] = df[<span class=\"string\">&#x27;embeddings&#x27;</span>].apply(<span class=\"built_in\">eval</span>).apply(np.array)</span><br><span class=\"line\">df.head()</span><br></pre></td></tr></table></figure>\n<p></p>\n<p><table border=\"1\" class=\"dataframe\"><br>  <thead><br>    <tr style=\"text-align: right;\"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">##Enter the maximum token and return the length for questioning, here we use Chinese for testing to check the applicability of different languages</span></span><br><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;\n</code></pre><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer_question(df, question=<span class=\"string\">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class=\"literal\">False</span>,use_GPT=<span class=\"literal\">True</span>,max_len=<span class=\"number\">1800</span>,max_tokens = <span class=\"number\">1800</span>)</span><br></pre></td></tr></table></figure>\n<pre><code>&apos;DD文档或AD文档需要满足以下要求：\\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \\n8. 它应该包括接口定义，以使接口清楚明了。\\n9. 历史记录应该得到正确维护。&apos;\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.png","slug":"WX20230512-151458@2x.png","post":"clhkxjinl0003qqfd6bzpd42i","modified":0,"renderable":0},{"_id":"source/_posts/基于springboot——一个简单的BDD实践/WX20230512-151458@2x.pxd","slug":"WX20230512-151458@2x.pxd","post":"clhkxjinl0003qqfd6bzpd42i","modified":0,"renderable":0},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-133517@2x.png","slug":"WX20230512-133517@2x.png","post":"clhkxjinm0007qqfd83ul7163","modified":0,"renderable":0},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-134440@2x.png","slug":"WX20230512-134440@2x.png","post":"clhkxjinm0007qqfd83ul7163","modified":0,"renderable":0},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135224@2x.png","slug":"WX20230512-135224@2x.png","post":"clhkxjinm0007qqfd83ul7163","modified":0,"renderable":0},{"_id":"source/_posts/数据结构——链表、栈、队列/WX20230512-135651@2x.png","slug":"WX20230512-135651@2x.png","post":"clhkxjinm0007qqfd83ul7163","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1-3877587.png","slug":"output_7_1-3877587.png","post":"clhkxjinx000rqqfdgvlw7e5s","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_7_1.png","slug":"output_7_1.png","post":"clhkxjinx000rqqfdgvlw7e5s","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1-3877587.png","slug":"output_8_1-3877587.png","post":"clhkxjinx000rqqfdgvlw7e5s","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/chatGPT-with-confluence/output_8_1.png","slug":"output_8_1.png","post":"clhkxjinx000rqqfdgvlw7e5s","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","slug":"1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg","post":"clhkxjinw000oqqfdbtw33uxl","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","slug":"1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg","post":"clhkxjinw000oqqfdbtw33uxl","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","slug":"1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg","post":"clhkxjinw000oqqfdbtw33uxl","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","slug":"1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg","post":"clhkxjinw000oqqfdbtw33uxl","modified":0,"renderable":0},{"_id":"source/_posts/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","slug":"1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg","post":"clhkxjinw000oqqfdbtw33uxl","modified":0,"renderable":0},{"_id":"source/_posts/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png","slug":"1603875858-aRThUF-QQ20201028-170405@2x.png","post":"clhkxjinp0009qqfd85jt2rd7","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clhkxjinj0001qqfdgat41gno","category_id":"clhkxjinl0004qqfd4kx09dv1","_id":"clhkxjint000gqqfdenek0y2z"},{"post_id":"clhkxjins000eqqfdbyge87fv","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjinw000lqqfdhtjrc62k"},{"post_id":"clhkxjinl0003qqfd6bzpd42i","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjinx000pqqfdh040gbhk"},{"post_id":"clhkxjint000fqqfdffhucdde","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjinx000sqqfddj0afiye"},{"post_id":"clhkxjinu000jqqfdbosh5qhb","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny000wqqfd4grnbdu0"},{"post_id":"clhkxjinm0007qqfd83ul7163","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny000xqqfdhh1cet9j"},{"post_id":"clhkxjinv000kqqfd1e2wcav3","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny000zqqfd747iajog"},{"post_id":"clhkxjinw000oqqfdbtw33uxl","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny0011qqfd1eldfafk"},{"post_id":"clhkxjinp0009qqfd85jt2rd7","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny0013qqfdfl2x73oh"},{"post_id":"clhkxjinx000rqqfdgvlw7e5s","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny0015qqfdc353h5gk"},{"post_id":"clhkxjinr000aqqfd0oq2f5qj","category_id":"clhkxjins000bqqfdfjfr1tjh","_id":"clhkxjiny0016qqfdgh5hb9vi"}],"PostTag":[{"post_id":"clhkxjinj0001qqfdgat41gno","tag_id":"clhkxjinm0005qqfd6f7y7ox4","_id":"clhkxjins000dqqfdhqyf9v83"},{"post_id":"clhkxjinl0003qqfd6bzpd42i","tag_id":"clhkxjins000cqqfd526f2n7k","_id":"clhkxjinx000qqqfdew022l3e"},{"post_id":"clhkxjinl0003qqfd6bzpd42i","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjinx000uqqfd9v8facfp"},{"post_id":"clhkxjinm0007qqfd83ul7163","tag_id":"clhkxjinw000nqqfdbkrr1xob","_id":"clhkxjiny0010qqfdgrureusu"},{"post_id":"clhkxjinm0007qqfd83ul7163","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjiny0012qqfdekzcf9vs"},{"post_id":"clhkxjinp0009qqfd85jt2rd7","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjiny0019qqfdet6u6p7m"},{"post_id":"clhkxjinp0009qqfd85jt2rd7","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjinz001aqqfd01or0tq3"},{"post_id":"clhkxjinp0009qqfd85jt2rd7","tag_id":"clhkxjiny0017qqfde907bmkz","_id":"clhkxjinz001cqqfd3o3w7bll"},{"post_id":"clhkxjinr000aqqfd0oq2f5qj","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjinz001eqqfddjty0pou"},{"post_id":"clhkxjinr000aqqfd0oq2f5qj","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjinz001fqqfd8jtdeixk"},{"post_id":"clhkxjins000eqqfdbyge87fv","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjinz001kqqfdf1on8qvj"},{"post_id":"clhkxjins000eqqfdbyge87fv","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjinz001lqqfdgv7c42ly"},{"post_id":"clhkxjins000eqqfdbyge87fv","tag_id":"clhkxjinz001hqqfdbg5u9im7","_id":"clhkxjio0001nqqfdh085ara8"},{"post_id":"clhkxjins000eqqfdbyge87fv","tag_id":"clhkxjinz001iqqfd2o2p3yjy","_id":"clhkxjio0001oqqfd1hcs4e2p"},{"post_id":"clhkxjint000fqqfdffhucdde","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjio0001rqqfd32td6y4b"},{"post_id":"clhkxjint000fqqfdffhucdde","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjio0001sqqfdcdewcd2t"},{"post_id":"clhkxjint000fqqfdffhucdde","tag_id":"clhkxjinw000nqqfdbkrr1xob","_id":"clhkxjio0001uqqfdbp8j07kx"},{"post_id":"clhkxjinu000jqqfdbosh5qhb","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjio0001wqqfda8udgap2"},{"post_id":"clhkxjinu000jqqfdbosh5qhb","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjio0001xqqfdhtal8hpo"},{"post_id":"clhkxjinu000jqqfdbosh5qhb","tag_id":"clhkxjinw000nqqfdbkrr1xob","_id":"clhkxjio0001zqqfd97bw7ui3"},{"post_id":"clhkxjinv000kqqfd1e2wcav3","tag_id":"clhkxjiny000yqqfdexiu9zhu","_id":"clhkxjio10021qqfd7qbj65gz"},{"post_id":"clhkxjinv000kqqfd1e2wcav3","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjio10022qqfd97ngdepm"},{"post_id":"clhkxjinv000kqqfd1e2wcav3","tag_id":"clhkxjiny0017qqfde907bmkz","_id":"clhkxjio10024qqfd12kp0c4w"},{"post_id":"clhkxjinw000oqqfdbtw33uxl","tag_id":"clhkxjint000iqqfdaadpee8b","_id":"clhkxjio10025qqfd51rg4ofg"},{"post_id":"clhkxjinw000oqqfdbtw33uxl","tag_id":"clhkxjio00020qqfdgn95h7nr","_id":"clhkxjio10027qqfdgnwmgxs8"},{"post_id":"clhkxjinx000rqqfdgvlw7e5s","tag_id":"clhkxjio10023qqfd1ijseqt9","_id":"clhkxjio20029qqfd9cyq6y8u"},{"post_id":"clhkxjinx000rqqfdgvlw7e5s","tag_id":"clhkxjio10026qqfdahnf14po","_id":"clhkxjio2002aqqfdbcqd9dpo"},{"post_id":"clhkxjinx000rqqfdgvlw7e5s","tag_id":"clhkxjio00020qqfdgn95h7nr","_id":"clhkxjio2002bqqfdee7te23v"}],"Tag":[{"name":"Trying","_id":"clhkxjinm0005qqfd6f7y7ox4"},{"name":"project","_id":"clhkxjins000cqqfd526f2n7k"},{"name":"java","_id":"clhkxjint000iqqfdaadpee8b"},{"name":"Data structures","_id":"clhkxjinw000nqqfdbkrr1xob"},{"name":"LeetCode","_id":"clhkxjiny000yqqfdexiu9zhu"},{"name":"DFS","_id":"clhkxjiny0017qqfde907bmkz"},{"name":"persum","_id":"clhkxjinz001hqqfdbg5u9im7"},{"name":"queue","_id":"clhkxjinz001iqqfd2o2p3yjy"},{"name":"algorithm","_id":"clhkxjio00020qqfdgn95h7nr"},{"name":"python","_id":"clhkxjio10023qqfd1ijseqt9"},{"name":"chatGpt","_id":"clhkxjio10026qqfdahnf14po"}]}}