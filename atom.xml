<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ray‘s Blog</title>
  
  
  <link href="/en/atom.xml" rel="self"/>
  
  <link href="http://pjpjsocute.github.io/en/"/>
  <updated>2023-05-30T08:04:28.327Z</updated>
  <id>http://pjpjsocute.github.io/en/</id>
  
  <author>
    <name>Ray zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>based on springBoot, hand-written a simple RPC framework(3)</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/30/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%89/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/30/Rpc/基于springBoot-手写一个简单的RPC框架-三/</id>
    <published>2023-05-30T04:49:52.000Z</published>
    <updated>2023-05-30T08:04:28.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="based-on-springBoot-hand-written-a-simple-RPC-framework-3"><a href="#based-on-springBoot-hand-written-a-simple-RPC-framework-3" class="headerlink" title="based on springBoot, hand-written a simple RPC framework(3)"></a>based on springBoot, hand-written a simple RPC framework(3)</h1><p><img src="/en/2023/05/30/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%89/image-20230522163034434.png" alt="image-20230522163034434"></p><p>Continuing from the previous chapter, after implementing server registration and invocation, the next step is to implement the functionality on the client side, which mainly includes load balancing, rate limiting, request sending, and service discovery. We will proceed to implement these functionalities in the order of an RPC call flow.</p><span id="more"></span><h3 id="A-Single-Request"><a href="#A-Single-Request" class="headerlink" title="A Single Request:"></a>A Single Request:</h3><p>Before implementing the client, it is important to understand what needs to be included in a single request.</p><p>Firstly, the request should contain the current service name, method name, and their corresponding parameters and parameter types. This information is necessary for the server to perform the appropriate reflection-based invocation.</p><p>Secondly, the request should include the parameters specified within the <code>@RpcConsumer</code> annotation. This allows the server to identify the correct service to be invoked.</p><p>Lastly, the request should include a unique identifier for tracing purposes, enabling tracking of the request within the system.</p><p>With these considerations, the basic parameters required for a request are fulfilled.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8509587559718339795L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * traceId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            traceId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * interface name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            serviceName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * method name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            methodName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * parameters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[]          parameters;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * parameter types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[]        paramTypes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            version;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            project;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String            group;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate service name,use to distinguish different service,and * can be</span></span><br><span class="line"><span class="comment">     * split to get the service name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fetchRpcServiceName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getProject() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getGroup() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getServiceName() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getVersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Service-Proxy"><a href="#Service-Proxy" class="headerlink" title="Service Proxy"></a>Service Proxy</h3><p>The first step is to scan all classes with the <code>@RpcConsumer</code> annotation during the Spring startup process and generate proxies for them. When a method of such a class is subsequently invoked, it will be routed through the proxy’s method, triggering the request.</p><p>By generating a proxy for the class, we can intercept the method invocations and add the necessary logic for request initiation. This allows us to transparently handle the communication with the remote service without modifying the original class implementation.</p><p>The proxy can be implemented using various techniques, such as JDK dynamic proxies or CGLIB proxies, depending on the specific requirements and framework being used.</p><p>Once the proxies are generated, any method calls on the annotated classes will be intercepted and forwarded to the proxy. The proxy will then handle the request by initiating the RPC call to the corresponding service.</p><p>This approach simplifies the integration of remote service invocations within the application codebase, as it abstracts away the details of communication and provides a seamless experience for invoking remote methods.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcServiceRegistryAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcSendingServiceAdapter  sendingServiceAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adapter = SingletonFactory.getInstance(RpcServiceRegistryAdapterImpl.class);;</span><br><span class="line">        <span class="built_in">this</span>.sendingServiceAdapter = ExtensionLoader.getExtensionLoader(RpcSendingServiceAdapter.class)</span><br><span class="line">            .getExtension(RpcRequestSendingEnum.NETTY.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register service</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;start process register service: &#123;&#125;&quot;</span>, bean);</span><br><span class="line">        <span class="comment">// register service</span></span><br><span class="line">        <span class="keyword">if</span> (bean.getClass().isAnnotationPresent(RpcProvider.class)) &#123;</span><br><span class="line">            <span class="type">RpcProvider</span> <span class="variable">annotation</span> <span class="operator">=</span> bean.getClass().getAnnotation(RpcProvider.class);</span><br><span class="line">            <span class="comment">// build rpc service config</span></span><br><span class="line">            <span class="type">RpcServiceConfig</span> <span class="variable">serviceConfig</span> <span class="operator">=</span> RpcServiceConfig.builder()</span><br><span class="line">                .service(bean)</span><br><span class="line">                .project(annotation.project())</span><br><span class="line">                .version(annotation.version())</span><br><span class="line">                .group(annotation.group())</span><br><span class="line">                .build();</span><br><span class="line">            LogUtil.info(<span class="string">&quot;register service: &#123;&#125;&quot;</span>, serviceConfig);</span><br><span class="line">            adapter.registryService(serviceConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * proxy and injection of consumers</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        Class&lt;?&gt; toBeProcessedBean = bean.getClass();</span><br><span class="line">        Field[] declaredFields = toBeProcessedBean.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField : declaredFields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (declaredField.isAnnotationPresent(RpcConsumer.class)) &#123;</span><br><span class="line">                <span class="type">RpcConsumer</span> <span class="variable">annotation</span> <span class="operator">=</span> declaredField.getAnnotation(RpcConsumer.class);</span><br><span class="line">                <span class="comment">// build rpc service config</span></span><br><span class="line">                <span class="type">RpcServiceConfig</span> <span class="variable">serviceConfig</span> <span class="operator">=</span> RpcServiceConfig.builder()</span><br><span class="line">                    .project(annotation.project())</span><br><span class="line">                    .version(annotation.version())</span><br><span class="line">                    .group(annotation.group())</span><br><span class="line">                    .build();</span><br><span class="line">                <span class="comment">// create the proxy bean Factory and the proxy bean</span></span><br><span class="line">                <span class="type">RpcServiceProxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcServiceProxy</span>(sendingServiceAdapter, serviceConfig);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">rpcProxy</span> <span class="operator">=</span> proxy.getProxy(declaredField.getType());</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LogUtil.info(<span class="string">&quot;create service proxy: &#123;&#125;&quot;</span>, bean);</span><br><span class="line">                    declaredField.set(bean, rpcProxy);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Correct, the next step is to implement the assembly and invocation of the request within the invoke method of the proxy class. Additionally, you need to retrieve the response value from the Future and return it to the caller.</p><p>Inside the invoke method of the proxy class, you will receive the method name, parameters, and other necessary information. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServiceProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcSendingServiceAdapter sendingServiceAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcServiceConfig         config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcServiceProxy</span><span class="params">(RpcSendingServiceAdapter sendingServiceAdapter, RpcServiceConfig config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sendingServiceAdapter = sendingServiceAdapter;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;invoked method: [&#123;&#125;]&quot;</span>, method.getName());</span><br><span class="line">        <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> buildRequest(method,args);</span><br><span class="line"></span><br><span class="line">        RpcResponse&lt;Object&gt; rpcResponse = <span class="literal">null</span>;</span><br><span class="line">        CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; completableFuture =</span><br><span class="line">            (CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt;)sendingServiceAdapter.sendRpcRequest(rpcRequest);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rpcResponse = completableFuture.get();</span><br><span class="line">            <span class="keyword">return</span> rpcResponse.getData();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;occur exception:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get the proxy object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getProxy</span><span class="params">(Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (T)Proxy.newProxyInstance(clazz.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>&lt;?&gt;[] &#123;clazz&#125;, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> RpcRequest <span class="title function_">buildRequest</span><span class="params">(Method method,Object[] args)</span>&#123;</span><br><span class="line">         <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> RpcRequest.builder()</span><br><span class="line">                 .methodName(method.getName())</span><br><span class="line">                 .parameters(args)</span><br><span class="line">                 .serviceName(method.getDeclaringClass().getName())</span><br><span class="line">                 .paramTypes(method.getParameterTypes())</span><br><span class="line">                 .traceId(UUID.randomUUID().toString())</span><br><span class="line">                 .project(config.getProject())</span><br><span class="line">                 .version(config.getVersion())</span><br><span class="line">                 .group(config.getGroup())</span><br><span class="line">                 .build();</span><br><span class="line">        <span class="keyword">return</span> rpcRequest;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sending-requests"><a href="#Sending-requests" class="headerlink" title="Sending requests:"></a>Sending requests:</h3><p>The core method of the client is to send a request. There are various ways to send a request, here it is only implemented based on netty’s Nio. Here is a complete timing sequence.</p><p><img src="/en/2023/05/30/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%89/WX20230530-145829@2x.png" alt="WX20230530-145829@2x" style="zoom:40%;"></p><h5 id="Create-a-send-service"><a href="#Create-a-send-service" class="headerlink" title="Create a  send service"></a>Create a  send service</h5><p>First implement the send method, which should contain the functionality to find the address and send the request.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcSendingServiceAdapterImpl</span> <span class="keyword">implements</span> <span class="title class_">RpcSendingServiceAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * EventLoopGroup is a multithreaded event loop that handles I/O operation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventLoopGroup             eventLoopGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap helt setting and start netty client</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Bootstrap                  bootstrap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service discovery</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcServiceFindingAdapter   findingAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Channel manager,mapping channel and address</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AddressChannelManager      addressChannelManager;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Waiting process request queue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WaitingProcessRequestQueue waitingProcessRequestQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcSendingServiceAdapterImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.findingAdapter = ExtensionLoader.getExtensionLoader(RpcServiceFindingAdapter.class)</span><br><span class="line">            .getExtension(ServiceDiscoveryEnum.ZK.getName());</span><br><span class="line">        <span class="built_in">this</span>.addressChannelManager = SingletonFactory.getInstance(AddressChannelManager.class);</span><br><span class="line">        <span class="built_in">this</span>.waitingProcessRequestQueue = SingletonFactory.getInstance(WaitingProcessRequestQueue.class);</span><br><span class="line">        <span class="comment">// initialize</span></span><br><span class="line">        eventLoopGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">        bootstrap = <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">        bootstrap.group(eventLoopGroup)</span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO))</span><br><span class="line">            <span class="comment">// The timeout period for the connection.</span></span><br><span class="line">            <span class="comment">// If this time is exceeded or if the connection cannot be</span></span><br><span class="line">            <span class="comment">// established, the connection fails.</span></span><br><span class="line">            .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">5000</span>)</span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel ch)</span> &#123;</span><br><span class="line">                    <span class="type">ChannelPipeline</span> <span class="variable">p</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">                    <span class="comment">// If no data is sent to the server within 15 seconds, a</span></span><br><span class="line">                    <span class="comment">// heartbeat request is sent</span></span><br><span class="line">                    p.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">                    p.addLast(<span class="keyword">new</span> <span class="title class_">RpcMessageEncoder</span>());</span><br><span class="line">                    p.addLast(<span class="keyword">new</span> <span class="title class_">RpcMessageDecoder</span>());</span><br><span class="line">                    p.addLast(<span class="keyword">new</span> <span class="title class_">NettyRpcClientHandler</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sendRpcRequest</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">address</span> <span class="operator">=</span> findServiceAddress(rpcRequest);</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> fetchAndConnectChannel(address);</span><br><span class="line">        <span class="keyword">if</span> (channel.isActive()) &#123;</span><br><span class="line">            addToProcessQueue(rpcRequest.getTraceId(), result);</span><br><span class="line">            <span class="type">RpcData</span> <span class="variable">rpcData</span> <span class="operator">=</span> prepareRpcData(rpcRequest);</span><br><span class="line">            sendRpcData(channel, rpcData, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">&quot;Send request[&#123;&#125;] failed&quot;</span>, rpcRequest);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> InetSocketAddress <span class="title function_">findServiceAddress</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findingAdapter.findServiceAddress(rpcRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToProcessQueue</span><span class="params">(String traceId, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result)</span> &#123;</span><br><span class="line">        waitingProcessRequestQueue.put(traceId, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RpcData <span class="title function_">prepareRpcData</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RpcData.builder()</span><br><span class="line">                .data(rpcRequest)</span><br><span class="line">                .serializeMethodCodec(SerializationTypeEnum.HESSIAN.getCode())</span><br><span class="line">                .compressType(CompressTypeEnum.GZIP.getCode())</span><br><span class="line">                .messageType(RpcConstants.REQUEST_TYPE)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRpcData</span><span class="params">(Channel channel, RpcData rpcData, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result)</span> &#123;</span><br><span class="line">        channel.writeAndFlush(rpcData).addListener((ChannelFutureListener)future -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                LogUtil.info(<span class="string">&quot;client send message: [&#123;&#125;]&quot;</span>, rpcData);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                future.channel().close();</span><br><span class="line">                result.completeExceptionally(future.cause());</span><br><span class="line">                LogUtil.error(<span class="string">&quot;Send failed:&quot;</span>, future.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel <span class="title function_">fetchAndConnectChannel</span><span class="params">(InetSocketAddress address)</span> &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> addressChannelManager.get(address);</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// connect to service to get new address and rebuild the channel</span></span><br><span class="line">            channel = connect(address);</span><br><span class="line">            addressChannelManager.set(address, channel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Channel <span class="title function_">connect</span><span class="params">(InetSocketAddress address)</span> &#123;</span><br><span class="line">        CompletableFuture&lt;Channel&gt; completableFuture = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line">        bootstrap.connect(address).addListener((ChannelFutureListener)future -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">                <span class="comment">// set channel to future</span></span><br><span class="line">                LogUtil.info(<span class="string">&quot;The client has connected [&#123;&#125;] successful!&quot;</span>, address.toString());</span><br><span class="line">                completableFuture.complete(future.channel());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogUtil.error(<span class="string">&quot;The client failed to connect to the server [&#123;&#125;],future&quot;</span>, address.toString(), future);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = completableFuture.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;occur exception when connect to server:&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Channel <span class="title function_">getChannel</span><span class="params">(InetSocketAddress inetSocketAddress)</span> &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> addressChannelManager.get(inetSocketAddress);</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="literal">null</span>) &#123;</span><br><span class="line">            channel = connect(inetSocketAddress);</span><br><span class="line">            addressChannelManager.set(inetSocketAddress, channel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> channel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        The core method in this class is <code>sendRpcRequest</code>, which is responsible for fetching the service, creating the link, creating a Future task and sending the request.</p><h4 id="Discovery-Services"><a href="#Discovery-Services" class="headerlink" title="Discovery Services"></a>Discovery Services</h4><p>The process of discovering a service can include:</p><ol><li><p>pulling a list of service addresses from the registry</p></li><li><p>Obtaining the service specific type through a load balancing algorithm.</p></li></ol><h5 id="Get-the-address"><a href="#Get-the-address" class="headerlink" title="Get the address"></a>Get the address</h5><p>The first step is implemented first (here a cache can be used for further optimisation, in this project zk uses a ConcurrentHashMap instead of a cache, see <code>CuratorClient</code> for detailed code):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServiceFindingAdapterImpl</span> <span class="keyword">implements</span> <span class="title class_">RpcServiceFindingAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoadBalanceService loadBalanceService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcServiceFindingAdapterImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadBalanceService = ExtensionLoader.getExtensionLoader(LoadBalanceService.class).getExtension(LOAD_BALANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InetSocketAddress <span class="title function_">findServiceAddress</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> rpcRequest.fetchRpcServiceName();</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">zkClient</span> <span class="operator">=</span> CuratorClient.getZkClient();</span><br><span class="line">        List&lt;String&gt; serviceAddresseList = CuratorClient.getChildrenNodes(zkClient, serviceName);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(serviceAddresseList)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;no service available, serviceName: &quot;</span> + serviceName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">service</span> <span class="operator">=</span> loadBalanceService.selectServiceAddress(serviceAddresseList, rpcRequest);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(service)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;no service available, serviceName: &quot;</span> + serviceName);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] socketAddressArray = service.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> socketAddressArray[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(socketAddressArray[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(host, port);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Load-Balancing-Consistent-Hash-Algorithm"><a href="#Load-Balancing-Consistent-Hash-Algorithm" class="headerlink" title="Load Balancing - Consistent Hash Algorithm"></a>Load Balancing - Consistent Hash Algorithm</h5><h6 id="Definition"><a href="#Definition" class="headerlink" title="Definition:"></a><strong>Definition:</strong></h6><p>The Consistent Hash Algorithm is an algorithm for data slicing and load balancing in distributed systems. It minimises the need for data migration when dynamically expanding and reducing the capacity of nodes by introducing the concepts of virtual nodes and hash rings, improving the stability and performance of the system. It is widely used in distributed caching, load balancing and other scenarios.</p><h6 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation:"></a><strong>Implementation</strong>:</h6><ol><li>Hash calculation</li></ol><p>First, according to the consistency hashing algorithm we need to have the hash value generated according to the corresponding service. In the following implementation, the input is first passed through the SHA-256 algorithm to generate a 32-byte (256-bit) hash</p><p>However, this hash is too long and not easy to handle, so we need to shorten it. Also, a node mapping multiple hashes can improve the uniformity of distribution of the consistent hashing algorithm, as each node will have multiple hashes in the hash space, which can help reduce the impact of hash space redistribution due to the addition or subtraction of nodes.</p><p><code>calculateHash</code> will generate a new hash of type Long by taking 8 bytes backwards from the starting point j for the hash value of 256 already obtained.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] md5Hash(String input) &#123;</span><br><span class="line">    <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        messageDigest = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] hashBytes = messageDigest.digest(input.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        messageDigest.update(hashBytes);</span><br><span class="line">        <span class="keyword">return</span> messageDigest.digest();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        LogUtil.error(<span class="string">&quot;No such algorithm exception: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Long <span class="title function_">calculateHash</span><span class="params">(<span class="type">byte</span>[] digest, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (digest.length &lt; (idx + <span class="number">1</span>) * <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Insufficient length of digest&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 8 bytes digest,a byte is 8 bits like :1321 2432</span></span><br><span class="line">    <span class="comment">// each loop choose a byte to calculate hash,and shift i*8 bits</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        hash |= (<span class="number">255L</span> &amp; (<span class="type">long</span>)digest[i + idx * <span class="number">8</span>]) &lt;&lt; (<span class="number">8</span> * i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>Implement a virtual node selector.</p><p>According to the definition of a consistent hashing algorithm, a virtual node selector needs to generate multiple <strong>virtual nodes</strong> from <strong>services</strong> and map each node to multiple <strong>hash values</strong>, and finally get the nearest node based on the incoming hash value to return to the caller.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashLoadBalanceSelector</span> &#123;</span><br><span class="line">        <span class="comment">// hash to virtual node list</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, String&gt; virtualInvokers;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">ConsistentHashLoadBalanceSelector</span><span class="params">(List&lt;String&gt; serviceUrlList, <span class="type">int</span> virtualNodeNumber)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.virtualInvokers = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// generate service address virtual node]</span></span><br><span class="line">            <span class="comment">// one address may map to multiple virtual nodes</span></span><br><span class="line">            <span class="comment">// use the md5 hash algorithm to generate the hash value of the</span></span><br><span class="line">            <span class="comment">// virtual node</span></span><br><span class="line">            LogUtil.info(<span class="string">&quot;init add serviceUrlList:&#123;&#125;&quot;</span>, serviceUrlList);</span><br><span class="line">            <span class="keyword">for</span> (String serviceNode : serviceUrlList) &#123;</span><br><span class="line">                addVirtualNode(serviceNode, virtualNodeNumber);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addVirtualNode</span><span class="params">(String serviceNode, <span class="type">int</span> virtualNodeNumber)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; virtualNodeNumber / <span class="number">8</span>; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">virtualNodeName</span> <span class="operator">=</span> serviceNode + <span class="string">&quot;#&quot;</span> + i;</span><br><span class="line">                <span class="type">byte</span>[] md5Hash = md5Hash(virtualNodeName);</span><br><span class="line">                <span class="comment">// md5Hash have 32 bytes</span></span><br><span class="line">                <span class="comment">// use 8 byte for each virtual node</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="type">Long</span> <span class="variable">hash</span> <span class="operator">=</span> calculateHash(md5Hash, j);</span><br><span class="line">                    virtualInvokers.put(hash, serviceNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">select</span><span class="params">(String rpcServiceKey)</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] digest = md5Hash(rpcServiceKey);</span><br><span class="line">            <span class="comment">// use first 8 byte to get hash</span></span><br><span class="line">            <span class="keyword">return</span> selectForKey(calculateHash(digest, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">selectForKey</span><span class="params">(<span class="type">long</span> hashCode)</span> &#123;</span><br><span class="line">            Map.Entry&lt;Long, String&gt; entry = virtualInvokers.tailMap(hashCode, <span class="literal">true</span>).firstEntry();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">                entry = virtualInvokers.firstEntry();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>Implementing the full load balancing method</p><p>Use the hash of the interface name and the list of available services as the key, cache the corresponding consistent hash selector, and get a load node directly from the existing hash selector if it exists, or create a new one if it does not.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashLoadBalanceService</span> <span class="keyword">implements</span> <span class="title class_">LoadBalanceService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ConsistentHashLoadBalanceSelector&gt; serviceToSelectorMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ConsistentHashLoadBalanceSelector</span> &#123;</span><br><span class="line">        <span class="comment">// hash to virtual node list</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TreeMap&lt;Long, String&gt; virtualInvokers;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">ConsistentHashLoadBalanceSelector</span><span class="params">(List&lt;String&gt; serviceUrlList, <span class="type">int</span> virtualNodeNumber)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.virtualInvokers = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">            <span class="comment">// generate service address virtual node]</span></span><br><span class="line">            <span class="comment">// one address may map to multiple virtual nodes</span></span><br><span class="line">            <span class="comment">// use the md5 hash algorithm to generate the hash value of the</span></span><br><span class="line">            <span class="comment">// virtual node</span></span><br><span class="line">            LogUtil.info(<span class="string">&quot;init add serviceUrlList:&#123;&#125;&quot;</span>, serviceUrlList);</span><br><span class="line">            <span class="keyword">for</span> (String serviceNode : serviceUrlList) &#123;</span><br><span class="line">                addVirtualNode(serviceNode, virtualNodeNumber);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addVirtualNode</span><span class="params">(String serviceNode, <span class="type">int</span> virtualNodeNumber)</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; virtualNodeNumber / <span class="number">8</span>; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">virtualNodeName</span> <span class="operator">=</span> serviceNode + <span class="string">&quot;#&quot;</span> + i;</span><br><span class="line">                <span class="type">byte</span>[] md5Hash = md5Hash(virtualNodeName);</span><br><span class="line">                <span class="comment">// md5Hash have 32 bytes</span></span><br><span class="line">                <span class="comment">// use 8 byte for each virtual node</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                    <span class="type">Long</span> <span class="variable">hash</span> <span class="operator">=</span> calculateHash(md5Hash, j);</span><br><span class="line">                    virtualInvokers.put(hash, serviceNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">select</span><span class="params">(String rpcServiceKey)</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] digest = md5Hash(rpcServiceKey);</span><br><span class="line">            <span class="comment">// use first 8 byte to get hash</span></span><br><span class="line">            <span class="keyword">return</span> selectForKey(calculateHash(digest, <span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">selectForKey</span><span class="params">(<span class="type">long</span> hashCode)</span> &#123;</span><br><span class="line">            Map.Entry&lt;Long, String&gt; entry = virtualInvokers.tailMap(hashCode, <span class="literal">true</span>).firstEntry();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (entry == <span class="literal">null</span>) &#123;</span><br><span class="line">                entry = virtualInvokers.firstEntry();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">byte</span>[] md5Hash(String input) &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">messageDigest</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            messageDigest = MessageDigest.getInstance(<span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] hashBytes = messageDigest.digest(input.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            messageDigest.update(hashBytes);</span><br><span class="line">            <span class="keyword">return</span> messageDigest.digest();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;No such algorithm exception: &#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> Long <span class="title function_">calculateHash</span><span class="params">(<span class="type">byte</span>[] digest, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (digest.length &lt; (idx + <span class="number">1</span>) * <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Insufficient length of digest&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 8 bytes digest,a byte is 8 bits like :1321 2432</span></span><br><span class="line">        <span class="comment">// each loop choose a byte to calculate hash,and shift i*8 bits</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">            hash |= (<span class="number">255L</span> &amp; (<span class="type">long</span>)digest[i + idx * <span class="number">8</span>]) &lt;&lt; (<span class="number">8</span> * i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Choose one from the list of existing service addresses list</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceUrlList Service address list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">selectServiceAddress</span><span class="params">(List&lt;String&gt; serviceUrlList, RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">serviceListHash</span> <span class="operator">=</span> System.identityHashCode(serviceUrlList);</span><br><span class="line">        <span class="type">String</span> <span class="variable">interfaceName</span> <span class="operator">=</span> rpcRequest.getServiceName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">selectorKey</span> <span class="operator">=</span> interfaceName + serviceListHash;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConsistentHashLoadBalanceSelector</span> <span class="variable">consistentHashLoadBalanceSelector</span> <span class="operator">=</span> serviceToSelectorMap</span><br><span class="line">            .computeIfAbsent(selectorKey, key -&gt; <span class="keyword">new</span> <span class="title class_">ConsistentHashLoadBalanceSelector</span>(serviceUrlList, VIRTUAL_NODES));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> consistentHashLoadBalanceSelector.select(interfaceName + Arrays.stream(rpcRequest.getParameters()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Send-a-request"><a href="#Send-a-request" class="headerlink" title="Send a request"></a>Send a request</h4><h5 id="Send-request"><a href="#Send-request" class="headerlink" title="Send request"></a>Send request</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">sendRpcRequest</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">      CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line">      <span class="type">InetSocketAddress</span> <span class="variable">address</span> <span class="operator">=</span> findServiceAddress(rpcRequest);</span><br><span class="line">      <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> fetchAndConnectChannel(address);</span><br><span class="line">      <span class="keyword">if</span> (channel.isActive()) &#123;</span><br><span class="line">          addToProcessQueue(rpcRequest.getTraceId(), result);</span><br><span class="line">          <span class="type">RpcData</span> <span class="variable">rpcData</span> <span class="operator">=</span> prepareRpcData(rpcRequest);</span><br><span class="line">          sendRpcData(channel, rpcData, result);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          log.error(<span class="string">&quot;Send request[&#123;&#125;] failed&quot;</span>, rpcRequest);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToProcessQueue</span><span class="params">(String traceId, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result)</span> &#123;</span><br><span class="line">          waitingProcessRequestQueue.put(traceId, result);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RpcData <span class="title function_">prepareRpcData</span><span class="params">(RpcRequest rpcRequest)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> RpcData.builder()</span><br><span class="line">              .data(rpcRequest)</span><br><span class="line">              .serializeMethodCodec(SerializationTypeEnum.HESSIAN.getCode())</span><br><span class="line">              .compressType(CompressTypeEnum.GZIP.getCode())</span><br><span class="line">              .messageType(RpcConstants.REQUEST_TYPE)</span><br><span class="line">              .build();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendRpcData</span><span class="params">(Channel channel, RpcData rpcData, CompletableFuture&lt;RpcResponse&lt;Object&gt;&gt; result)</span> &#123;</span><br><span class="line">      channel.writeAndFlush(rpcData).addListener((ChannelFutureListener)future -&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">              LogUtil.info(<span class="string">&quot;client send message: [&#123;&#125;]&quot;</span>, rpcData);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              future.channel().close();</span><br><span class="line">              result.completeExceptionally(future.cause());</span><br><span class="line">              LogUtil.error(<span class="string">&quot;Send failed:&quot;</span>, future.cause());</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Linking-to-a-server-using-a-channel"><a href="#Linking-to-a-server-using-a-channel" class="headerlink" title="Linking to a server using a channel"></a>Linking to a server using a channel</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Channel <span class="title function_">fetchAndConnectChannel</span><span class="params">(InetSocketAddress address)</span> &#123;</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> addressChannelManager.get(address);</span><br><span class="line">    <span class="keyword">if</span> (channel == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// connect to service to get new address and rebuild the channel</span></span><br><span class="line">        channel = connect(address);</span><br><span class="line">        addressChannelManager.set(address, channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> channel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Channel <span class="title function_">connect</span><span class="params">(InetSocketAddress address)</span> &#123;</span><br><span class="line">    CompletableFuture&lt;Channel&gt; completableFuture = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br><span class="line">    bootstrap.connect(address).addListener((ChannelFutureListener)future -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</span><br><span class="line">            <span class="comment">// set channel to future</span></span><br><span class="line">            LogUtil.info(<span class="string">&quot;The client has connected [&#123;&#125;] successful!&quot;</span>, address.toString());</span><br><span class="line">            completableFuture.complete(future.channel());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;The client failed to connect to the server [&#123;&#125;],future&quot;</span>, address.toString(), future);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel = completableFuture.get();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        LogUtil.error(<span class="string">&quot;occur exception when connect to server:&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> channel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Consumer-for-return-value-processing"><a href="#Consumer-for-return-value-processing" class="headerlink" title="Consumer for return value processing"></a>Consumer for return value processing</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyRpcClientHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;RpcData&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcSendingServiceAdapterImpl adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WaitingProcessRequestQueue   waitingProcessRequestQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyRpcClientHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adapter = SingletonFactory.getInstance(RpcSendingServiceAdapterImpl.class);</span><br><span class="line">        <span class="built_in">this</span>.waitingProcessRequestQueue = SingletonFactory.getInstance(WaitingProcessRequestQueue.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * heart beat handle</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// if the channel is free，close it</span></span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="type">IdleState</span> <span class="variable">state</span> <span class="operator">=</span> ((IdleStateEvent)evt).state();</span><br><span class="line">            <span class="keyword">if</span> (state == IdleState.WRITER_IDLE) &#123;</span><br><span class="line">                LogUtil.info(<span class="string">&quot;write idle happen [&#123;&#125;]&quot;</span>, ctx.channel().remoteAddress());</span><br><span class="line">                <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> adapter.getChannel((InetSocketAddress)ctx.channel().remoteAddress());</span><br><span class="line">                <span class="type">RpcData</span> <span class="variable">rpcData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcData</span>();</span><br><span class="line">                rpcData.setSerializeMethodCodec(SerializationTypeEnum.HESSIAN.getCode());</span><br><span class="line">                rpcData.setCompressType(CompressTypeEnum.GZIP.getCode());</span><br><span class="line">                rpcData.setMessageType(RpcConstants.HEARTBEAT_REQUEST_TYPE);</span><br><span class="line">                rpcData.setData(RpcConstants.PING);</span><br><span class="line">                channel.writeAndFlush(rpcData).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when an exception occurs in processing a client message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123;</span><br><span class="line">        LogUtil.error(<span class="string">&quot;server exceptionCaught&quot;</span>);</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcData rpcData)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;Client receive message: [&#123;&#125;]&quot;</span>, rpcData);</span><br><span class="line">        <span class="type">RpcData</span> <span class="variable">rpcMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcData</span>();</span><br><span class="line">        setupRpcMessage(rpcMessage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rpcData.isHeartBeatResponse()) &#123;</span><br><span class="line">            LogUtil.info(<span class="string">&quot;heart [&#123;&#125;]&quot;</span>, rpcMessage.getData());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rpcData.isResponse()) &#123;</span><br><span class="line">            RpcResponse&lt;Object&gt; rpcResponse = (RpcResponse&lt;Object&gt;)rpcData.getData();</span><br><span class="line">            waitingProcessRequestQueue.complete(rpcResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setupRpcMessage</span><span class="params">(RpcData rpcMessage)</span> &#123;</span><br><span class="line">        rpcMessage.setSerializeMethodCodec(SerializationTypeEnum.HESSIAN.getCode());</span><br><span class="line">        rpcMessage.setCompressType(CompressTypeEnum.GZIP.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;based-on-springBoot-hand-written-a-simple-RPC-framework-3&quot;&gt;&lt;a href=&quot;#based-on-springBoot-hand-written-a-simple-RPC-framework-3&quot; class=&quot;headerlink&quot; title=&quot;based on springBoot, hand-written a simple RPC framework(3)&quot;&gt;&lt;/a&gt;based on springBoot, hand-written a simple RPC framework(3)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/en/2023/05/30/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%89/image-20230522163034434.png&quot; alt=&quot;image-20230522163034434&quot;&gt;&lt;/p&gt;
&lt;p&gt;Continuing from the previous chapter, after implementing server registration and invocation, the next step is to implement the functionality on the client side, which mainly includes load balancing, rate limiting, request sending, and service discovery. We will proceed to implement these functionalities in the order of an RPC call flow.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="project" scheme="http://pjpjsocute.github.io/en/tags/project/"/>
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="Rpc" scheme="http://pjpjsocute.github.io/en/tags/Rpc/"/>
    
  </entry>
  
  <entry>
    <title>based on springBoot, hand-written a simple RPC framework(2)</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%BA%8C/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/22/Rpc/基于springBoot-手写一个简单的RPC框架-二/</id>
    <published>2023-05-22T10:49:52.000Z</published>
    <updated>2023-05-30T07:55:49.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="based-on-springBoot-hand-written-a-simple-RPC-framework-2"><a href="#based-on-springBoot-hand-written-a-simple-RPC-framework-2" class="headerlink" title="based on springBoot, hand-written a simple RPC framework(2)"></a>based on springBoot, hand-written a simple RPC framework(2)</h1><p><img src="/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%BA%8C/image-20230522163034434.png" alt="image-20230522163034434"></p><p>Continuing from the previous chapter, after implementing the service registration you need to implement the service invocation.</p><span id="more"></span><h3 id="Service-execution"><a href="#Service-execution" class="headerlink" title="Service execution"></a>Service execution</h3><p>An RPC service call should be divided into the following steps:</p><p>Request listening;</p><p>Decoding the request;</p><p>Method invocation;</p><p>Return of results;</p><p>The above functions will be implemented in turn;</p><h4 id="Request-Listening"><a href="#Request-Listening" class="headerlink" title="Request Listening"></a>Request Listening</h4><p>An RpcRequest request class needs to be defined, due to the subsequent processing of</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8509587559718339795L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * traceId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String traceId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * interface name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * method name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * parameters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] parameters;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * parameter types</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] paramTypes;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String version;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String project;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String group;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate service name,use to distinguish different service,and * can be split to get the service name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fetchRpcServiceName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getProject() +<span class="string">&quot;*&quot;</span>+<span class="built_in">this</span>.getGroup()+<span class="string">&quot;*&quot;</span>+ <span class="built_in">this</span>.getServiceName() +<span class="string">&quot;*&quot;</span>+ <span class="built_in">this</span>.getVersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listening for requests requires starting a netty server, which is used to listen for requests for service.</p><p>The start-up first requires the closure of previously registered resources such as services.</p><p>The resources required by netty are then initialised in turn.</p><p>The following is a snippet of netty startup code, which requires the addition of encoders and decoders for protocol parsing and probing.</p><p>At the same time, the request processing hanlder needs to be added for stream limiting and decoding.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyServer</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;netty server init&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ServerShutdownHook.getInstance().registerShutdownHook();</span><br><span class="line"></span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">listenerGroup</span> <span class="operator">=</span> initListenerGroup();</span><br><span class="line">        <span class="type">EventLoopGroup</span> <span class="variable">workerGroup</span> <span class="operator">=</span> initWorkerGroup();</span><br><span class="line">        <span class="type">DefaultEventExecutorGroup</span> <span class="variable">businessGroup</span> <span class="operator">=</span> initBusinessGroup();</span><br><span class="line"></span><br><span class="line">        LogUtil.info(<span class="string">&quot;netty server start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> configureServerBootstrap(listenerGroup, workerGroup, businessGroup);</span><br><span class="line">            bindAndListen(serverBootstrap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;occur exception when start server:&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            shutdown(listenerGroup, workerGroup, businessGroup);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup <span class="title function_">initListenerGroup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EventLoopGroup <span class="title function_">initWorkerGroup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DefaultEventExecutorGroup <span class="title function_">initBusinessGroup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultEventExecutorGroup</span>(</span><br><span class="line">                Runtime.getRuntime().availableProcessors() * <span class="number">2</span>,</span><br><span class="line">                ThreadPoolFactoryUtil.createThreadFactory(<span class="string">&quot;netty-server-business-group&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerBootstrap <span class="title function_">configureServerBootstrap</span><span class="params">(EventLoopGroup listenerGroup, EventLoopGroup workerGroup, DefaultEventExecutorGroup businessGroup)</span> &#123;</span><br><span class="line">        <span class="type">ServerBootstrap</span> <span class="variable">serverBootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">        serverBootstrap.group(listenerGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="literal">true</span>)</span><br><span class="line">                .childOption(ChannelOption.TCP_NODELAY, <span class="literal">true</span>)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .handler(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO))</span><br><span class="line">                .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> socketChannel.pipeline();</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">30</span>, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">RpcMessageEncoder</span>());</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">RpcMessageDecoder</span>());</span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> <span class="title class_">DefaultTrafficBlockHandler</span>());</span><br><span class="line">                        pipeline.addLast(businessGroup, <span class="keyword">new</span> <span class="title class_">NettyRpcServerHandler</span>());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serverBootstrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">bindAndListen</span><span class="params">(ServerBootstrap serverBootstrap)</span> <span class="keyword">throws</span> UnknownHostException, InterruptedException &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;netty server bind port:&#123;&#125; &quot;</span> , PropertiesFileUtil.readPortFromProperties());</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">f</span> <span class="operator">=</span> serverBootstrap.bind(host, PropertiesFileUtil.readPortFromProperties()).sync();</span><br><span class="line">        f.channel().closeFuture().sync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">(EventLoopGroup listenerGroup, EventLoopGroup workerGroup, DefaultEventExecutorGroup businessGroup)</span> &#123;</span><br><span class="line">        listenerGroup.shutdownGracefully();</span><br><span class="line">        workerGroup.shutdownGracefully();</span><br><span class="line">        businessGroup.shutdownGracefully();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor(access = AccessLevel.PRIVATE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerShutdownHook</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ServerShutdownHook</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerShutdownHook</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ServerShutdownHook <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register shut down hook</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerShutdownHook</span><span class="params">()</span> &#123;</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行清理操作</span></span><br><span class="line">            clearAll();</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clearAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 清理注册表</span></span><br><span class="line">            <span class="type">InetSocketAddress</span> <span class="variable">inetSocketAddress</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(InetAddress.getLocalHost().getHostAddress(), PropertiesFileUtil.readPortFromProperties());</span><br><span class="line">            CuratorClient.clearRegistry(CuratorClient.getZkClient(), inetSocketAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        ThreadPoolFactoryUtil.shutDownAllThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Automatic start of the server in combination with ApplicationRunner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyServerRunner</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NettyServer nettyServer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyServerRunner</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        nettyServer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serialization"><a href="#serialization" class="headerlink" title="serialization"></a>serialization</h4><p>This project only implements hessen serialization and gzip plus decompression by default, there are many tutorials for this part, so it is presented here. The specific code can be found in the org.example.ray.infrastructure.serialize package and the org.example.ray.infrastructure.compress package in the source code</p><h4 id="Coding-and-protocols"><a href="#Coding-and-protocols" class="headerlink" title="Coding and protocols"></a>Coding and protocols</h4><p>Once the service has been implemented, we need to supplement him with encoding and processing classes in turn.</p><p>Before implementing the encoded service, the underlying encoding protocol should first be determined.</p><h5 id="protocols"><a href="#protocols" class="headerlink" title="protocols"></a>protocols</h5><p>For this project, we have chosen a relatively simple protocol design by referring to some existing protocol designs, as shown in the following diagram.</p><p><img src="/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%BA%8C/image-20230522174913202.png" alt="image-20230522174913202"></p><p>The protocol consists of a 16byte header and body.</p><p>Where 0-4 is the magic code, used for checksum</p><p>4-5 are custom versions of the protocol</p><p>5-8 is the length of the entire message, used for decoding</p><p>8-9 defines the message type, including request, response, heartbeat request, heartbeat response.</p><p>10 is the encoding method</p><p>11 is the compression method</p><p>12-16 is an integer for the number of the request</p><p>The Java pojo is as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcData</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * rpc message type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>   messageType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * serialization type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>   serializeMethodCodec;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * compress type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>   compressType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>    requestId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHeatBeatRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageType == RpcConstants.HEARTBEAT_REQUEST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canSendRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageType != RpcConstants.HEARTBEAT_REQUEST_TYPE</span><br><span class="line">            &amp;&amp; messageType != RpcConstants.HEARTBEAT_RESPONSE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHeartBeatResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageType == RpcConstants.HEARTBEAT_RESPONSE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> messageType == RpcConstants.RESPONSE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>After understanding the protocol, implement the decoding</p><h5 id="decoding"><a href="#decoding" class="headerlink" title="decoding"></a>decoding</h5><p>The LengthFieldBasedFrameDecoder decoder can be found in the following article</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://zhuanlan.zhihu.com/p/95621344&quot;</span><br></pre></td></tr></table></figure><p>On the basis of understanding the LengthFieldBasedFrameDecoder decoder, the decoding process is actually not complicated. It is mainly decoding header, checksum, and decoding body 3 parts, the specific implementation can refer to the code and comments.</p><p>The decoding part uses java spi, and can be customized to choose deserialization and decompression methods, this part can refer to the code in github, or can only use fixed serialization and decompression methods instead of spi part.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcMessageDecoder</span> <span class="keyword">extends</span> <span class="title class_">LengthFieldBasedFrameDecoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcMessageDecoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// lengthFieldOffset: magic code is 4B, and version is 1B, and then full</span></span><br><span class="line">        <span class="comment">// length. so value is 5</span></span><br><span class="line">        <span class="comment">// lengthFieldLength: full length is 4B. so value is 4</span></span><br><span class="line">        <span class="comment">// lengthAdjustment: full length include all data and read 9 bytes</span></span><br><span class="line">        <span class="comment">// before, so the left length is (fullLength-9). so values is -9</span></span><br><span class="line">        <span class="comment">// initialBytesToStrip: we will check magic code and version manually,</span></span><br><span class="line">        <span class="comment">// so do not strip any bytes. so values is 0</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="number">8</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="number">5</span>, <span class="number">4</span>, -<span class="number">9</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcMessageDecoder</span><span class="params">(<span class="type">int</span> maxFrameLength, <span class="type">int</span> lengthFieldOffset, <span class="type">int</span> lengthFieldLength, <span class="type">int</span> lengthAdjustment,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> initialBytesToStrip)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// get the bytebuf which contains the frame</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">decode</span> <span class="operator">=</span> <span class="built_in">super</span>.decode(ctx, in);</span><br><span class="line">        <span class="keyword">if</span> (decode <span class="keyword">instanceof</span> ByteBuf) &#123;</span><br><span class="line">            <span class="type">ByteBuf</span> <span class="variable">byteBuf</span> <span class="operator">=</span> (ByteBuf)decode;</span><br><span class="line">            <span class="comment">// if data not empty, decode it</span></span><br><span class="line">            <span class="keyword">if</span> (byteBuf.readableBytes() &gt;= RpcConstants.HEAD_LENGTH) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> decode(byteBuf);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LogUtil.error(<span class="string">&quot;Decode error:&#123;&#125; ,input:&#123;&#125;&quot;</span>, e, byteBuf);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    byteBuf.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * read byte array from byteBuf</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteBuf</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">decode</span><span class="params">(ByteBuf byteBuf)</span> &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;start decode&quot;</span>);</span><br><span class="line">        checkMagicCode(byteBuf);</span><br><span class="line">        checkVersion(byteBuf);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">fullLength</span> <span class="operator">=</span> byteBuf.readInt();</span><br><span class="line">        <span class="type">RpcData</span> <span class="variable">rpcMessage</span> <span class="operator">=</span> decodeRpcMessage(byteBuf);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rpcMessage.isHeatBeatRequest()) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleHeatBeatRequest(rpcMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rpcMessage.isHeartBeatResponse()) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleHeartBeatResponse(rpcMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> handleNormalRequest(rpcMessage, byteBuf, fullLength);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RpcData <span class="title function_">decodeRpcMessage</span><span class="params">(ByteBuf byteBuf)</span> &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;start decode RpcMessage data&quot;</span>);</span><br><span class="line">        <span class="type">byte</span> <span class="variable">messageType</span> <span class="operator">=</span> byteBuf.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">codec</span> <span class="operator">=</span> byteBuf.readByte();</span><br><span class="line">        <span class="type">byte</span> <span class="variable">compress</span> <span class="operator">=</span> byteBuf.readByte();</span><br><span class="line">        <span class="type">int</span> <span class="variable">traceId</span> <span class="operator">=</span> byteBuf.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RpcData.builder()</span><br><span class="line">                .serializeMethodCodec(codec)</span><br><span class="line">                .traceId(traceId)</span><br><span class="line">                .compressType(compress)</span><br><span class="line">                .messageType(messageType)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RpcData <span class="title function_">handleHeatBeatRequest</span><span class="params">(RpcData rpcMessage)</span> &#123;</span><br><span class="line">        rpcMessage.setData(RpcConstants.PING);</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RpcData <span class="title function_">handleHeartBeatResponse</span><span class="params">(RpcData rpcMessage)</span> &#123;</span><br><span class="line">        rpcMessage.setData(RpcConstants.PONG);</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">handleNormalRequest</span><span class="params">(RpcData rpcMessage, ByteBuf byteBuf, <span class="type">int</span> fullLength)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bodyLength</span> <span class="operator">=</span> fullLength - RpcConstants.HEAD_LENGTH;</span><br><span class="line">        <span class="keyword">if</span> (bodyLength &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rpcMessage;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decodeBody(rpcMessage, byteBuf, bodyLength);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RpcData <span class="title function_">decodeBody</span><span class="params">(RpcData rpcMessage, ByteBuf byteBuf, Integer bodyLength)</span> &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;start decode body&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bodyBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[bodyLength];</span><br><span class="line">        byteBuf.readBytes(bodyBytes);</span><br><span class="line">        <span class="comment">// decompose</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">compressName</span> <span class="operator">=</span> CompressTypeEnum.getName(rpcMessage.getCompressType());</span><br><span class="line">        <span class="type">CompressService</span> <span class="variable">extension</span> <span class="operator">=</span></span><br><span class="line">            ExtensionLoader.getExtensionLoader(CompressService.class).getExtension(compressName);</span><br><span class="line">        bodyBytes = extension.decompress(bodyBytes);</span><br><span class="line">        <span class="comment">// deserialize</span></span><br><span class="line">        <span class="keyword">if</span> (rpcMessage.getMessageType() == RpcConstants.REQUEST_TYPE) &#123;</span><br><span class="line">            <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(SerializationService.class)</span><br><span class="line">                .getExtension(SerializationTypeEnum.getName(rpcMessage.getSerializeMethodCodec()))</span><br><span class="line">                .deserialize(bodyBytes, RpcRequest.class);</span><br><span class="line">            rpcMessage.setData(rpcRequest);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">RpcResponse</span> <span class="variable">rpcResponse</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(SerializationService.class)</span><br><span class="line">                .getExtension(SerializationTypeEnum.getName(rpcMessage.getSerializeMethodCodec()))</span><br><span class="line">                .deserialize(bodyBytes, RpcResponse.class);</span><br><span class="line">            rpcMessage.setData(rpcResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rpcMessage;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkVersion</span><span class="params">(ByteBuf byteBuf)</span> &#123;</span><br><span class="line">        <span class="type">byte</span> <span class="variable">version</span> <span class="operator">=</span> byteBuf.readByte();</span><br><span class="line">        <span class="keyword">if</span> (version != RpcConstants.VERSION) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;version is not compatible: &quot;</span> + version);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkMagicCode</span><span class="params">(ByteBuf byteBuf)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> RpcConstants.MAGIC_NUMBER.length;</span><br><span class="line">        <span class="type">byte</span>[] magicNumber = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">        byteBuf.readBytes(magicNumber);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (magicNumber[i] != RpcConstants.MAGIC_NUMBER[i]) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown magic code: &quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(magicNumber));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Encoding"><a href="#Encoding" class="headerlink" title="Encoding"></a>Encoding</h5><p>The encoding process is relatively simple, it is just a matter of writing the corresponding bits of data in sequence according to the protocol</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcMessageEncoder</span> <span class="keyword">extends</span> <span class="title class_">MessageToByteEncoder</span>&lt;RpcData&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ATOMIC_INTEGER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, RpcData rpcData, ByteBuf byteBuf)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//encode head,marked full length index</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">fullLengthIndex</span> <span class="operator">=</span> encodeHead(rpcData,byteBuf);</span><br><span class="line">            <span class="comment">// encode body</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">fullLength</span> <span class="operator">=</span> encodeBody(rpcData, byteBuf);</span><br><span class="line">            <span class="comment">// back fill full length</span></span><br><span class="line">            encodeLength(fullLengthIndex,fullLength,byteBuf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;Encode request error:&#123;&#125;,data:&#123;&#125;&quot;</span>, e, rpcData);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(RpcErrorMessageEnum.REQUEST_ENCODE_FAIL.getCode(),</span><br><span class="line">                RpcErrorMessageEnum.REQUEST_ENCODE_FAIL.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">encodeHead</span><span class="params">(RpcData rpcData,ByteBuf byteBuf)</span>&#123;</span><br><span class="line">        <span class="comment">// write magic code and version 0-5</span></span><br><span class="line">        byteBuf.writeBytes(RpcConstants.MAGIC_NUMBER);</span><br><span class="line">        byteBuf.writeByte(RpcConstants.VERSION);</span><br><span class="line">        <span class="comment">// marked full length index.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fullLengthIndex</span> <span class="operator">=</span> byteBuf.writerIndex();</span><br><span class="line">        <span class="comment">// write placeholder for full length 9+</span></span><br><span class="line">        byteBuf.writerIndex(byteBuf.writerIndex() + <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// write message type</span></span><br><span class="line">        byteBuf.writeByte(rpcData.getMessageType());</span><br><span class="line">        <span class="comment">// write codec</span></span><br><span class="line">        byteBuf.writeByte(rpcData.getSerializeMethodCodec());</span><br><span class="line">        <span class="comment">// write compress</span></span><br><span class="line">        byteBuf.writeByte(rpcData.getCompressType());</span><br><span class="line">        <span class="comment">// write requestId</span></span><br><span class="line">        byteBuf.writeInt(ATOMIC_INTEGER.getAndIncrement());</span><br><span class="line">        <span class="keyword">return</span> fullLengthIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">encodeBody</span><span class="params">(RpcData rpcData,ByteBuf byteBuf)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] bodyBytes = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">fullLength</span> <span class="operator">=</span> RpcConstants.HEAD_LENGTH;</span><br><span class="line">        <span class="keyword">if</span> (rpcData.canSendRequest()) &#123;</span><br><span class="line">            LogUtil.info(<span class="string">&quot;serialize request start&quot;</span>);</span><br><span class="line">            bodyBytes = ExtensionLoader.getExtensionLoader(SerializationService.class)</span><br><span class="line">                    .getExtension(SerializationTypeEnum.getName(rpcData.getSerializeMethodCodec()))</span><br><span class="line">                    .serialize(rpcData.getData());</span><br><span class="line">            LogUtil.info(<span class="string">&quot;serialize request end&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">compressName</span> <span class="operator">=</span> CompressTypeEnum.getName(rpcData.getCompressType());</span><br><span class="line">            <span class="type">CompressService</span> <span class="variable">extension</span> <span class="operator">=</span></span><br><span class="line">                    ExtensionLoader.getExtensionLoader(CompressService.class).getExtension(compressName);</span><br><span class="line">            bodyBytes = extension.compress(bodyBytes);</span><br><span class="line">            fullLength += bodyBytes.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bodyBytes != <span class="literal">null</span>) &#123;</span><br><span class="line">            byteBuf.writeBytes(bodyBytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fullLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">encodeLength</span><span class="params">(<span class="type">int</span> fullLengthIndex,<span class="type">int</span> fullLength,ByteBuf byteBuf)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">writeIndex</span> <span class="operator">=</span> byteBuf.writerIndex();</span><br><span class="line">        byteBuf.writerIndex(fullLengthIndex);</span><br><span class="line">        byteBuf.writeInt(fullLength);</span><br><span class="line">        byteBuf.writerIndex(writeIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="request-handling-and-invocation"><a href="#request-handling-and-invocation" class="headerlink" title="request handling and invocation"></a>request handling and invocation</h4><p>Here, netty’s SimpleChannelInboundHandler is used, which avoids the problem of resource release</p><p>As decoding has already been implemented earlier, it is only necessary to handle the request differently for different request types.</p><p>If it is a heartbeat request, the heartbeat response is returned</p><p>If it is a service request, the service is invoked via a dynamic proxy and the result is written and returned to the consumer.</p><p>Define a response class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcResponse</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">347966260947189201L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * request id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            requestId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer           code;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String            message;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * response body</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T                 data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * success</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RpcResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T data, String requestId)</span> &#123;</span><br><span class="line">        RpcResponse&lt;T&gt; response = <span class="keyword">new</span> <span class="title class_">RpcResponse</span>&lt;&gt;();</span><br><span class="line">        response.setCode(RpcResponseCodeEnum.SUCCESS.getCode());</span><br><span class="line">        response.setMessage(RpcResponseCodeEnum.SUCCESS.getMessage());</span><br><span class="line">        response.setRequestId(requestId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != data) &#123;</span><br><span class="line">            response.setData(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * fail</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; RpcResponse&lt;T&gt; <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        RpcResponse&lt;T&gt; response = <span class="keyword">new</span> <span class="title class_">RpcResponse</span>&lt;&gt;();</span><br><span class="line">        response.setCode(RpcResponseCodeEnum.FAIL.getCode());</span><br><span class="line">        response.setMessage(RpcResponseCodeEnum.FAIL.getMessage());</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The core method of the serverhandler is <code>channelRead0</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NettyRpcServerHandler</span> <span class="keyword">extends</span> <span class="title class_">SimpleChannelInboundHandler</span>&lt;RpcData&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read the message transmitted by the server</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcRequestHandler rpcRequestHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NettyRpcServerHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rpcRequestHandler = SingletonFactory.getInstance(RpcRequestHandler.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * heart beat handle</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// if the channel is free，close it</span></span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="type">IdleState</span> <span class="variable">state</span> <span class="operator">=</span> ((IdleStateEvent)evt).state();</span><br><span class="line">            <span class="keyword">if</span> (state == IdleState.READER_IDLE) &#123;</span><br><span class="line">                LogUtil.info(<span class="string">&quot;idle check happen, so close the connection&quot;</span>);</span><br><span class="line">                ctx.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>.userEventTriggered(ctx, evt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Called when an exception occurs in processing a client message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> &#123;</span><br><span class="line">        LogUtil.error(<span class="string">&quot;server exceptionCaught&quot;</span>);</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">channelRead0</span><span class="params">(ChannelHandlerContext ctx, RpcData rpcData)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;Server receive message: [&#123;&#125;]&quot;</span>, rpcData);</span><br><span class="line">        <span class="type">RpcData</span> <span class="variable">rpcMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcData</span>();</span><br><span class="line">        setupRpcMessage(rpcMessage);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rpcData.isHeatBeatRequest()) &#123;</span><br><span class="line">            handleHeartbeat(rpcMessage);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handleRpcRequest(ctx, rpcData, rpcMessage);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.writeAndFlush(rpcMessage).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setupRpcMessage</span><span class="params">(RpcData rpcMessage)</span> &#123;</span><br><span class="line">        rpcMessage.setSerializeMethodCodec(SerializationTypeEnum.HESSIAN.getCode());</span><br><span class="line">        rpcMessage.setCompressType(CompressTypeEnum.GZIP.getCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleHeartbeat</span><span class="params">(RpcData rpcMessage)</span> &#123;</span><br><span class="line">        rpcMessage.setMessageType(RpcConstants.HEARTBEAT_RESPONSE_TYPE);</span><br><span class="line">        rpcMessage.setData(RpcConstants.PONG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleRpcRequest</span><span class="params">(ChannelHandlerContext ctx, RpcData rpcData, RpcData rpcMessage)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">RpcRequest</span> <span class="variable">rpcRequest</span> <span class="operator">=</span> (RpcRequest)rpcData.getData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// invoke target method</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> rpcRequestHandler.handle(rpcRequest);</span><br><span class="line">        LogUtil.info(<span class="string">&quot;Server get result: &#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">        rpcMessage.setMessageType(RpcConstants.RESPONSE_TYPE);</span><br><span class="line">        buildAndSetRpcResponse(ctx, rpcRequest, rpcMessage, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span></span><br><span class="line">        <span class="title function_">buildAndSetRpcResponse</span><span class="params">(ChannelHandlerContext ctx, RpcRequest rpcRequest, RpcData rpcMessage, Object result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (canBuildResponse(ctx)) &#123;</span><br><span class="line">            <span class="comment">// If the channel is active and writable, a successful RPC response is constructed</span></span><br><span class="line">            RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.success(result, rpcRequest.getTraceId());</span><br><span class="line">            rpcMessage.setData(rpcResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Construct a failed RPC response if the channel is not writable</span></span><br><span class="line">            RpcResponse&lt;Object&gt; rpcResponse = RpcResponse.fail();</span><br><span class="line">            rpcMessage.setData(rpcResponse);</span><br><span class="line">            LogUtil.error(<span class="string">&quot;Not writable now, message dropped,message:&#123;&#125;&quot;</span>, rpcRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">canBuildResponse</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx.channel().isActive() &amp;&amp; ctx.channel().isWritable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>tipp:</strong> Services that are cached after registration to zk can be called directly based on dynamic proxies</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequestHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcServiceRegistryAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcRequestHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adapter = SingletonFactory.getInstance(RpcServiceRegistryAdapterImpl.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Processing rpcRequest: call the corresponding method, and then return the</span></span><br><span class="line"><span class="comment">     * method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">(RpcRequest request)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">service</span> <span class="operator">=</span> adapter.getService(request.fetchRpcServiceName());</span><br><span class="line">        <span class="keyword">return</span> invoke(request, service);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get method execution results</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcRequest client request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> service service object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the result of the target method execution</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">invoke</span><span class="params">(RpcRequest rpcRequest, Object service)</span> &#123;</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> service.getClass().getMethod(rpcRequest.getMethodName(), rpcRequest.getParamTypes());</span><br><span class="line">            result = method.invoke(service, rpcRequest.getParameters());</span><br><span class="line">            LogUtil.info(<span class="string">&quot;service:[&#123;&#125;] successful invoke method:[&#123;&#125;]&quot;</span>, rpcRequest.getServiceName(),</span><br><span class="line">                rpcRequest.getMethodName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalArgumentException | InvocationTargetException</span><br><span class="line">            | IllegalAccessException e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;occur exception when invoke target method,error:&#123;&#125;,RpcRequest:&#123;&#125;&quot;</span>, e, rpcRequest);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE.getCode(), RpcErrorMessageEnum.SERVICE_INVOCATION_FAILURE.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>At this point, a server-side code is complete</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;based-on-springBoot-hand-written-a-simple-RPC-framework-2&quot;&gt;&lt;a href=&quot;#based-on-springBoot-hand-written-a-simple-RPC-framework-2&quot; class=&quot;headerlink&quot; title=&quot;based on springBoot, hand-written a simple RPC framework(2)&quot;&gt;&lt;/a&gt;based on springBoot, hand-written a simple RPC framework(2)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%BA%8C/image-20230522163034434.png&quot; alt=&quot;image-20230522163034434&quot;&gt;&lt;/p&gt;
&lt;p&gt;Continuing from the previous chapter, after implementing the service registration you need to implement the service invocation.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="project" scheme="http://pjpjsocute.github.io/en/tags/project/"/>
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="Rpc" scheme="http://pjpjsocute.github.io/en/tags/Rpc/"/>
    
  </entry>
  
  <entry>
    <title>based on springBoot, hand-written a simple RPC framework(1)</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%80/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/22/Rpc/基于springBoot-手写一个简单的RPC框架-一/</id>
    <published>2023-05-22T07:49:52.000Z</published>
    <updated>2023-05-22T10:31:18.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="based-on-springBoot-hand-written-a-simple-RPC-framework-1"><a href="#based-on-springBoot-hand-written-a-simple-RPC-framework-1" class="headerlink" title="based on springBoot, hand-written a simple RPC framework(1)"></a>based on springBoot, hand-written a simple RPC framework(1)</h1><h2 id="Code-pjpjsocute-rpc-service-personal-rcp-attempt-github-com"><a href="#Code-pjpjsocute-rpc-service-personal-rcp-attempt-github-com" class="headerlink" title="Code:pjpjsocute/rpc-service: personal rcp attempt (github.com)"></a>Code:<a href="https://github.com/pjpjsocute/rpc-service">pjpjsocute/rpc-service: personal rcp attempt (github.com)</a></h2><h2 id="Technology-stack-use-includes-springboot-Zookeeper-netty-java-spi"><a href="#Technology-stack-use-includes-springboot-Zookeeper-netty-java-spi" class="headerlink" title="Technology stack use includes:springboot,Zookeeper,netty,java spi"></a>Technology stack use includes:springboot,Zookeeper,netty,java spi</h2><h2 id="RPC-Definition"><a href="#RPC-Definition" class="headerlink" title="RPC Definition"></a>RPC Definition</h2><p>Remote Procedure Call (RPC) is a communication mechanism that allows different services to communicate and interact with each other over the network.</p><p>Through RPC, a service can make a request to another service and obtain a response, just like a local call, without the developer having to manually handle the underlying network communication details.The RPC framework encapsulates the underlying network transport and provides functionality such as the definition of remote service interfaces, serialisation and deserialisation of data.</p><span id="more"></span><h3 id="rpc-vs-http-discrimination"><a href="#rpc-vs-http-discrimination" class="headerlink" title="rpc vs. http discrimination:"></a><strong>rpc vs. http discrimination:</strong></h3><p>HTTP is an application layer protocol used to transmit hypertext, which communicates between a client and a server. It is based on the request-response model, where the client sends an HTTP request to the server and the server processes the request and returns the corresponding HTTP response. rpc is more akin to an architectural idea, and rpc can be implemented with HTTP and implemented with TCP.</p><h2 id="RPC-process"><a href="#RPC-process" class="headerlink" title="RPC process"></a>RPC process</h2><p>A simple RPC architecture is shown in the diagram:</p><p><img src="/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%80/image-20230522161808172.png" alt="image-20230522161808172"></p><h2 id="How-to-achieve"><a href="#How-to-achieve" class="headerlink" title="How to achieve:"></a>How to achieve:</h2><h3 id="A-simple-RPC-call-link"><a href="#A-simple-RPC-call-link" class="headerlink" title="A simple RPC call link:"></a>A simple RPC call link:</h3><p><img src="/en/2023/05/22/Rpc/%E5%9F%BA%E4%BA%8EspringBoot-%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84RPC%E6%A1%86%E6%9E%B6-%E4%B8%80/image-20230522163034434.png" alt="image-20230522163034434"></p><h2 id="server-side-implementation-based-on-netty-and-ZK"><a href="#server-side-implementation-based-on-netty-and-ZK" class="headerlink" title="server-side implementation based on netty and ZK"></a>server-side implementation based on netty and ZK</h2><p>According to the diagram above, first we need to implement service registration.</p><h3 id="Service-registration"><a href="#Service-registration" class="headerlink" title="Service registration:"></a>Service registration:</h3><p>Most current RPC frameworks support annotations for registration, and the same approach is used here.</p><h4 id="Define-registration-annotations"><a href="#Define-registration-annotations" class="headerlink" title="Define registration annotations"></a>Define registration annotations</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcProvider &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service group, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">project</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service version, default value is 1.0</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">version</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service group, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">group</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RpcConsumer &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service project, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">project</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service version, default value is 1.0</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">version</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Service group, default value is empty string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">group</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Import(CustomBeanScannerRegistrar.class)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SimpleRpcApplication &#123;</span><br><span class="line"></span><br><span class="line">    String[] basePackage();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>This annotation will define the service version, the group (to distinguish between different interfaces with the same name and the same project), and the project name for service exposure.</p><p>Similarly, an annotation is needed for consumption; an annotation defining the packages to be scanned</p><h4 id="Registering-services-at-startup"><a href="#Registering-services-at-startup" class="headerlink" title="Registering services at startup"></a>Registering services at startup</h4><h5 id="First-the-annotation-with-provider-needs-to-be-registered"><a href="#First-the-annotation-with-provider-needs-to-be-registered" class="headerlink" title="First, the annotation with @provider needs to be registered"></a>First, the annotation with @provider needs to be registered</h5><p>Get the package to be scanned and then register the annotated bean into spring</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomBeanScannerRegistrar</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span>, ResourceLoaderAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">API_SCAN_PARAM</span> <span class="operator">=</span> <span class="string">&quot;basePackage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_BEAN_BASE_PACKAGE</span> <span class="operator">=</span> <span class="string">&quot;org.example.ray&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//get the scan annotation and the bean package to be scanned</span></span><br><span class="line">        String[] scanBasePackages = fetchScanBasePackage(importingClassMetadata);</span><br><span class="line">        LogUtil.info(<span class="string">&quot;scanning packages: [&#123;&#125;]&quot;</span>, (Object) scanBasePackages);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        //scan the package and register the bean</span></span><br><span class="line"><span class="comment">//        RpcBeanScanner rpcConsumerBeanScanner = new RpcBeanScanner(registry, RpcConsumer.class);</span></span><br><span class="line">        <span class="type">RpcBeanScanner</span> <span class="variable">rpcProviderBeanScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcBeanScanner</span>(registry, RpcProvider.class);</span><br><span class="line">        <span class="type">RpcBeanScanner</span> <span class="variable">springBeanScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RpcBeanScanner</span>(registry, Component.class);</span><br><span class="line">        <span class="keyword">if</span> (resourceLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">            springBeanScanner.setResourceLoader(resourceLoader);</span><br><span class="line">            rpcProviderBeanScanner.setResourceLoader(resourceLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rpcServiceCount</span> <span class="operator">=</span> rpcProviderBeanScanner.scan(scanBasePackages);</span><br><span class="line">        LogUtil.info(<span class="string">&quot;rpcServiceScanner扫描的数量 [&#123;&#125;]&quot;</span>, rpcServiceCount);</span><br><span class="line">        LogUtil.info(<span class="string">&quot;scanning RpcConsumer annotated beans end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String[] fetchScanBasePackage(AnnotationMetadata importingClassMetadata)&#123;</span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">annotationAttributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(SimpleRpcApplication.class.getName()));</span><br><span class="line">        String[] scanBasePackages = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (annotationAttributes != <span class="literal">null</span>) &#123;</span><br><span class="line">            scanBasePackages = annotationAttributes.getStringArray(API_SCAN_PARAM);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//user doesn&#x27;t specify the package to scan,use the Application base package</span></span><br><span class="line">        <span class="keyword">if</span> (scanBasePackages.length == <span class="number">0</span>) &#123;</span><br><span class="line">            scanBasePackages = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;((org.springframework.core.type.StandardAnnotationMetadata) importingClassMetadata).getIntrospectedClass().getPackage().getName()&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> scanBasePackages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Register-the-service-and-associated-configuration-before-the-bean-is-initialised-to-ensure-that-the-service-is-registered-when-spring-starts"><a href="#Register-the-service-and-associated-configuration-before-the-bean-is-initialised-to-ensure-that-the-service-is-registered-when-spring-starts" class="headerlink" title="Register the service and associated configuration before the bean is initialised to ensure that the service is registered when spring starts"></a>Register the service and associated configuration before the bean is initialised to ensure that the service is registered when spring starts</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcServiceRegistryAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RpcSendingServiceAdapter  sendingServiceAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RpcBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adapter = SingletonFactory.getInstance(RpcServiceRegistryAdapterImpl.class);;</span><br><span class="line">        <span class="built_in">this</span>.sendingServiceAdapter = ExtensionLoader.getExtensionLoader(RpcSendingServiceAdapter.class)</span><br><span class="line">            .getExtension(RpcRequestSendingEnum.NETTY.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * register service</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        LogUtil.info(<span class="string">&quot;start process register service: &#123;&#125;&quot;</span>, bean);</span><br><span class="line">        <span class="comment">// register service</span></span><br><span class="line">        <span class="keyword">if</span> (bean.getClass().isAnnotationPresent(RpcProvider.class)) &#123;</span><br><span class="line">            <span class="type">RpcProvider</span> <span class="variable">annotation</span> <span class="operator">=</span> bean.getClass().getAnnotation(RpcProvider.class);</span><br><span class="line">            <span class="comment">// build rpc service config</span></span><br><span class="line">            <span class="type">RpcServiceConfig</span> <span class="variable">serviceConfig</span> <span class="operator">=</span> RpcServiceConfig.builder()</span><br><span class="line">                .service(bean)</span><br><span class="line">                .project(annotation.project())</span><br><span class="line">                .version(annotation.version())</span><br><span class="line">                .group(annotation.group())</span><br><span class="line">                .build();</span><br><span class="line">            LogUtil.info(<span class="string">&quot;register service: &#123;&#125;&quot;</span>, serviceConfig);</span><br><span class="line">            adapter.registryService(serviceConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="A-concrete-way-to-implement-service-registration"><a href="#A-concrete-way-to-implement-service-registration" class="headerlink" title="A concrete way to implement service registration"></a>A concrete way to implement service registration</h5><p>To register a service, you should at least include: the service provider (ip), the service name, and the variables in @<code>RpcProvider``, so you can start by defining a</code>RpcServiceConfig<code></code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServiceConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * service version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * target service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * belong to which project</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">project</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * group</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">group</span>   <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * generate service name,use to distinguish different service,and * can be split to get the service name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fetchRpcServiceName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getProject() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getGroup() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getServiceName() + <span class="string">&quot;*&quot;</span> + <span class="built_in">this</span>.getVersion();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * get the interface name</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServiceName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.service.getClass().getInterfaces()[<span class="number">0</span>].getCanonicalName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Provides 2 methods to register a service and get the corresponding bean based on the service name</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RpcServiceRegistryAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcServiceConfig rpc service related attributes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registryService</span><span class="params">(RpcServiceConfig rpcServiceConfig)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcClassName rpc class name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> service object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">getService</span><span class="params">(String rpcClassName)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The registration process can be divided into 3 steps, generate the address -&gt; service registration into Zookeeper -&gt; registration into the cache. Here a ConcurrentHashMap is used to cache the service (the api of zookeeper is called at the end of the method for registration, which is skipped because it is not very relevant to RPC, so you can directly refer to the source code).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcServiceRegistryAdapterImpl</span> <span class="keyword">implements</span> <span class="title class_">RpcServiceRegistryAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cache map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; serviceMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registryService</span><span class="params">(RpcServiceConfig rpcServiceConfig)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// first get address and service</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">hostAddress</span> <span class="operator">=</span> InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">            <span class="comment">// add service to zk</span></span><br><span class="line">            LogUtil.info(<span class="string">&quot;add service to zk,service name&#123;&#125;,host:&#123;&#125;&quot;</span>, rpcServiceConfig.fetchRpcServiceName(),hostAddress);</span><br><span class="line">            registerServiceToZk(rpcServiceConfig.fetchRpcServiceName(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(hostAddress, PropertiesFileUtil.readPortFromProperties()));</span><br><span class="line">            <span class="comment">// add service to map cache</span></span><br><span class="line">            registerServiceToMap(rpcServiceConfig);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            LogUtil.error(<span class="string">&quot;occur exception when getHostAddress&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getService</span><span class="params">(String rpcServiceName)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">service</span> <span class="operator">=</span> serviceMap.get(rpcServiceName);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == service) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RpcException</span>(RpcErrorMessageEnum.SERVICE_CAN_NOT_BE_FOUND.getCode(),<span class="string">&quot;service not found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerServiceToZk</span><span class="params">(String rpcServiceName, InetSocketAddress inetSocketAddress)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">servicePath</span> <span class="operator">=</span> CuratorClient.ZK_REGISTER_ROOT_PATH + <span class="string">&quot;/&quot;</span> + rpcServiceName + inetSocketAddress.toString();</span><br><span class="line">        <span class="type">CuratorFramework</span> <span class="variable">zkClient</span> <span class="operator">=</span> CuratorClient.getZkClient();</span><br><span class="line">        CuratorClient.createPersistentNode(zkClient, servicePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerServiceToMap</span><span class="params">(RpcServiceConfig rpcServiceConfig)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rpcServiceName</span> <span class="operator">=</span> rpcServiceConfig.fetchRpcServiceName();</span><br><span class="line">        <span class="keyword">if</span> (serviceMap.containsKey(rpcServiceName)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        serviceMap.put(rpcServiceName, rpcServiceConfig.getService());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    At this point, the registration process for a service is complete.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;based-on-springBoot-hand-written-a-simple-RPC-framework-1&quot;&gt;&lt;a href=&quot;#based-on-springBoot-hand-written-a-simple-RPC-framework-1&quot; class=&quot;headerlink&quot; title=&quot;based on springBoot, hand-written a simple RPC framework(1)&quot;&gt;&lt;/a&gt;based on springBoot, hand-written a simple RPC framework(1)&lt;/h1&gt;&lt;h2 id=&quot;Code-pjpjsocute-rpc-service-personal-rcp-attempt-github-com&quot;&gt;&lt;a href=&quot;#Code-pjpjsocute-rpc-service-personal-rcp-attempt-github-com&quot; class=&quot;headerlink&quot; title=&quot;Code:pjpjsocute/rpc-service: personal rcp attempt (github.com)&quot;&gt;&lt;/a&gt;Code:&lt;a href=&quot;https://github.com/pjpjsocute/rpc-service&quot;&gt;pjpjsocute/rpc-service: personal rcp attempt (github.com)&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Technology-stack-use-includes-springboot-Zookeeper-netty-java-spi&quot;&gt;&lt;a href=&quot;#Technology-stack-use-includes-springboot-Zookeeper-netty-java-spi&quot; class=&quot;headerlink&quot; title=&quot;Technology stack use includes:springboot,Zookeeper,netty,java spi&quot;&gt;&lt;/a&gt;Technology stack use includes:springboot,Zookeeper,netty,java spi&lt;/h2&gt;&lt;h2 id=&quot;RPC-Definition&quot;&gt;&lt;a href=&quot;#RPC-Definition&quot; class=&quot;headerlink&quot; title=&quot;RPC Definition&quot;&gt;&lt;/a&gt;RPC Definition&lt;/h2&gt;&lt;p&gt;Remote Procedure Call (RPC) is a communication mechanism that allows different services to communicate and interact with each other over the network.&lt;/p&gt;
&lt;p&gt;Through RPC, a service can make a request to another service and obtain a response, just like a local call, without the developer having to manually handle the underlying network communication details.The RPC framework encapsulates the underlying network transport and provides functionality such as the definition of remote service interfaces, serialisation and deserialisation of data.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="project" scheme="http://pjpjsocute.github.io/en/tags/project/"/>
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="Rpc" scheme="http://pjpjsocute.github.io/en/tags/Rpc/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-005,How to think step by step to dynamic planning</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/21/LeetCode/LeetCode-005/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/21/LeetCode/LeetCode-005/</id>
    <published>2023-05-21T08:14:10.000Z</published>
    <updated>2023-05-22T07:59:54.812Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>Given a string <code>s</code>, return <em>the longest</em> <em>palindromic</em> <em>substring</em> in <code>s</code>.</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;babad&quot;</span><br><span class="line">Output: &quot;bab&quot;</span><br><span class="line">Explanation: &quot;aba&quot; is also a valid answer.</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>If it is the first time that you are working on a similar topic, it is not really easy to think of using dynamic programming at once.</p><p>However, through step-by-step thinking and optimisation, the idea of using dynamic programming is actually a more natural one.</p><ol><li><h4 id="First"><a href="#First" class="headerlink" title="First:"></a>First:</h4><h5 id="Based-on-the-requirements-of-the-question-one-of-the-simplest-approaches-would-be-to"><a href="#Based-on-the-requirements-of-the-question-one-of-the-simplest-approaches-would-be-to" class="headerlink" title="Based on the requirements of the question, one of the simplest approaches would be to:"></a>Based on the requirements of the question, one of the simplest approaches would be to:</h5><ol><li><h6 id="Design-a-method-judgeIsPalindrome-based-on-a-double-pointer-we-can-get-an-On-to-determine-if-String-i-j-is-a-palindrome"><a href="#Design-a-method-judgeIsPalindrome-based-on-a-double-pointer-we-can-get-an-On-to-determine-if-String-i-j-is-a-palindrome" class="headerlink" title="Design a method judgeIsPalindrome , based on a double pointer, we can get an On to determine if String(i,j) is a palindrome"></a>Design a method <code>judgeIsPalindrome</code> , based on a double pointer, we can get an On to determine if String(i,j) is a palindrome</h6></li><li><h6 id="enumerate-all-lengths-k-judge-all-String-i-i-k-1-from-largest-to-smallest-determine-if-it-is-a-palindrome-if-so-get-the-question-requirement"><a href="#enumerate-all-lengths-k-judge-all-String-i-i-k-1-from-largest-to-smallest-determine-if-it-is-a-palindrome-if-so-get-the-question-requirement" class="headerlink" title="enumerate all lengths k,judge all String(i,i+k-1) from largest to smallest, determine if it is a palindrome, if so, get the question requirement."></a>enumerate all lengths k,judge all String(i,i+k-1) from largest to smallest, determine if it is a palindrome, if so, get the question requirement.</h6><p>This is a simple approach, but one problem is that it requires enumerating all k. The worst case requires enumerating N, and for each length, the worst case requires computing N times to get the result. So the overall complexity is high and cannot be passed. A more optimal approach needs to be found.</p></li></ol></li><li><h4 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h4><ol><li><h5 id="One-idea-based-on-the-above-is-not-to-enumerate-every-K-but-to-use-the-dichotomous-search-for-the-largest-K-instead-which-would-change-the-complexity-to-LogN-Try-this-idea-yourself-if-you-are-interested"><a href="#One-idea-based-on-the-above-is-not-to-enumerate-every-K-but-to-use-the-dichotomous-search-for-the-largest-K-instead-which-would-change-the-complexity-to-LogN-Try-this-idea-yourself-if-you-are-interested" class="headerlink" title="One idea, based on the above, is not to enumerate every K, but to use the dichotomous search for the largest K instead, which would change the complexity to LogN. Try this idea yourself if you are interested."></a>One idea, based on the above, is not to enumerate every K, but to use the dichotomous search for the largest K instead, which would change the complexity to LogN. Try this idea yourself if you are interested.</h5><p>This idea above is likely to pass, but shows that it can still be optimized. We can note that another problem with the above approach is that each time we need to re-determine whether the new length of the substring is a palindrome or not, without making use of the previously computed result. Suppose that for a particular length $k_i$, we already know whether all substrings of length $k_i$ in String are palindromes. Then when we know whether String(i,i+$k_i$-1) is an echo, for String(i-1,i+$k_i$) in fact this result is also available in O1 time:</p></li></ol></li></ol><p><code>dp[i][j] = dp[i+1][j-1] ^ String[i] == String [j]</code></p><p>That is, String(i-1,i+$k_i$-1) can only be a palindrome if String(i,i+$k_i$-1) is a palindrome and String[i] == String [j].</p><p>The following DP code can be written:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[len][len];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j - i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dp[i][j]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">curLen</span> <span class="operator">=</span> j - i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (curLen &gt; maxLen) &#123;</span><br><span class="line">                    maxLen = curLen;</span><br><span class="line">                    start = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s.substring(start, start + maxLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id><a href="#" class="headerlink" title=" "></a> </h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, return &lt;em&gt;the longest&lt;/em&gt; &lt;em&gt;palindromic&lt;/em&gt; &lt;em&gt;substring&lt;/em&gt; in &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="Palind" scheme="http://pjpjsocute.github.io/en/tags/Palind/"/>
    
      <category term="DP" scheme="http://pjpjsocute.github.io/en/tags/DP/"/>
    
      <category term="String" scheme="http://pjpjsocute.github.io/en/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Binary Indexed Tree with applications in LeetCode</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/15/Datastructures/BIT/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/15/Datastructures/BIT/</id>
    <published>2023-05-15T03:30:14.000Z</published>
    <updated>2023-05-22T03:01:45.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Binary-Indexed-Tree-with-applications-in-LeetCode"><a href="#Binary-Indexed-Tree-with-applications-in-LeetCode" class="headerlink" title="Binary Indexed Tree with applications in LeetCode"></a>Binary Indexed Tree with applications in LeetCode</h2><ul><li><h3 id="Why-need-Binary-Indexed-Tree"><a href="#Why-need-Binary-Indexed-Tree" class="headerlink" title="Why need Binary Indexed Tree"></a>Why need Binary Indexed Tree</h3><ul><li><h4 id="Think-about-the-following-questions"><a href="#Think-about-the-following-questions" class="headerlink" title="Think about the following questions"></a>Think about the following questions</h4></li></ul><p><strong>QA</strong>:</p><p>Suppose there exists a sequence of integers input, e.g. <code>intput = [1,2,7,4,3]</code>, requiring the sum of the first K numbers.</p><p><strong>Sulotion</strong>:</p><p>Generally we will find a prefix and array <code>preSumArray</code>, where <code>preSumArray[i]</code> represents the sum of the first <code>i</code> numbers, so that we find the sum of the first N numbers only need to return <code>preSumArray[N]</code>, the time complexity is O(1), if you need to query K times, the complexity is O(K).</p><ul><li><h4 id="Update-this-question"><a href="#Update-this-question" class="headerlink" title="Update this question"></a>Update this question</h4></li></ul><p><strong>QA</strong>:</p><p>Suppose there exists a sequence of integers input, e.g. <code>intput = [1,2,7,4,3]</code>, now when we get the sum of the first N numbers, we might first increase/decrease the number at position <code>i</code> by <code>value</code>.</p><p><strong>Sulotion</strong>:</p><p>Generally we will find a prefix sum array <code>preSumArray</code>, where <code>preSumArray[i]</code> represents the sum of the first <code>i</code> numbers, as shown in the previous problem, we can still get the prefix sum in O(1) time. But if we need to insert a number <code>x</code> at position <code>i</code>, we need to update all <code>preSumArray</code> after <code>i</code> when we do the update, at which point the single update time is O(N) and the complexity of the K queries is O(KN). If we do not use <code>preSumArray</code>, then the update complexity is O(1), and the query complexity becomes O(N).</p><p><strong>This is where Binary Indexed Tree can help us solve this problem quickly.</strong></p><span id="more"></span><ul><li><h4 id="Pre-requisite-knowledge-Application-of-binary"><a href="#Pre-requisite-knowledge-Application-of-binary" class="headerlink" title="Pre-requisite knowledge - Application of binary"></a>Pre-requisite knowledge - Application of binary</h4></li></ul><p>There are many interesting applications of binary which could probably be summarised somewhat subsequently, but here is a usage of <code>lowbit(x) = x&amp;(-x)</code></p><p>The purpose of this equation is <strong>to find the largest power of 2</strong> that can divide X<strong>, which is the rightmost 1</strong> of X. This purpose is important.</p><p>For example: <code>5&amp;-5 = 1</code>; <code>10&amp;-10 = 2</code>; <code>12&amp;-12 = 4</code></p><p><strong>Principle:</strong></p><p>Generally integers are stored in computers using a complement code, where a negative number is equivalent to taking each bit and inverting it, and then adding 1 to the low bit.</p><p>For example <code>10 = 1010</code>, <code>-10 = 0110</code>, so <code>lowbit(10) = 2</code></p><ul><li><h4 id="Binary-Indexed-Tree，BIT"><a href="#Binary-Indexed-Tree，BIT" class="headerlink" title="Binary Indexed Tree，BIT"></a>Binary Indexed Tree，BIT</h4><ul><li><h5 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h5></li></ul><p>Essentially it is still an array, and is similar to <code>preSumArray</code> in that it still holds the sum array, but it holds the sum of <strong>i bits up to and including i, and lowbit(i) integers</strong>. This can be represented by the following diagram and the formula</p><p><img src="/en/2023/05/15/Datastructures/BIT/WX20230515-152510@2x.png" alt="WX20230515-152510@2x"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">B(1) = A(1);</span><br><span class="line">B(2) = A(1)+A(2);</span><br><span class="line">B(3) = A(3);</span><br><span class="line">B(4) = A(1)+A(2)+A(3)+A(4);</span><br><span class="line">B(5) = A(5);</span><br><span class="line">B(6) = A(5)+A(6);</span><br><span class="line">B(7) = A(7);</span><br><span class="line">B(8) = A(1)+A(2)+A(3)+A(4)+A(5)+A(6)+A(7)+A(8);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>tip</strong>: BIT index must start with 1.</p></li><li><ul><li><h5 id="Achieving"><a href="#Achieving" class="headerlink" title="Achieving"></a>Achieving</h5><p>Now based on BIT, we need to solve the 2 previous problems - summation and update.</p><ul><li><h6 id="getSum"><a href="#getSum" class="headerlink" title="getSum"></a>getSum</h6><p>Suppose we have a function getSum(i), which finds the sum of all numbers from 1 to i. The next step is to implement it. The next step is how to implement it.</p><p>As an example.</p><p><code>getSum(7) = A(1) +... +A(7) = B(4)+B(6)+B(7)</code></p><p><code>getSum(6) = B(4)+B(6)</code></p><p>Now the question is, how do you put <code>A(1)+.... +A(i)</code> to the stump array corresponding to those items:</p><p><strong>First: B(i) is defined as the sum of the first lowbit(i) starting from A(i), so we can get</strong><br>$$<br>B(i) = A(i-lowbit(i)+1)+… +A(i)\<br>$$<br>Then,we can obtain:</p><p>$$getSum(i) = A(1)+…+A(x)\<br>=A(1)+…+A(i-lowbit(i))+A(i-lowbit(i)+1)+…+A(i)\<br>=getSum(i-lowbit(i))+B(i)$$</p><p>We can then easily write the getSum function as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &gt; <span class="number">0</span>; i -= lowbit(i)) &#123;</span><br><span class="line">      res += bit[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Use the recursive form.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bit[x]+(<span class="type">long</span>)getSum(x-lowbit(x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The complexity of the process is O(LogN)</strong> (omitting the process)</p><p>Further, if we require <code>sum(i,j)</code>, then we just need <code>getSum(j)-getSum(i-1)</code>.</p></li><li><h6 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h6><p>Suppose we have a function <code>update(i,value)</code> that implements the number at position i plus <code>value</code>. Now think about how to implement:</p><p>Again, take an example:</p><p>If we want to <code>update(6,7)</code>, that is, +7 at position 6, then we need to update <code>B(6) and B(8)</code>, according to the diagram above, because the summation terms of <code>B(6)</code> and <code>B(8)</code> both contain A(6).</p><p><code>B(6) = A(5) + A(6);</code><br><code>B(8) = A(1)+A(2)+A(3)+A(4)+A(5)+A(6)+A(7)+A(8);</code></p><p>So the problem now switches to how to know all the items in the BIT that contain A(i).</p><p><img src="/en/2023/05/15/Datastructures/BIT/WX20230515-152510@2x.png" alt="WX20230515-152510@2x"></p><p>Let’s say we we want to find all the BITs that cover A(5).</p><p>Firstly: B(5) must be covered.</p><p>Second, we need to find the BIT that covers it closest to B(5), i.e. B(6)</p><p>Next, we just need to find the BIT that covers B(6) closest to him, i.e. B(8) and so on.</p><p>That is, we only need to find the nearest BIT(j) that covers it for the current BIT(i) and update his value.</p><p>We can find that:</p><p>If BIT(j) is needed to cover BIT(i), then <code>lowbit(j)&gt;lowbit(i)</code>, otherwise it must not be covered, so it can be converted to <code>lowbit(i+a)&gt;lowbit(i)</code> for the smallest a.</p><p>Because lowbit(i) is the <strong>integer divisor of the greatest power of 2 of i</strong>, <strong>which is also the rightmost 1</strong> of i.</p><p>So if <code>lowbit(a)&lt;lowbit(i)</code>, then <code>lowbit(i+a)&lt;lowbit(i)</code>.</p><p>For example, if <code>lowbit(j)</code> is 0100 and <code>lowbit(i)</code> is 0010, if <code>lowbit(a+i) must be less than lowbit(i)</code> (because the rightmost 1 must be preserved so a+i will only take the smaller of the right-hand 1 of a and i).</p><p>When <code>lowbit(a)=lowbit(i)</code>, then the rightmost 1 will be rounded, so the rightmost 1<strong>must be shifted to the right</strong>, so <code>lowbit(a+i)&gt;lowbit(i)</code>, must hold, so we can get <code>lowbit(a)=lowbit(i)</code></p><p>This allows us to start writing the update function as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> value)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt; bit.length; i += lowbit(i))&#123;</span><br><span class="line">  <span class="comment">//update</span></span><br><span class="line">      bit[i] += value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h4 id="Applications-in-LeetCode"><a href="#Applications-in-LeetCode" class="headerlink" title="Applications in LeetCode"></a>Applications in LeetCode</h4><ul><li><h4 id="LeetCode-493"><a href="#LeetCode-493" class="headerlink" title="LeetCode-493"></a>LeetCode-493</h4><ul><li><h5 id="Qa"><a href="#Qa" class="headerlink" title="Qa:"></a>Qa:</h5><p>Given an integer array <code>nums</code>, return <em>the number of <strong>reverse pairs</strong> in the array</em>.</p><p>A <strong>reverse pair</strong> is a pair <code>(i, j)</code> where:</p><ul><li><code>0 &lt;= i &lt; j &lt; nums.length</code> and</li><li><code>nums[i] &gt; 2 * nums[j]</code>.</li></ul></li><li><h5 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [1,3,2,3,1]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The reverse pairs are:</span><br><span class="line">(1, 4) --&gt; nums[1] = 3, nums[4] = 1, 3 &gt; 2 * 1</span><br><span class="line">(3, 4) --&gt; nums[3] = 3, nums[4] = 1, 3 &gt; 2 * 1</span><br></pre></td></tr></table></figure></li><li><h5 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h5><p>The problem of the stem can be converted into finding <strong> how many elements to the left of element j that are 2 times larger than him</strong> and summing them.</p><ol><li>Sort the array and discrete map it into an ordered sequence from 1 to n (most questions require this step because the index of a tree array must start at 1, so a mapping of the input parameters is required).</li><li>count the number of occurrences of each number.</li><li>Find the sum of the prefixes of the number of mapped elements to get the number of elements after the mapping, and thus the number of elements before</li></ol></li><li><h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieArr</span>&#123;</span><br><span class="line">        <span class="type">long</span> [] arr;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieArr</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">            arr = <span class="keyword">new</span> <span class="title class_">long</span> [n];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lowbit</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr[x]+()getSum(x-lowbit(x));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updata</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> x; i &lt; arr.length; i += lowbit(i)) arr[i] += c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">reversePairs</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="comment">//nums[i] 和树桩数组的index映射map</span></span><br><span class="line">        <span class="comment">//nums[i] and BIT&#x27;s index mapping map</span></span><br><span class="line">        Map&lt;Long,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="comment">//对nums元素排序存储，因为要求的是大2倍的数，所以需要把nums[i]*2也加入计算</span></span><br><span class="line">      <span class="comment">//Sort and store the elements of nums, because the number required is 2 times larger, so you need to add nums[i]*2 to the calculation as well</span></span><br><span class="line">        TreeSet&lt;Long&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums)&#123;</span><br><span class="line">            set.add((<span class="type">long</span>)i);</span><br><span class="line">            set.add((<span class="type">long</span>)i*<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//离散化,并映射</span></span><br><span class="line">      <span class="comment">//Discretization, and mapping</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!set.isEmpty())&#123;</span><br><span class="line">            map.put(set.pollFirst(),index++);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//init bit tree</span></span><br><span class="line">        <span class="type">TrieArr</span> <span class="variable">bit</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrieArr</span>(map.size()+<span class="number">1</span>);</span><br><span class="line">      <span class="comment">//result</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//因为是求大于nums[i]*2的出现总次数，那么将所有数字的出现次数-小于等于nums[i]*2出现的次数即可。</span></span><br><span class="line">           <span class="comment">//Since we are looking for the total number of occurrences greater than nums[i]*2, it is sufficient to take the number of occurrences of all numbers - the number of occurrences less than or equal to nums[i]*2.</span></span><br><span class="line">          <span class="comment">//get the nums[i]*2</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">target</span> <span class="operator">=</span> (<span class="type">long</span>)nums[i] * <span class="number">2</span>;</span><br><span class="line">          <span class="comment">//get bit index</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> map.get(target);</span><br><span class="line">          <span class="comment">//total sum - getsum(target)</span></span><br><span class="line">            ans += bit.getSum(map.size()) - bit.getSum(l);</span><br><span class="line">          <span class="comment">//get nums[i]’s index and update nums[i] occurrences</span></span><br><span class="line">            bit.updata(map.get((<span class="type">long</span>)nums[i]), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><pre><code>- #### Similar problems can be found in LeetCode-307 .etc</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Binary-Indexed-Tree-with-applications-in-LeetCode&quot;&gt;&lt;a href=&quot;#Binary-Indexed-Tree-with-applications-in-LeetCode&quot; class=&quot;headerlink&quot; title=&quot;Binary Indexed Tree with applications in LeetCode&quot;&gt;&lt;/a&gt;Binary Indexed Tree with applications in LeetCode&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;Why-need-Binary-Indexed-Tree&quot;&gt;&lt;a href=&quot;#Why-need-Binary-Indexed-Tree&quot; class=&quot;headerlink&quot; title=&quot;Why need Binary Indexed Tree&quot;&gt;&lt;/a&gt;Why need Binary Indexed Tree&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Think-about-the-following-questions&quot;&gt;&lt;a href=&quot;#Think-about-the-following-questions&quot; class=&quot;headerlink&quot; title=&quot;Think about the following questions&quot;&gt;&lt;/a&gt;Think about the following questions&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Suppose there exists a sequence of integers input, e.g. &lt;code&gt;intput = [1,2,7,4,3]&lt;/code&gt;, requiring the sum of the first K numbers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sulotion&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Generally we will find a prefix and array &lt;code&gt;preSumArray&lt;/code&gt;, where &lt;code&gt;preSumArray[i]&lt;/code&gt; represents the sum of the first &lt;code&gt;i&lt;/code&gt; numbers, so that we find the sum of the first N numbers only need to return &lt;code&gt;preSumArray[N]&lt;/code&gt;, the time complexity is O(1), if you need to query K times, the complexity is O(K).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;Update-this-question&quot;&gt;&lt;a href=&quot;#Update-this-question&quot; class=&quot;headerlink&quot; title=&quot;Update this question&quot;&gt;&lt;/a&gt;Update this question&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Suppose there exists a sequence of integers input, e.g. &lt;code&gt;intput = [1,2,7,4,3]&lt;/code&gt;, now when we get the sum of the first N numbers, we might first increase/decrease the number at position &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sulotion&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Generally we will find a prefix sum array &lt;code&gt;preSumArray&lt;/code&gt;, where &lt;code&gt;preSumArray[i]&lt;/code&gt; represents the sum of the first &lt;code&gt;i&lt;/code&gt; numbers, as shown in the previous problem, we can still get the prefix sum in O(1) time. But if we need to insert a number &lt;code&gt;x&lt;/code&gt; at position &lt;code&gt;i&lt;/code&gt;, we need to update all &lt;code&gt;preSumArray&lt;/code&gt; after &lt;code&gt;i&lt;/code&gt; when we do the update, at which point the single update time is O(N) and the complexity of the K queries is O(KN). If we do not use &lt;code&gt;preSumArray&lt;/code&gt;, then the update complexity is O(1), and the query complexity becomes O(N).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is where Binary Indexed Tree can help us solve this problem quickly.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="Binary Indexed Tree" scheme="http://pjpjsocute.github.io/en/tags/Binary-Indexed-Tree/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="Data structures" scheme="http://pjpjsocute.github.io/en/tags/Data-structures/"/>
    
  </entry>
  
  <entry>
    <title>According to LeetCode_813,How to use a recursion to dp</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/13/LeetCode/LeetCode-813/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/13/LeetCode/LeetCode-813/</id>
    <published>2023-05-13T08:14:10.000Z</published>
    <updated>2023-05-12T16:29:46.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into <strong>at most</strong> <code>k</code> non-empty adjacent subarrays. The <strong>score</strong> of a partition is the sum of the averages of each subarray.</p><p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p><p>Return <em>the maximum <strong>score</strong> you can achieve of all the possible partitions</em>. Answers within <code>10-6</code> of the actual answer will be accepted.</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [9,1,2,3,9], k = 3</span><br><span class="line">Output: 20.00000</span><br><span class="line">Explanation: </span><br><span class="line">The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.</span><br><span class="line">We could have also partitioned nums into [9, 1], [2], [3, 9], for example.</span><br><span class="line">That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><p>The most intuitive idea in solving this problem is that we can enumerate each case and finally get the optimal answer. So, we can solve the problem by recursive enumeration, by enumerating each partitioned case to get the final maximum value<br>The recursive code is as follows:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(A, <span class="number">0</span>, K);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> A[] ,<span class="type">int</span> index,<span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">1</span>)&#123;<span class="comment">// k=1 return the total array sum</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class="line">                sum+=A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>)sum/(A.length-index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class="line">            sum+=A[i];<span class="comment">//Enumerate each separation point</span></span><br><span class="line">            <span class="type">double</span> <span class="variable">avage</span> <span class="operator">=</span> sum/(i-index+<span class="number">1</span>);</span><br><span class="line">            <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> dfs(A,i+<span class="number">1</span>,K-<span class="number">1</span>);<span class="comment">// next sub array sum </span></span><br><span class="line">            res = Math.max(res, avage+temp);<span class="comment">//select max</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h4><p>​        In general, using recursion for enumeration is not the optimal solution because it involves a lot of repetition, so we can use mnemonic recursion, which uses an array of recursive values that have already been obtained, so that when we enter the branch again, we can quickly obtain a solution. After understanding the above recursive code, it is easy to obtain the mnemonic recursive code with a little modification</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">  <span class="comment">//use a array to record the value which has been caculate</span></span><br><span class="line">    <span class="type">double</span> [][] memo ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memo = <span class="keyword">new</span> <span class="title class_">double</span> [A.length+<span class="number">1</span>][K+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> dfs(A, <span class="number">0</span>, K);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> A[] ,<span class="type">int</span> index,<span class="type">int</span> K)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[index][K]!=<span class="number">0.0</span>)   <span class="keyword">return</span> memo[index][K];</span><br><span class="line">        <span class="keyword">if</span>(K==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;A.length;i++)&#123;</span><br><span class="line">                sum+=A[i];</span><br><span class="line">            &#125;</span><br><span class="line">            memo[index][K] = (<span class="type">double</span>)sum/(A.length-index);</span><br><span class="line">            <span class="keyword">return</span> memo[index][K];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=A.length-K;i++)&#123;</span><br><span class="line">            sum+=A[i];</span><br><span class="line">            <span class="type">double</span> <span class="variable">avage</span> <span class="operator">=</span> sum/(i-index+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// double temp = dfs(A,i+1,K-1);</span></span><br><span class="line">            <span class="comment">// memo[i+1][K-1] = temp;</span></span><br><span class="line">            memo[i+<span class="number">1</span>][K-<span class="number">1</span>] = dfs(A,i+<span class="number">1</span>,K-<span class="number">1</span>);</span><br><span class="line">            res = Math.max(res, avage+memo[i+<span class="number">1</span>][K-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        memo[index][K] =res;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h4><p>​        Mnemonic recursion is actually very similar to dynamic programming, except that one is top-down tableau and the other is bottom-up tableau. Based on the idea of memetic recursion, we can rewrite memetic recursion as DP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">largestSumOfAverages</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">double</span>[][] dp = <span class="keyword">new</span> <span class="title class_">double</span>[A.length+<span class="number">1</span>][K+<span class="number">1</span>];</span><br><span class="line">        <span class="type">double</span> [] preSum = <span class="keyword">new</span> <span class="title class_">double</span>[A.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            preSum[i+<span class="number">1</span>]= preSum[i]+A[i];</span><br><span class="line">            dp[i+<span class="number">1</span>][<span class="number">1</span>] = preSum[i+<span class="number">1</span>]/(i+<span class="number">1</span>);<span class="comment">//init</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=A.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=Math.min(K, i);j++)&#123;</span><br><span class="line">                <span class="comment">//The maximum mean value of dp[i][j] should be the maximum of all possible values of dp[i&#x27;][j-1] + the mean sum of i&#x27;-i</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;t&lt;i;t++)&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[t][j-<span class="number">1</span>]+(preSum[i]-preSum[t])/(i-t));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[A.length][K];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;You are given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;. You can partition the array into &lt;strong&gt;at most&lt;/strong&gt; &lt;code&gt;k&lt;/code&gt; non-empty adjacent subarrays. The &lt;strong&gt;score&lt;/strong&gt; of a partition is the sum of the averages of each subarray.&lt;/p&gt;
&lt;p&gt;Note that the partition must use every integer in &lt;code&gt;nums&lt;/code&gt;, and that the score is not necessarily an integer.&lt;/p&gt;
&lt;p&gt;Return &lt;em&gt;the maximum &lt;strong&gt;score&lt;/strong&gt; you can achieve of all the possible partitions&lt;/em&gt;. Answers within &lt;code&gt;10-6&lt;/code&gt; of the actual answer will be accepted.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="Data structures" scheme="http://pjpjsocute.github.io/en/tags/Data-structures/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-381</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-381/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-381/</id>
    <published>2023-05-12T09:14:10.000Z</published>
    <updated>2023-05-12T16:30:00.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p><code>RandomizedCollection</code> is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.</p><p>Implement the <code>RandomizedCollection</code> class:</p><ul><li><code>RandomizedCollection()</code> Initializes the empty <code>RandomizedCollection</code> object.</li><li><code>bool insert(int val)</code> Inserts an item <code>val</code> into the multiset, even if the item is already present. Returns <code>true</code> if the item is not present, <code>false</code> otherwise.</li><li><code>bool remove(int val)</code> Removes an item <code>val</code> from the multiset if present. Returns <code>true</code> if the item is present, <code>false</code> otherwise. Note that if <code>val</code> has multiple occurrences in the multiset, we only remove one of them.</li><li><code>int getRandom()</code> Returns a random element from the current multiset of elements. The probability of each element being returned is <strong>linearly related</strong> to the number of the same values the multiset contains.</li></ul><p>You must implement the functions of the class such that each function works on <strong>average</strong> <code>O(1)</code> time complexity.</p><p><strong>Note:</strong> The test cases are generated such that <code>getRandom</code> will only be called if there is <strong>at least one</strong> item in the <code>RandomizedCollection</code>.</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Input</span><br><span class="line">[&quot;RandomizedCollection&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [1], [2], [], [1], []]</span><br><span class="line">Output</span><br><span class="line">[null, true, false, true, 2, true, 1]</span><br><span class="line"></span><br><span class="line">Explanation</span><br><span class="line">RandomizedCollection randomizedCollection = new RandomizedCollection();</span><br><span class="line">randomizedCollection.insert(1);   // return true since the collection does not contain 1.</span><br><span class="line">                                  // Inserts 1 into the collection.</span><br><span class="line">randomizedCollection.insert(1);   // return false since the collection contains 1.</span><br><span class="line">                                  // Inserts another 1 into the collection. Collection now contains [1,1].</span><br><span class="line">randomizedCollection.insert(2);   // return true since the collection does not contain 2.</span><br><span class="line">                                  // Inserts 2 into the collection. Collection now contains [1,1,2].</span><br><span class="line">randomizedCollection.getRandom(); // getRandom should:</span><br><span class="line">                                  // - return 1 with probability 2/3, or</span><br><span class="line">                                  // - return 2 with probability 1/3.</span><br><span class="line">randomizedCollection.remove(1);   // return true since the collection contains 1.</span><br><span class="line">                                  // Removes 1 from the collection. Collection now contains [1,2].</span><br><span class="line">randomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>Because the topic needs to find out if the value exists when inserting, we need to achieve a lookup of O1, so there are lists and hashmaps (lists by index) that can do this.</p><p>However, since list cannot directly find the value of an element O1, we can consider using list and hashmap together.</p><p>The map stores (value, index) and the list stores the value. </p><p>Since list can only be O1 when the tail element is deleted, we can swap the element to be deleted with the tail element and then delete the value and index key-value pairs stored in map.</p><p>Since a value may have multiple indexes, the indexes also need to be encapsulated in a collection.</p><p> Considering that a value will not have 2 identical indexes, and that operations such as delete swap require the deletion of the worthy indexes, set is used to hold the index sequence</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedCollection</span> &#123;</span><br><span class="line">    <span class="type">int</span> n ;<span class="comment">// collection size</span></span><br><span class="line">    HashMap&lt;Integer,Set&lt;Integer&gt;&gt;map;</span><br><span class="line">    ArrayList&lt;Integer&gt;list;</span><br><span class="line">    Random random;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedCollection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="built_in">this</span>.n = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Inserts a value to the collection. Returns true if the collection did not already contain the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">        <span class="keyword">if</span>(set==<span class="literal">null</span>)   set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(n);<span class="comment">// add index</span></span><br><span class="line">        list.add(val);</span><br><span class="line">        map.put(val, set);</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">return</span> set.size()==<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes a value from the collection. Returns true if the collection contained the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(val))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> n-<span class="number">1</span>;<span class="comment">// get last index</span></span><br><span class="line">            <span class="type">Set</span> <span class="variable">lastset</span> <span class="operator">=</span> map.get(list.get(lastIndex));</span><br><span class="line">            <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> map.get(val);</span><br><span class="line">            <span class="type">int</span> <span class="variable">currIndex</span> <span class="operator">=</span> (<span class="type">int</span>)set.iterator().next();<span class="comment">//get current index  tip:: iterator in set is ordered when you use next</span></span><br><span class="line">            <span class="comment">//delete</span></span><br><span class="line">            swap(list, currIndex, lastIndex);</span><br><span class="line">            list.remove(n-<span class="number">1</span>);<span class="comment">// list delete</span></span><br><span class="line">            set.remove(currIndex);<span class="comment">//delete set</span></span><br><span class="line">            <span class="keyword">if</span>(set.size()==<span class="number">0</span>)   map.remove(val);<span class="comment">//delete map</span></span><br><span class="line">            <span class="comment">//edit last index</span></span><br><span class="line">            lastset.remove(n-<span class="number">1</span>);</span><br><span class="line">            lastset.add(currIndex);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get a random element from the collection. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(random.nextInt(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;Integer&gt; list ,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        list.set(i, list.get(j));</span><br><span class="line">        list.set(j, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RandomizedCollection&lt;/code&gt; is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also reporting a random element.&lt;/p&gt;
&lt;p&gt;Implement the &lt;code&gt;RandomizedCollection&lt;/code&gt; class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RandomizedCollection()&lt;/code&gt; Initializes the empty &lt;code&gt;RandomizedCollection&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool insert(int val)&lt;/code&gt; Inserts an item &lt;code&gt;val&lt;/code&gt; into the multiset, even if the item is already present. Returns &lt;code&gt;true&lt;/code&gt; if the item is not present, &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool remove(int val)&lt;/code&gt; Removes an item &lt;code&gt;val&lt;/code&gt; from the multiset if present. Returns &lt;code&gt;true&lt;/code&gt; if the item is present, &lt;code&gt;false&lt;/code&gt; otherwise. Note that if &lt;code&gt;val&lt;/code&gt; has multiple occurrences in the multiset, we only remove one of them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int getRandom()&lt;/code&gt; Returns a random element from the current multiset of elements. The probability of each element being returned is &lt;strong&gt;linearly related&lt;/strong&gt; to the number of the same values the multiset contains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You must implement the functions of the class such that each function works on &lt;strong&gt;average&lt;/strong&gt; &lt;code&gt;O(1)&lt;/code&gt; time complexity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The test cases are generated such that &lt;code&gt;getRandom&lt;/code&gt; will only be called if there is &lt;strong&gt;at least one&lt;/strong&gt; item in the &lt;code&gt;RandomizedCollection&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="Data structures" scheme="http://pjpjsocute.github.io/en/tags/Data-structures/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-862</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-862/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-862/</id>
    <published>2023-05-12T08:14:10.000Z</published>
    <updated>2023-05-12T14:35:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the length of the shortest non-empty <strong>subarray</strong> of</em> <code>nums</code> <em>with a sum of at least</em> <code>k</code>. If there is no such <strong>subarray</strong>, return <code>-1</code>.</p><p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p><span id="more"></span><h3 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,-1,2], k = 3</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>​        To find the sum of consecutive subsequences, it is easy to think of using prefix sums.</p><p>​        Since there are positive and negative arrays, it is not possible to use bifurcation, and brute force cracking will time out.</p><p>#### <strong>Optimization:</strong></p><p>Because it is to find the shortest interval, it can be obvious to think of sliding windows, but this array does not satisfy monotonicity: the</p><p>There are <strong>negative numbers</strong> in the array, resulting in window values <strong>not monotonic</strong>, but because there are negative numbers so that is why when we find a certain window and for K, there may still be feasible solutions within the window, for the following reasons:</p><p><strong>For all indexes ${i_{0-j}}$ that satisfy ≥K before index $i_j$,</strong></p><p><strong>If $i_1$&lt;$i_2$ and arr[$i_1$]&gt;arr[$i_2$],</strong></p><p> <strong>then the feasible solution must be $i_2$,</strong></p><p> <strong>because $i_2$ is larger and arr[$i_2$] is smaller</strong></p><p>So  <strong>we can maintain a monotonic queue to guarantee the monotonicity of the values in the window:</strong></p><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea:"></a>Idea:</h3><p>Based on the fact that we always want the left pointer to be as close as possible for each right pointer j and the value to be as large as possible.</p><p>If there is a value at i-1 &gt; i, then the value at i-1 must not be the correct solution, because the value at i is closer and can get a larger array sum, if i-1 is satisfied i must be satisfied, so as to reduce the amount of our judgment</p><p>If the value at the top of the queue satisfies the current value - the value at the top of the queue &gt;= K, record the length and pop the top of the queue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestSubarray</span><span class="params">(<span class="type">int</span>[] A, <span class="type">int</span> K)</span> &#123;</span><br><span class="line">        <span class="type">long</span> [] arr = <span class="keyword">new</span> <span class="title class_">long</span> [A.length+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">            arr[i+<span class="number">1</span>] = arr[i]+A[i];</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;=K) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="comment">//得到前缀和数组/ get pre sum</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">// for(int i=0;i&lt;=A.length-1;i++)&#123;  //暴力破解 N^2 超时/O(N^2) out time</span></span><br><span class="line">        <span class="comment">//     for(int j = i+1;j&lt;=A.length;j++)&#123;</span></span><br><span class="line">        <span class="comment">//         if(arr[j]-arr[i]&gt;=K)&#123;</span></span><br><span class="line">        <span class="comment">//             res = Math.min(j-i,res);</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">        Deque&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()&amp;&amp;arr[i]&lt;=arr[queue.getLast()])   queue.removeLast();</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()&amp;&amp;arr[i]-arr[queue.peek()]&gt;=K)    res = Math.min(res,i-queue.poll());</span><br><span class="line">            queue.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res==Integer.MAX_VALUE?-<span class="number">1</span>:res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return &lt;em&gt;the length of the shortest non-empty &lt;strong&gt;subarray&lt;/strong&gt; of&lt;/em&gt; &lt;code&gt;nums&lt;/code&gt; &lt;em&gt;with a sum of at least&lt;/em&gt; &lt;code&gt;k&lt;/code&gt;. If there is no such &lt;strong&gt;subarray&lt;/strong&gt;, return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;subarray&lt;/strong&gt; is a &lt;strong&gt;contiguous&lt;/strong&gt; part of an array.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="persum" scheme="http://pjpjsocute.github.io/en/tags/persum/"/>
    
      <category term="queue" scheme="http://pjpjsocute.github.io/en/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-406</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-406/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-406/</id>
    <published>2023-05-12T08:13:50.000Z</published>
    <updated>2023-05-12T14:32:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q"><a href="#Q" class="headerlink" title="Q:"></a>Q:</h3><p>You are given an array of people, <code>people</code>, which are the attributes of some people in a queue (not necessarily in order). Each <code>people[i] = [hi, ki]</code> represents the <code>ith</code> person of height <code>hi</code> with <strong>exactly</strong> <code>ki</code> other people in front who have a height greater than or equal to <code>hi</code>.</p><p>Reconstruct and return <em>the queue that is represented by the input array</em> <code>people</code>. The returned queue should be formatted as an array <code>queue</code>, where <code>queue[j] = [hj, kj]</code> is the attributes of the <code>jth</code> person in the queue (<code>queue[0]</code> is the person at the front of the queue).</p><span id="more"></span><h4 id="Input"><a href="#Input" class="headerlink" title="Input:"></a>Input:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</span><br><span class="line">Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</span><br><span class="line">Explanation:</span><br><span class="line">Person 0 has height 5 with no other people taller or the same height in front.</span><br><span class="line">Person 1 has height 7 with no other people taller or the same height in front.</span><br><span class="line">Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.</span><br><span class="line">Person 3 has height 6 with one person taller or the same height in front, which is person 1.</span><br><span class="line">Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.</span><br><span class="line">Person 5 has height 7 with one person taller or the same height in front, which is person 1.</span><br><span class="line">Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.</span><br></pre></td></tr></table></figure><h3 id="S"><a href="#S" class="headerlink" title="S:"></a>S:</h3><p>A person has 2 attributes , h stands for height, and the person with the same height should be behind the person with k greater. In order to determine where should go, we can consider ranking the heights backwards so that the number of people taller than him in front is known. Suppose some queue goes to , for the people who have been inserted in front of him, the heights are ≥ him, so when he is inserted in the ith position, it has no effect on the others (because when the heights are the same,i will be sorted in positive order)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;</span><br><span class="line">        Arrays.sort(people,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span> [] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]==o2[<span class="number">0</span>]?o1[<span class="number">1</span>]-o2[<span class="number">1</span>]:o2[<span class="number">0</span>]-o1[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> [] peo:people)&#123;</span><br><span class="line">            res.add(peo[<span class="number">1</span>], peo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toArray(<span class="keyword">new</span> <span class="title class_">int</span> [res.size()][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q&quot;&gt;&lt;a href=&quot;#Q&quot; class=&quot;headerlink&quot; title=&quot;Q:&quot;&gt;&lt;/a&gt;Q:&lt;/h3&gt;&lt;p&gt;You are given an array of people, &lt;code&gt;people&lt;/code&gt;, which are the attributes of some people in a queue (not necessarily in order). Each &lt;code&gt;people[i] = [hi, ki]&lt;/code&gt; represents the &lt;code&gt;ith&lt;/code&gt; person of height &lt;code&gt;hi&lt;/code&gt; with &lt;strong&gt;exactly&lt;/strong&gt; &lt;code&gt;ki&lt;/code&gt; other people in front who have a height greater than or equal to &lt;code&gt;hi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Reconstruct and return &lt;em&gt;the queue that is represented by the input array&lt;/em&gt; &lt;code&gt;people&lt;/code&gt;. The returned queue should be formatted as an array &lt;code&gt;queue&lt;/code&gt;, where &lt;code&gt;queue[j] = [hj, kj]&lt;/code&gt; is the attributes of the &lt;code&gt;jth&lt;/code&gt; person in the queue (&lt;code&gt;queue[0]&lt;/code&gt; is the person at the front of the queue).&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>KMP algorithm</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/algorithm/KMP-algorithm/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/algorithm/KMP-algorithm/</id>
    <published>2023-05-12T07:44:17.000Z</published>
    <updated>2023-05-12T16:53:28.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP:"></a>KMP:</h3><p>​    The KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.</p><p>The basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.</p><p>The following are the steps of the KMP algorithm:</p><ol><li>Construct a “partial match table” (also called a “failure function”). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. </li><li>Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.</li></ol><span id="more"></span><h3 id="Why-KMP"><a href="#Why-KMP" class="headerlink" title="Why KMP"></a>Why KMP</h3><p>​    In the first approach, if the comparison from String[i] fails, the algorithm directly starts trying to compare from S[i+1]. This kind of behavior is a typical “not learning from previous mistakes”.We should note that a failed match will provide us with valuable information - <strong>if the match between String[i : i+len(P)] and P fails at the r th position, then from S[i] : the first (r-1) consecutive characters must be exactly the same as the first (r-1) characters of P</strong></p><p><img src="/en/2023/05/12/algorithm/KMP-algorithm/1677815997905-1cc35396-f8b9-4cd8-9eeb-e583c804f942.jpeg" alt></p><p>​    Therefore, we can skip those unlikely strings as much as possible to optimize our method。</p><p>Give a Exapmle:</p><p><img src="/en/2023/05/12/algorithm/KMP-algorithm/1677830257055-487dcd00-8b04-4467-a430-34fbb1285c8e.jpeg" alt></p><p>​    First, P[5] fails to match, then it means that S[0:5] is equal to P[0:5], which is “abcab”. </p><p>Now let’s consider: from S[1], S[2], S[3] Is there any chance that the initial matching attempt will succeed?</p><p>When we start in S[1], it won’t success. Because we can see : P[1] != P[0], But P[1] = S[1], So P[0] != S[1].</p><p>As same in S[2].</p><p>But when we start in S<a href="it&#39;s important">3</a>: <strong>P[0] = P[3], S[3] = P[3], so P[0] = S[3].</strong></p><p>We can find that in S[3], it is possible to match successfully. And we will find that if it is known that S and P are the same within the length L, then whether any i can be used as the starting point of matching depends only on whether P[0] = P[i] are equal. Here we can get the core next array of the KMP algorithm</p><h3 id="Next-Array"><a href="#Next-Array" class="headerlink" title="Next Array"></a>Next Array</h3><p>The next array is for the pattern string. The next array of P is defined as: <strong>next[i] represents a substring of P[0] ~ P[i], so that the first k characters are exactly equal to the largest k of the last k characters. In particular, k cannot be i+ 1</strong> (Because this substring has only i+1 characters in total, it must be equal to itself, so it is meaningless).  <strong>In fact, it is to get the maximum length of the longest same prefix and suffix in the P string when different starting points i.</strong></p><p><img src="/en/2023/05/12/algorithm/KMP-algorithm/1677816850922-c3abca12-6649-486d-b8aa-71139dcbc716.jpeg" alt></p><h3 id="NOW-How-to-use-next-array-match"><a href="#NOW-How-to-use-next-array-match" class="headerlink" title="NOW, How to use next array match"></a>NOW, How to use next array match</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">getNext(needle,next);</span><br><span class="line"><span class="keyword">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (j == -<span class="number">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class="line">    &#123;</span><br><span class="line">        i++;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        j = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/en/2023/05/12/algorithm/KMP-algorithm/1677827701314-03d97a1b-a666-4268-b392-cfa46e8bb70c.jpeg" alt></p><h4 id="First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point"><a href="#First-we-use-two-point-to-mactch-the-Strings-The-problem-is-how-to-change-the-point" class="headerlink" title="First: we use two point to mactch the Strings. The problem is how to change the point?"></a>First: we use two point to mactch the Strings. The problem is how to change the point?</h4><h4 id="Second"><a href="#Second" class="headerlink" title="Second:"></a>Second:</h4><pre><code>String[i] != P [j] ,now we need change the j to find a new start which prefix of String is equals to P. Only in this way it may success. So, next array is useful: j = next[j]</code></pre><h3 id="How-to-get-next-array"><a href="#How-to-get-next-array" class="headerlink" title="How to get next array"></a>How to get next array</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String p, <span class="type">int</span> [] next)</span></span><br><span class="line">    &#123;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; (p.length()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>this code use a small skills：make next[0] = -1 . you can remember it ,it will make easier to code;</p><h4 id="dynamic-programming"><a href="#dynamic-programming" class="headerlink" title="dynamic programming:"></a>dynamic programming:</h4><p>next[i] means the max(i) that p[0,next[i]] = p[i-next[i],i]</p><p>so, for if we know next[0],next[1],…next[i-1], how to know next[i]?</p><p>set <code>next[i-1] = pre</code> </p><p>if<code>p[i] = p[pre+1]</code> , it means <code>next[i] = pre+1</code></p><p>else if <code>p[i] != p[pre+1],</code> it means <code>p[i-pre-1,i-1] = p[pre-1]</code></p><p>we should reduce the pre. <code>pre = next[pre]</code></p><p><img src="/en/2023/05/12/algorithm/KMP-algorithm/1677829808221-92178aa3-0c00-4c60-af02-dc14e6752b5b.jpeg" alt></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * now we can use kmp algorithm，a prefix matching algorithm</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span>&#123;</span><br><span class="line">        <span class="comment">//in first method,we can find that we need match all the substring if it&#x27;s not match.</span></span><br><span class="line">        <span class="comment">//some message have been lost: the prefix of the last string we have compared.</span></span><br><span class="line">        <span class="comment">//we can start with the same prefix string to match,so that the time can be saved</span></span><br><span class="line">        <span class="comment">// we can store the same prefix in a array or list, so we called kmp algorithm</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> haystack.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">length1</span> <span class="operator">=</span> needle.length();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> [] next = <span class="keyword">new</span> <span class="title class_">int</span> [length1];</span><br><span class="line">        getNext(needle,next);</span><br><span class="line">        <span class="keyword">while</span> (i &lt; length &amp;&amp; j &lt; length1)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || haystack.charAt(i) == needle.charAt(j))</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j == length1)&#123;</span><br><span class="line">            <span class="keyword">return</span> i - j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getNext</span><span class="params">(String p, <span class="type">int</span> [] next)</span></span><br><span class="line">    &#123;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; (p.length()))&#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || p.charAt(i)==p.charAt(j)) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;KMP&quot;&gt;&lt;a href=&quot;#KMP&quot; class=&quot;headerlink&quot; title=&quot;KMP:&quot;&gt;&lt;/a&gt;KMP:&lt;/h3&gt;&lt;p&gt;​    The KMP (Knuth-Morris-Pratt) algorithm is an algorithm for string search that finds the occurrence of a word W within a text string S.&lt;/p&gt;
&lt;p&gt;The basic idea is that when a substring does not match the target string, it is known enough information to be able to determine that the next search step will not result in a missed check of the target string. In this way, the algorithm does not perform an invalid check.&lt;/p&gt;
&lt;p&gt;The following are the steps of the KMP algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Construct a “partial match table” (also called a “failure function”). This is an array, and for a given lookup word, each element of the table contains the position where the lookup word should jump when the match fails. &lt;/li&gt;
&lt;li&gt;Use this table to perform string searches. When a match failure occurs in a text string, you can skip directly to the previous part that is known not to match.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="algorithm" scheme="http://pjpjsocute.github.io/en/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>chatGPT with confluence</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/algorithm/chatGPT-with-confluence/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/algorithm/chatGPT-with-confluence/</id>
    <published>2023-05-12T07:44:05.000Z</published>
    <updated>2023-05-12T14:18:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Target"><a href="#Target" class="headerlink" title="Target:"></a>Target:</h3><p>Since there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files</p><span id="more"></span><p>Here is the code of a demo, referring to the GPT official website</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##crawler</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> html2text</span><br><span class="line"><span class="keyword">from</span> atlassian <span class="keyword">import</span> Confluence</span><br><span class="line"><span class="keyword">import</span> tiktoken</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">from</span> openai.embeddings_utils <span class="keyword">import</span> distances_from_embeddings</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> openai.embeddings_utils <span class="keyword">import</span> distances_from_embeddings, cosine_similarity</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># public account and confluence space configuration</span></span><br><span class="line">domain = <span class="string">&quot;confluence.xxxxx.com&quot;</span></span><br><span class="line">full_url = <span class="string">&quot;https://confluence.xxxxx.com/&quot;</span></span><br><span class="line">login_url = <span class="string">&quot;https://confluence.xxxxx.com/login.action?os_destination=%2Fdologin.action&quot;</span></span><br><span class="line">page_url = <span class="string">&quot;https://confluence.xxxxx.com/display/41JTSP/&quot;</span></span><br><span class="line">user_name = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">password = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment"># Define the space key to be crawled, which is currently our space</span></span><br><span class="line">space_key = <span class="string">&quot;xxxx&quot;</span></span><br><span class="line"><span class="comment">##Data saving address, please customize</span></span><br><span class="line">filePath = <span class="string">&quot;&quot;</span></span><br><span class="line">processPath = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Separators and replacements, mainly for file name generation and title reduction</span></span><br><span class="line">splitFlag = <span class="string">&quot;$&quot;</span></span><br><span class="line">replaceFlag = <span class="string">&quot;_&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##Setting up openai environment</span></span><br><span class="line">openai.organization = <span class="string">&quot;&quot;</span></span><br><span class="line">openai.api_key = <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crawler</span>(<span class="params">base_url,username,password,space_key,totalSpace = <span class="literal">False</span></span>):</span><br><span class="line">    confluence = Confluence(url=base_url, username=username, password=password)</span><br><span class="line">    <span class="comment">##To be implemented, crawl all spaces</span></span><br><span class="line">    <span class="comment">##Get the corresponding space</span></span><br><span class="line">    space = confluence.get_space(space_key, expand=<span class="string">&#x27;description.plain,homepage&#x27;</span>)</span><br><span class="line">    <span class="comment">##get space page id</span></span><br><span class="line">    page_id = space[<span class="string">&quot;homepage&quot;</span>][<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Create a directory to store the text files</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filePath):</span><br><span class="line">            os.mkdir(filePath)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a directory to store the csv files</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(processPath):</span><br><span class="line">            os.mkdir(processPath)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##subpage</span></span><br><span class="line">    child = confluence.get_page_child_by_type(page_id, <span class="built_in">type</span>=<span class="string">&#x27;page&#x27;</span>, start=<span class="literal">None</span>, limit=<span class="literal">None</span>, expand=<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">##init queue</span></span><br><span class="line">    queue = deque()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> child:</span><br><span class="line">        queue.append(i)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        <span class="comment"># Get the next URL from the queue</span></span><br><span class="line">        childPage = queue.pop()</span><br><span class="line">        <span class="comment">##get page id</span></span><br><span class="line">        html = confluence.get_page_by_id(childPage[<span class="string">&quot;id&quot;</span>], expand=<span class="string">&quot;body.storage&quot;</span>)</span><br><span class="line">        <span class="comment"># html-&gt;text</span></span><br><span class="line">        content = html[<span class="string">&quot;body&quot;</span>][<span class="string">&quot;storage&quot;</span>][<span class="string">&quot;value&quot;</span>]</span><br><span class="line">        content_text = html2text.html2text(content)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">##insert not null</span></span><br><span class="line">        <span class="keyword">if</span> content_text.lstrip() != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            title = <span class="built_in">str</span>(html[<span class="string">&quot;title&quot;</span>]).replace(<span class="string">&quot;/&quot;</span>,replaceFlag)</span><br><span class="line">    <span class="comment">#         if not os.path.exists(&quot;/Users/lei.zhou/text/&quot;+html[&quot;title&quot;]):</span></span><br><span class="line">    <span class="comment">#             os.mkdir(&quot;/Users/lei.zhou/text/&quot;)</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filePath+ childPage[<span class="string">&quot;id&quot;</span>]+splitFlag+title+ <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(content_text)</span><br><span class="line"></span><br><span class="line">        <span class="comment">##add sub point‘</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> confluence.get_page_child_by_type(childPage[<span class="string">&quot;id&quot;</span>], <span class="built_in">type</span>=<span class="string">&#x27;page&#x27;</span>, start=<span class="literal">None</span>, limit=<span class="literal">None</span>, expand=<span class="literal">None</span>):</span><br><span class="line">            queue.append(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">max_tokens = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_newlines</span>(<span class="params">serie</span>):</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;\\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    serie = serie.<span class="built_in">str</span>.replace(<span class="string">&#x27;  &#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> serie</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_context</span>(<span class="params"></span></span><br><span class="line"><span class="params">    question, df, max_len=<span class="number">1800</span>, size=<span class="string">&quot;ada&quot;</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Find the most similar text segment</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Get the embeddings for the question</span></span><br><span class="line">    q_embeddings = openai.Embedding.create(<span class="built_in">input</span>=question, engine=<span class="string">&#x27;text-embedding-ada-002&#x27;</span>)[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    <span class="comment"># Calculate the most similar text using the cosine algorithm</span></span><br><span class="line">    df[<span class="string">&#x27;distances&#x27;</span>] = distances_from_embeddings(q_embeddings, df[<span class="string">&#x27;embeddings&#x27;</span>].values, distance_metric=<span class="string">&#x27;cosine&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    returns = []</span><br><span class="line">    cur_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Keep adding text to the upper limit</span></span><br><span class="line">    <span class="keyword">for</span> i, row <span class="keyword">in</span> df.sort_values(<span class="string">&#x27;distances&#x27;</span>, ascending=<span class="literal">True</span>).iterrows():</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Text creation</span></span><br><span class="line">        cur_len += row[<span class="string">&#x27;n_tokens&#x27;</span>] + <span class="number">4</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Exits when limit is exceeded</span></span><br><span class="line">        <span class="keyword">if</span> cur_len &gt; max_len.</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Add text</span></span><br><span class="line">        returns.append(row[<span class="string">&quot;text&quot;</span>])</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;\n\n###\n\n&quot;</span>.join(returns)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># token split</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_into_many</span>(<span class="params">text, max_tokens = max_tokens</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Define segmentation symbols, allowing customization</span></span><br><span class="line">    sentences = re.split(<span class="string">&#x27;[.。！？!?]&#x27;</span>,text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get token for each sentence</span></span><br><span class="line">    n_tokens = [<span class="built_in">len</span>(tokenizer.encode(<span class="string">&quot; &quot;</span> + sentence)) <span class="keyword">for</span> sentence <span class="keyword">in</span> sentences]</span><br><span class="line">    </span><br><span class="line">    chunks = []</span><br><span class="line">    tokens_so_far = <span class="number">0</span></span><br><span class="line">    chunk = []</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> sentence, token <span class="keyword">in</span> <span class="built_in">zip</span>(sentences, n_tokens):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If the number of tokens so far plus the number of tokens in the current sentence is greater than,greater than the maximum number of tokens, the block is added to the list of blocks and the number of blocks and tokens so far is reset</span></span><br><span class="line">        <span class="keyword">if</span> tokens_so_far + token &gt; max_tokens:</span><br><span class="line">            chunks.append(<span class="string">&quot;. &quot;</span>.join(chunk) + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">            chunk = []</span><br><span class="line">            tokens_so_far = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> token &gt; max_tokens:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        chunk.append(sentence)</span><br><span class="line">        tokens_so_far += token + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chunks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">answer_question</span>(<span class="params"></span></span><br><span class="line"><span class="params">    df,</span></span><br><span class="line"><span class="params">    model=<span class="string">&quot;text-davinci-003&quot;</span>,</span></span><br><span class="line"><span class="params">    question=<span class="string">&quot;what&#x27;s your problem&quot;</span>,</span></span><br><span class="line"><span class="params">    max_len=<span class="number">1800</span>,</span></span><br><span class="line"><span class="params">    size=<span class="string">&quot;ada&quot;</span>,</span></span><br><span class="line"><span class="params">    debug=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    max_tokens=<span class="number">1800</span>,</span></span><br><span class="line"><span class="params">    stop_sequence=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    use_GPT=<span class="literal">False</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    answer</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    context = create_context(</span><br><span class="line">        question,</span><br><span class="line">        df,</span><br><span class="line">        max_len=max_len,</span><br><span class="line">        size=size,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># If debug, print the raw model response</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Context:\n&quot;</span> + context)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> use_GPT:</span><br><span class="line">        completion = openai.ChatCompletion.create(model=<span class="string">&quot;gpt-3.5-turbo&quot;</span>,messages=[</span><br><span class="line">    &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>&#125;])</span><br><span class="line">        <span class="keyword">return</span> completion.to_dict()[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;message&quot;</span>][<span class="string">&quot;content&quot;</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Create a completions using the question and context</span></span><br><span class="line">        response = openai.Completion.create(</span><br><span class="line">            prompt=<span class="string">f&quot;Answer the question based on the context below, and if the question can&#x27;t be answered based on the context, say \&quot;I don&#x27;t know\&quot;\n\nContext: <span class="subst">&#123;context&#125;</span>\n\n---\n\nQuestion: <span class="subst">&#123;question&#125;</span>\nAnswer:&quot;</span>,</span><br><span class="line">            temperature=<span class="number">0</span>,</span><br><span class="line">            max_tokens=max_tokens,</span><br><span class="line">            top_p=<span class="number">1</span>,</span><br><span class="line">            frequency_penalty=<span class="number">0</span>,</span><br><span class="line">            presence_penalty=<span class="number">0</span>,</span><br><span class="line">            stop=stop_sequence,</span><br><span class="line">            model=model,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response[<span class="string">&quot;choices&quot;</span>][<span class="number">0</span>][<span class="string">&quot;text&quot;</span>].strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crawler(base_url,username,password,space_key)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Original Text</span></span><br><span class="line">texts=[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(filePath):</span><br><span class="line">    <span class="comment"># file read</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filePath+file, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        titles = file.split(splitFlag)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(titles) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        title = titles[<span class="number">1</span>]</span><br><span class="line">        text = f.read()</span><br><span class="line">        <span class="comment"># Title restore, replace _ with a space insert</span></span><br><span class="line">        texts.append((title.replace(replaceFlag,<span class="string">&quot; &quot;</span>), text))</span><br><span class="line">        </span><br><span class="line">df = pd.DataFrame(texts, columns = [<span class="string">&#x27;fname&#x27;</span>, <span class="string">&#x27;text&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># split by row</span></span><br><span class="line">df[<span class="string">&#x27;text&#x27;</span>] = df.fname + <span class="string">&quot;. &quot;</span> + remove_newlines(df.text)</span><br><span class="line">df.to_csv(<span class="string">&#x27;processed/scraped.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p></p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>fname</th><br>      <th>text</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>    </tr><br>  </tbody><br></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tokenizer = tiktoken.get_encoding(<span class="string">&quot;cl100k_base&quot;</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;processed/scraped.csv&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df.columns = [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;text&#x27;</span>]</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line"></span><br><span class="line">df</span><br></pre></td></tr></table></figure><p></p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>title</th><br>      <th>text</th><br>      <th>n_tokens</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>1423</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>1355</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>bak.B1.1 Payment Center Integration Test Repor…</td><br>      <td>1106</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>2022-03-15  [VWASP] 【ULH】DP token exchange wit…</td><br>      <td>1429</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>OnlineRadio and OlineMusic B0.2 testcase revie…</td><br>      <td>2736</td><br>    </tr><br>    <tr><br>      <th>…</th><br>      <td>…</td><br>      <td>…</td><br>      <td>…</td><br>    </tr><br>    <tr><br>      <th>412</th><br>      <td>B1 OnePortal Qulification Test Report.txt</td><br>      <td>B1 OnePortal Qulification Test Report.txt.   #…</td><br>      <td>966</td><br>    </tr><br>    <tr><br>      <th>413</th><br>      <td>Detailed Solution Architecture.txt</td><br>      <td>Detailed Solution Architecture.txt. 250</td><br>      <td>8</td><br>    </tr><br>    <tr><br>      <th>414</th><br>      <td>B1.3 Release.txt</td><br>      <td>B1.3 Release.txt. true</td><br>      <td>9</td><br>    </tr><br>    <tr><br>      <th>415</th><br>      <td>04  B1验收Charging&amp;RBC.txt</td><br>      <td>04  B1验收Charging&amp;RBC.txt.  L1| L2| L3| | | L4|…</td><br>      <td>1492</td><br>    </tr><br>    <tr><br>      <th>416</th><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>ULH - Integration Outline and API-Specificatio…</td><br>      <td>38</td><br>    </tr><br>  </tbody><br></table><br><p>417 rows × 3 columns</p><br><br><br><br><br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Tokenize the text and save the number of tokens to a new column</span></span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualize the distribution of the number of tokens per row using a histogram</span></span><br><span class="line">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br>    <a href="AxesSubplot:">AxesSubplot:</a><br><br><br><br><br><img src="/en/2023/05/12/algorithm/chatGPT-with-confluence/output_7_1-3877587.png" alt="png"><br>​<br><br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">shortened = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Cyclic text reduction</span></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(row)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> row[<span class="number">1</span>][<span class="string">&#x27;n_tokens&#x27;</span>] &gt; max_tokens:</span><br><span class="line">        shortened += split_into_many(row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        shortened.append( row[<span class="number">1</span>][<span class="string">&#x27;text&#x27;</span>] )</span><br><span class="line">df = pd.DataFrame(shortened, columns = [<span class="string">&#x27;text&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;n_tokens&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(tokenizer.encode(x)))</span><br><span class="line">df.n_tokens.hist()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><img src="/en/2023/05/12/algorithm/chatGPT-with-confluence/output_8_1-3877587.png" alt="png"><br>​<br><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Due to the official limit, a maximum of 60 requests initiated in 1 minute, so to prevent the reporting of errors here active hibernation</span></span><br><span class="line"><span class="comment">## due to the amount of data is too large, if you can not run, you can intercept part of the data in the above column df = df[0:x] x is the interception length</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cal</span>(<span class="params">x,waittime = <span class="number">0.6</span></span>):</span><br><span class="line">    res = openai.Embedding.create(<span class="built_in">input</span>=x, engine=<span class="string">&#x27;text-embedding-ada-002&#x27;</span>)[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;embedding&#x27;</span>]</span><br><span class="line">    time.sleep(waittime)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">df[<span class="string">&#x27;embeddings&#x27;</span>] = df.text.apply(<span class="keyword">lambda</span> x: cal(x))</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&#x27;processed/embeddings.csv&#x27;</span>)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><br><br><br><br><br><br><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><p></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##read token</span></span><br><span class="line">df=pd.read_csv(<span class="string">&#x27;processed/embeddings.csv&#x27;</span>, index_col=<span class="number">0</span>)</span><br><span class="line">df[<span class="string">&#x27;embeddings&#x27;</span>] = df[<span class="string">&#x27;embeddings&#x27;</span>].apply(<span class="built_in">eval</span>).apply(np.array)</span><br><span class="line">df.head()</span><br></pre></td></tr></table></figure><p></p><p><table border="1" class="dataframe"><br>  <thead><br>    <tr style="text-align: right;"><br>      <th></th><br>      <th>text</th><br>      <th>n_tokens</th><br>      <th>embeddings</th><br>    </tr><br>  </thead><br>  <tbody><br>    <tr><br>      <th>0</th><br>      <td>2022-12-15【VWASP】【IDP】Scan qrcode login HU to …</td><br>      <td>472</td><br>      <td>[-0.0035752991680055857, 0.015155627392232418,…</td><br>    </tr><br>    <tr><br>      <th>1</th><br>      <td>| 11 incomplete | /  6 | 用例设计是否包含充分的正面、负面异常测试…</td><br>      <td>343</td><br>      <td>[0.012331507168710232, 0.002946529071778059, -…</td><br>    </tr><br>    <tr><br>      <th>2</th><br>      <td>2022-12-19   【VWASP】【StartupBroadcasting】Conte…</td><br>      <td>454</td><br>      <td>[0.004054947756230831, -0.0028905682265758514,…</td><br>    </tr><br>    <tr><br>      <th>3</th><br>      <td>| 203 complete OK |  |   <strong>专属部分</strong> |  | 检查人：Zh…</td><br>      <td>492</td><br>      <td>[0.019448528066277504, 0.00747803645208478, 0….</td><br>    </tr><br>    <tr><br>      <th>4</th><br>      <td>bak. B1. 1 Payment Center Integration Test Rep…</td><br>      <td>481</td><br>      <td>[0.0010055731981992722, -0.013514618389308453,…</td><br>    </tr><br>  </tbody><br></table><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##Enter the maximum token and return the length for questioning, here we use Chinese for testing to check the applicability of different languages</span></span><br><span class="line">answer_question(df, question=<span class="string">&quot;测试用例需要满足那些要求?&quot;</span>, debug=<span class="literal">False</span>,use_GPT=<span class="literal">True</span>,max_len=<span class="number">1800</span>,max_tokens = <span class="number">1800</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;测试用例需要满足许多要求，包括但不限于：前提条件、输入数据和期待结果清晰、明确；包含充分的正面、负面异常测试用例；是否从用户层面来设计用户使用场景和使用流程的测试用例；是否简洁，复用性强等。具体要求见上文中的各项检查项。&apos;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">answer_question(df, question=<span class="string">&quot;一份DD文档或是AD文档需要满足那些要求?,请用中文回答&quot;</span>, debug=<span class="literal">False</span>,use_GPT=<span class="literal">True</span>,max_len=<span class="number">1800</span>,max_tokens = <span class="number">1800</span>)</span><br></pre></td></tr></table></figure><pre><code>&apos;DD文档或AD文档需要满足以下要求：\n1. 它应该清晰明了，包括应用的功能、性能、界面、安全等方面。\n2. 它应该易于理解，包括适当的说明、流程图、状态图等。\n3. 它应该满足可复用性、易维护性等软件工程的基本原则。\n4. 它应该包括可靠性需求，描述系统的可用性、健壮性等需求。\n5. 它应该考虑约束和假设，包括客户和MA的约束和假设。\n6. 它应该包括详细设计，以阐明更改的原因和过程，并进行一致性评估。\n7. 它应该考虑软件单元的互操作性、交互、关键性、技术复杂性、风险和可测试性等方面。 \n8. 它应该包括接口定义，以使接口清楚明了。\n9. 历史记录应该得到正确维护。&apos;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Target&quot;&gt;&lt;a href=&quot;#Target&quot; class=&quot;headerlink&quot; title=&quot;Target:&quot;&gt;&lt;/a&gt;Target:&lt;/h3&gt;&lt;p&gt;Since there are too many files in Confluence at work, which are also cluttered and difficult to read, I hope chatGPT-based can help me quickly get the knowledge I want from the files&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="algorithm" scheme="http://pjpjsocute.github.io/en/tags/algorithm/"/>
    
      <category term="python" scheme="http://pjpjsocute.github.io/en/tags/python/"/>
    
      <category term="chatGpt" scheme="http://pjpjsocute.github.io/en/tags/chatGpt/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-386</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-386/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-386/</id>
    <published>2023-05-12T07:31:09.000Z</published>
    <updated>2023-05-12T14:31:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h3><p>Given an integer <code>n</code>, return all the numbers in the range <code>[1, n]</code> sorted in lexicographical order.</p><p>You must write an algorithm that runs in <code>O(n)</code> time and uses <code>O(1)</code> extra space. </p><span id="more"></span><h3 id="S："><a href="#S：" class="headerlink" title="S："></a>S：</h3><p>First: the dictionary order can be abstracted as a tree, as shown in the following figure</p><p><img src="/en/2023/05/12/LeetCode/LeetCode-386/1603875858-aRThUF-QQ20201028-170405@2x.png" alt="1603875858-aRThUF-QQ20201028-170405@2x"></p><p>So, there is a small to large output is actually the output of his prior traversal</p><p><strong>Reference to the prior-order traversal of the binary search tree write </strong></p><ol><li>Recursion:</li></ol><p>The difference here is the need to round off the head node 0, to 1-9 respectively as the root node for traversal output: 1:</p><ol><li><p>recursion end condition, the current node &gt; n, the recursion ends</p></li><li><p>add the element value into res, traverse its 10 sibling nodes, enter the recursion of its child nodes</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">             dfs(n, i, list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> i,List&lt;Integer&gt;list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line">            dfs(n,i*<span class="number">10</span>+j,list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>​    2.迭代:</p><p>\2. Iteration .</p><p><strong>tipp </strong>: <code>while(curr%10==0) curr/=10;</code> The purpose of this line of code is to handle numbers that should end early in the dictionary order.</p><p>For example, suppose <code>n</code> is 130. When we traverse through the dictionary order, it should be in this order: 1, 10, 11, … , 19, 2, 20, … , 19, 2, 20, … , 29, … , 13, 130, 14, … , 19, 2, … , 9.</p><p>After our <code>curr</code> becomes 130, if we directly <code>curr+=1</code>, then <code>curr</code> becomes 131, which is obviously more than <code>n</code> and does not fit the dictionary order. We should skip all 13x (x &gt; 0) numbers and just become 14.</p><p>This is the purpose of the line <code>while(curr%10==0) curr/=10;</code>: </p><p>when the last digit of <code>curr</code> is 0 (i.e. <code>curr%10==0</code>), we should fall back to the previous level (i.e. <code>curr/=10</code>). In this example, 130 falls back to 13, and then <code>curr+=1</code> becomes 14, so that it is in dictionary order.</p><p>This treatment ensures that our traversal order is always in dictionary order, i.e., we traverse </p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">lexicalOrder</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">         List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">         <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">         <span class="comment">// 遍历/traverse</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">             list.add(curr);</span><br><span class="line">             <span class="keyword">if</span>(curr*<span class="number">10</span>&lt;=n)&#123;</span><br><span class="line">                 curr*=<span class="number">10</span>;<span class="comment">//遍历下一层/find next level number</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(curr&gt;=n)   curr/=<span class="number">10</span>;<span class="comment">//如果比n大，结束遍历退回上一层/If greater than n, end traversal and return to previous level</span></span><br><span class="line">                 curr+=<span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">while</span>(curr%<span class="number">10</span>==<span class="number">0</span>) curr/=<span class="number">10</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> list;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Q：&quot;&gt;&lt;a href=&quot;#Q：&quot; class=&quot;headerlink&quot; title=&quot;Q：&quot;&gt;&lt;/a&gt;Q：&lt;/h3&gt;&lt;p&gt;Given an integer &lt;code&gt;n&lt;/code&gt;, return all the numbers in the range &lt;code&gt;[1, n]&lt;/code&gt; sorted in lexicographical order.&lt;/p&gt;
&lt;p&gt;You must write an algorithm that runs in &lt;code&gt;O(n)&lt;/code&gt; time and uses &lt;code&gt;O(1)&lt;/code&gt; extra space. &lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="DFS" scheme="http://pjpjsocute.github.io/en/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-934</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-934/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/LeetCode/LeetCode-934/</id>
    <published>2023-05-12T07:22:55.000Z</published>
    <updated>2023-05-12T14:29:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-934"><a href="#LeetCode-934" class="headerlink" title="LeetCode-934"></a>LeetCode-934</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question:"></a>Question:</h3><p>You are given an <code>n x n</code> binary matrix <code>grid</code> where <code>1</code> represents land and <code>0</code> represents water.</p><p>An <strong>island</strong> is a 4-directionally connected group of <code>1</code>‘s not connected to any other <code>1</code>‘s. There are <strong>exactly two islands</strong> in <code>grid</code>.</p><p>You may change <code>0</code>‘s to <code>1</code>‘s to connect the two islands to form <strong>one island</strong>.</p><p>Return <em>the smallest number of</em> <code>0</code><em>‘s you must flip to connect the two islands</em>.</p><span id="more"></span><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution:"></a>Solution:</h3><p>Since there are only 2 islands in the stem, we can use a deep search to find one of them first.</p><p>Using breadth-first search for this island can be interpreted as expanding this island outward 1 at a time, and when the expansion finds the other island for the Nth time, it is the solution sought by the stem.</p><p>### </p><h3 id="Code："><a href="#Code：" class="headerlink" title="Code："></a>Code：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">shortestBridge</span><span class="params">(<span class="type">int</span>[][] A)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [][] direction = <span class="keyword">new</span> <span class="title class_">int</span> [][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        Deque&lt;<span class="type">int</span> []&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> [][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[A.length][A[<span class="number">0</span>].length];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;A.length&amp;&amp;flag;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;A[<span class="number">0</span>].length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (A[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    dfs(  A, i, j, queue, visited);</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="type">int</span> []node = queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">                    <span class="type">int</span>  <span class="variable">nx</span> <span class="operator">=</span> node[<span class="number">0</span>]+direction[j][<span class="number">0</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">ny</span> <span class="operator">=</span> node[<span class="number">1</span>]+direction[j][<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(nx&lt;<span class="number">0</span>||nx&gt;=A.length||ny&lt;<span class="number">0</span>||ny&gt;=A[<span class="number">0</span>].length||visited[nx][ny])    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(A[nx][ny]==<span class="number">1</span>)    <span class="keyword">return</span> ans;</span><br><span class="line">                    visited[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span> []&#123;nx,ny&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> [][]A,<span class="type">int</span> i,<span class="type">int</span> j,Deque queue,<span class="type">boolean</span>[][]visited)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=A.length||j&lt;<span class="number">0</span>||j&gt;=A[<span class="number">0</span>].length||visited[i][j]||A[i][j]!=<span class="number">1</span>)    <span class="keyword">return</span>;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        queue.add(<span class="keyword">new</span> <span class="title class_">int</span> []&#123;i,j&#125;);</span><br><span class="line">        dfs( A, i-<span class="number">1</span>, j, queue, visited);</span><br><span class="line">        dfs( A, i+<span class="number">1</span>, j, queue, visited);</span><br><span class="line">        dfs( A, i, j-<span class="number">1</span>, queue, visited);</span><br><span class="line">        dfs( A, i, j+<span class="number">1</span>, queue, visited);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LeetCode-934&quot;&gt;&lt;a href=&quot;#LeetCode-934&quot; class=&quot;headerlink&quot; title=&quot;LeetCode-934&quot;&gt;&lt;/a&gt;LeetCode-934&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question:&quot;&gt;&lt;/a&gt;Question:&lt;/h3&gt;&lt;p&gt;You are given an &lt;code&gt;n x n&lt;/code&gt; binary matrix &lt;code&gt;grid&lt;/code&gt; where &lt;code&gt;1&lt;/code&gt; represents land and &lt;code&gt;0&lt;/code&gt; represents water.&lt;/p&gt;
&lt;p&gt;An &lt;strong&gt;island&lt;/strong&gt; is a 4-directionally connected group of &lt;code&gt;1&lt;/code&gt;‘s not connected to any other &lt;code&gt;1&lt;/code&gt;‘s. There are &lt;strong&gt;exactly two islands&lt;/strong&gt; in &lt;code&gt;grid&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may change &lt;code&gt;0&lt;/code&gt;‘s to &lt;code&gt;1&lt;/code&gt;‘s to connect the two islands to form &lt;strong&gt;one island&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Return &lt;em&gt;the smallest number of&lt;/em&gt; &lt;code&gt;0&lt;/code&gt;&lt;em&gt;‘s you must flip to connect the two islands&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="LeetCode" scheme="http://pjpjsocute.github.io/en/tags/LeetCode/"/>
    
      <category term="DFS" scheme="http://pjpjsocute.github.io/en/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>springboot+cucumber practice</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/bdd/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/bdd/</id>
    <published>2023-05-12T07:09:40.000Z</published>
    <updated>2023-05-12T13:17:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot-cucumber实践"><a href="#springboot-cucumber实践" class="headerlink" title="springboot+cucumber实践"></a>springboot+cucumber实践</h1><h2 id="why-BDD"><a href="#why-BDD" class="headerlink" title="why BDD"></a>why BDD</h2><ul><li><strong>Achieve business objectives.”</strong></li><li><strong>Focus on user needs”</strong></li><li><strong>Good readability</strong></li></ul><p>Actually, there are other reasons for me as well:</p><ol><li>Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.</li><li>Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.</li></ol><span id="more"></span><h2 id="Sample-Project-Start"><a href="#Sample-Project-Start" class="headerlink" title="Sample Project Start"></a>Sample Project Start</h2><h4 id="Project-stratification"><a href="#Project-stratification" class="headerlink" title="Project stratification:"></a>Project stratification:</h4><p><img src="/en/2023/05/12/bdd/WX20230512-151458@2x.png" alt="WX20230512-151458@2x"></p><h4 id="Code"><a href="#Code" class="headerlink" title="Code:"></a>Code:</h4><p>Take <strong>functional configuration</strong> single upline operation as an example</p><p>There is a go live interface in the application</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">interface</span> ConfigurationCmdService&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * online</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cmd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Result&lt;Boolean&gt;  <span class="title function_">online</span><span class="params">(ConfigOnlineCmd cmd)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The interface needs to implement the on-line function</span></span><br><span class="line"><span class="comment">* Assume that the operation requires only 3 steps:</span></span><br><span class="line"><span class="comment">* 1. Find out the configuration that needs to go live</span></span><br><span class="line"><span class="comment">* 2. Go live operation</span></span><br><span class="line"><span class="comment">* 3. Update the db</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">class</span> ConfigurationCmdServiceImpl <span class="keyword">implements</span> <span class="title class_">ConfigurationCmdService</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigRepository    repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConfigurationCmdServiceImpl</span><span class="params">(ConfigRepository repository,ConfigFactory factory)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = repository;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ManualQueryServiceImpl</span><span class="params">(SnapshotRepository repository, ManualSnapshotFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.repository = repository;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AutoWired</span></span><br><span class="line">    Result&lt;Boolean&gt;  <span class="title function_">online</span><span class="params">(ConfigOnlineCmd cmd)</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> repository.queryById(cmd.getId());</span><br><span class="line">        config.online();</span><br><span class="line">        <span class="comment">//可能还有其他的一些操作</span></span><br><span class="line">        <span class="keyword">return</span> repository.update(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BDD-access"><a href="#BDD-access" class="headerlink" title="BDD access"></a>BDD access</h2><h3 id="Preliminary-work"><a href="#Preliminary-work" class="headerlink" title="Preliminary work"></a>Preliminary work</h3><h4 id="cucumber-dependency"><a href="#cucumber-dependency" class="headerlink" title="cucumber dependency"></a>cucumber dependency</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bdd dependency --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.cucumber<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cucumber-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Combined-with-junit4"><a href="#Combined-with-junit4" class="headerlink" title="Combined with junit4"></a>Combined with junit4</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                        com.example.**Test.java</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>false<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.surefire<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>surefire-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Combine-with-jacoco-to-generate-single-test-reports"><a href="#Combine-with-jacoco-to-generate-single-test-reports" class="headerlink" title="Combine with jacoco to generate single test reports"></a>Combine with jacoco to generate single test reports</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jacoco.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>report<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- -Exclude the toolkit Let&#x27;s say that the toolkit needs to be excluded--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.example.util.*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="First-step"><a href="#First-step" class="headerlink" title="First step"></a>First step</h3><p>Start the class</p><p>glue actually tells cucumber to scan the file containing @CucumberContextConfiguration under the corresponding package when it starts</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(Cucumber.class)</span></span><br><span class="line"><span class="meta">@CucumberOptions(</span></span><br><span class="line"><span class="meta">        features = &#123;&quot;classpath:feature&quot;&#125;,</span></span><br><span class="line"><span class="meta">        glue = &#123;&quot;com.example.step&quot;&#125;,</span></span><br><span class="line"><span class="meta">        plugin = &#123;&quot;pretty&quot;,&quot;html:target/html-reports.htm&quot;&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Configure the beans that need to be started in the test and some beans that need to be de-mocked,</p><p>The init method is triggered before running, and the reset method is shown in step 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CucumberContextConfiguration</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;</span></span><br><span class="line"><span class="meta">        SpringTestConfig.class,</span></span><br><span class="line"><span class="meta">        MockObjectConfiguration.class</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Resetable&gt; resetables;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        CollectionUtils.emptyIfNull(resetables)</span><br><span class="line">                .stream().forEach(v-&gt;v.reset());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h3><p>Create a new feature file under classpath:feature</p><p>#language:zh-CN for Chinese language</p><figure class="highlight feature"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Feature</span>:Configured crud operations</span><br><span class="line">  <span class="keyword">Scenario</span>:Online a configuration</span><br><span class="line">    <span class="keyword">Given</span> The following configurations exist</span><br><span class="line">        |<span class="string">id  </span>|<span class="string"> content</span>|<span class="string"> status </span>|<span class="string"> bizCode </span>|</span><br><span class="line">        |<span class="string">1 </span>|<span class="string">xxxxx   </span>|<span class="string"> AUDIT  </span>|<span class="string"> XXXX    </span>|</span><br><span class="line">        |<span class="string">2 </span>|<span class="string">xxxxx   </span>|<span class="string"> DRAFT  </span>|<span class="string"> XXXX    </span>|</span><br><span class="line">    <span class="keyword">When</span> id is <span class="string">&quot;1&quot;</span> on line</span><br><span class="line">        |<span class="string"> languageType </span>|<span class="string"> bizCode </span>|</span><br><span class="line">        |<span class="string"> zh_CN        </span>|<span class="string"> 008     </span>|</span><br><span class="line">    <span class="keyword">Then</span> The configuration status of id <span class="string">&quot;1&quot;</span> is <span class="string">&quot;On-line&quot;</span></span><br></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>实现上述的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContentStep</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FakeConfigRepositoryImpl       configRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String                            result;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConfigurationCmdService cmdService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_CODE</span> <span class="operator">=</span> <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">AssertService</span> <span class="variable">contentAssertService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AssertService</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String&gt; codeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,String&gt;()&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            put(<span class="string">&quot;上线&quot;</span>,<span class="string">&quot;ONLINE&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;审核&quot;</span>,<span class="string">&quot;AUDIT&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;草稿&quot;</span>,<span class="string">&quot;DRAFT&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Given(&quot;The following configurations exist&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> The following configurations <span class="title function_">exist</span><span class="params">(DataTable dataTable)</span> &#123;</span><br><span class="line">        <span class="comment">//Create contents based on dataTable</span></span><br><span class="line">        List&lt;Config&gt; configs = ConfigTransform.transToConfig(dataTable.entries());</span><br><span class="line">        contentRepository.createAll(configs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Then(&quot;The configuration status of id &#123;string&#125; is &#123;string&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">The_configuration_status_of_id_is</span><span class="params">(String id,String status)</span>&#123;</span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> configRepository.queryById(id);</span><br><span class="line">        <span class="comment">//判断结果</span></span><br><span class="line">        Assert.assertEquals(config.getStatus(),codeMap.get(status));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@When(&quot;id is &#123;string&#125; on line&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">id_is_on_line</span><span class="params">(String id)</span>&#123;</span><br><span class="line">        <span class="comment">//Create command</span></span><br><span class="line">        <span class="type">ContentCreateParam</span> <span class="variable">param</span> <span class="operator">=</span> createOnlineCmd(id);</span><br><span class="line">        <span class="comment">//Get Results</span></span><br><span class="line">        result = cmdService.online(param).getData().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>mock db, external services. Take mock db as an example</p><p>DB uses a map to mock database operations</p><p>The reset operation is used to empty the map, and the map is automatically emptied for each use case.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FakeConfigRepositoryImpl</span> <span class="keyword">implements</span> <span class="title class_">SearchDataRepository</span> ,Resetable&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SearchDataDO&gt; doMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigConverter converter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FakeSearchDataRepositoryImpl</span><span class="params">(SearchDataConverter converter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.doMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.converter = converter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create Data</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">create</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        <span class="type">ConfigDO</span> <span class="variable">configDo</span> <span class="operator">=</span> converter.convert2DO(config);</span><br><span class="line">        doMap.put(String.valueOf(config.getId()),configDo);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * update</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> searchData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Config config)</span> &#123;</span><br><span class="line">        create(searchData);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        doMap.clear();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>spring-test and spring-context versions must be the same, otherwise it will report an error</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;springboot-cucumber实践&quot;&gt;&lt;a href=&quot;#springboot-cucumber实践&quot; class=&quot;headerlink&quot; title=&quot;springboot+cucumber实践&quot;&gt;&lt;/a&gt;springboot+cucumber实践&lt;/h1&gt;&lt;h2 id=&quot;why-BDD&quot;&gt;&lt;a href=&quot;#why-BDD&quot; class=&quot;headerlink&quot; title=&quot;why BDD&quot;&gt;&lt;/a&gt;why BDD&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Achieve business objectives.”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Focus on user needs”&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Good readability&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actually, there are other reasons for me as well:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Due to objective reasons, sometimes I only receive the PRD (Product Requirements Document) after the project development is completed. Therefore, in the early stages of development, it is easier to identify issues by establishing clear business processes through certain means rather than diving directly into development. Compared to traditional documentation (DD documents), BDD (Behavior-Driven Development) features may be easier for non-developers to understand.&lt;/li&gt;
&lt;li&gt;Documentation tends to lag behind, but it helps me or other colleagues who take over the project in the future to quickly review or understand the requirements of a particular business.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="project" scheme="http://pjpjsocute.github.io/en/tags/project/"/>
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Data structures - chain tables, stacks, queues</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/Datastructures/LinkedList/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/Datastructures/LinkedList/</id>
    <published>2023-05-12T05:15:17.000Z</published>
    <updated>2023-05-12T14:09:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>Link tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.</p><h3 id="Linked-list"><a href="#Linked-list" class="headerlink" title="Linked list"></a>Linked list</h3><p>A threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.</p><p><img src="/en/2023/05/12/Datastructures/LinkedList/WX20230512-133517@2x.png" alt="linkedlist"></p><span id="more"></span><p>To implement a linked list of tables using java, you first need to define a node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T       value;</span><br><span class="line">        Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Therefore, for a linked list, if you want to find an element based on the index, you can only start from the beginning with time complexity O(N).</p><p>If a predecessor node is added to the Node, then it becomes a bi-directional linked list.</p><p><img src="/en/2023/05/12/Datastructures/LinkedList/WX20230512-134440@2x.png" alt="doublelinkedlist"></p><p>The LinkedList in Java is a typical two-way linked list.</p><p>If you combine HashMap(Set) on LinkedList, it is <strong>LinkedHashMap</strong>(Set), which ensures the orderliness of the elements and allows O1 to get the elements.</p><p>A simple implementation of a linked list is as follows</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Singly linked list</span></span><br><span class="line"><span class="comment">// The head node does not store elements</span></span><br><span class="line"><span class="comment">// Need to record the head node, content is null; record the length of the list</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> Node head; <span class="comment">// head node</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N; <span class="comment">// length of the list</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">        T item; <span class="comment">// store element</span></span><br><span class="line">        Node next; <span class="comment">// point to the next node, a Node object</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item, Node next)</span>&#123; <span class="comment">// constructor with arguments</span></span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkList</span><span class="params">()</span>&#123; <span class="comment">// constructor with no arguments</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123; <span class="comment">// clear the list: head node does not point to the next element</span></span><br><span class="line">        N=<span class="number">0</span>;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123; <span class="comment">// check if the list is empty</span></span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>&#123; <span class="comment">// get the length of the list</span></span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span>&#123; <span class="comment">// get the i-th element</span></span><br><span class="line">        <span class="comment">// Use loop, traverse from the head node, find i times</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span><span class="number">0</span>;index &lt;i;index++)&#123;</span><br><span class="line">            n = n.next; <span class="comment">// loop to point to the next node</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) n.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T t)</span>&#123; <span class="comment">// insert data</span></span><br><span class="line">                             <span class="comment">// adding elements only requires the last node to point to the new node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(n.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            n = n.next; <span class="comment">// tail node cannot be null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">        n.next =newNode;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i,T t)</span>&#123; <span class="comment">// insert data before i</span></span><br><span class="line">                                   <span class="comment">// find the node before i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;index&lt;=i-<span class="number">1</span>;index++)&#123; <span class="comment">// because the head node actually loops i-1 times</span></span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">                                   <span class="comment">// find the i node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// create a new node and point to i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,curr);</span><br><span class="line">        <span class="comment">// node before i points to the new node</span></span><br><span class="line">        pre.next = newNode;</span><br><span class="line">        <span class="comment">// increment by 1</span></span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">remove</span> <span class="params">(<span class="type">int</span> i)</span>&#123; <span class="comment">// remove the i-th element and return it</span></span><br><span class="line">        <span class="comment">// get the node before i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;index&lt;=i-<span class="number">1</span>;index++)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// find i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">curr</span> <span class="operator">=</span> pre.next;</span><br><span class="line">        <span class="comment">// find the node after i</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">fur</span> <span class="operator">=</span> curr.next;</span><br><span class="line">        <span class="comment">// connect the two and decrement by 1</span></span><br><span class="line">        pre.next = fur;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> (T) curr.item;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(T t)</span>&#123; <span class="comment">// return the first occurrence of the element</span></span><br><span class="line">        <span class="comment">// start iterating from the head node, find every node&#x27;s element, take out item and compare with T</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">n</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;n.next!=<span class="literal">null</span>;i++)&#123; <span class="comment">// keep finding as long as the next element is not null</span></span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">if</span> (n.item.equals(t))&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="comment">// no alert has been set for elements that do not exist</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span>&#123;  <span class="comment">//Flipping single linked list; Recursive flipping</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            reverse(head.next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">reverse</span><span class="params">(Node curr)</span>&#123; <span class="comment">//flip the single-linked cur, and return</span></span><br><span class="line">        <span class="keyword">if</span>(curr.next==<span class="literal">null</span>)&#123;</span><br><span class="line">            head.next = curr;</span><br><span class="line">            <span class="keyword">return</span> curr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//recursively reverse the next node of the current node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">per</span> <span class="operator">=</span> reverse(curr.next); <span class="comment">// the new node is the next node after the flip</span></span><br><span class="line">        per.next = curr; <span class="comment">//the next node of the new node is the previous node before reversal</span></span><br><span class="line">        curr.next = <span class="literal">null</span>; <span class="comment">//this node is set as the tail node</span></span><br><span class="line">        <span class="keyword">return</span> curr;</span><br><span class="line">            <span class="comment">//not the last node then recursively flip the node before the last node</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Translated with www.DeepL.com/Translator (free version)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head; <span class="comment">//// initialize</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123; <span class="comment">//execute next continuously if the hasNext condition is met</span></span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables"><a href="#Algorithm-problems-the-linked-table-often-appear-the-more-basic-types-of-questions-include-the-flip-of-the-chain-table-ring-judgment-ring-entry-multi-linked-table-to-find-the-Kth-big-smallest-element-etc-The-linked-table-is-also-the-basis-for-implementing-jump-tables" class="headerlink" title="Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables."></a>Algorithm problems, the linked table often appear, the more basic types of questions include: the flip of the chain table, ring judgment, ring entry, multi-linked table to find the Kth big/smallest element, etc.. The linked table is also the basis for implementing jump tables.</h4><h3 id="Queue-Stack"><a href="#Queue-Stack" class="headerlink" title="Queue/Stack"></a>Queue/Stack</h3><p>​    Chained tables and queues are essentially a special type of single-linked table, differing in that they restrict the order of insertion/deletion of elements.</p><h4 id="Queues"><a href="#Queues" class="headerlink" title="Queues:"></a>Queues:</h4><p>For a queue, elements enter from one end and exit from the other, that is, the elements that enter first are deleted first, called in English: First In, First Out, abbreviated FIFO.</p><p><img src="/en/2023/05/12/Datastructures/LinkedList/WX20230512-135224@2x.png" alt="queue"></p><p>​    The more classical use of queues is in breadth-first search (hierarchical traversal of trees is actually also breadth-first search). In addition, queues can also have order, called priority queues, which have been implemented in java and are called <strong>PriorityQueue</strong>.</p><h4 id="Queue-Code："><a href="#Queue-Code：" class="headerlink" title="Queue Code："></a>Queue Code：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FIFO Compared to a stack, one end of a queue goes in and one end goes out.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt;&#123;</span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item,Node next)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.item = item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Node head;  <span class="comment">//head</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">private</span> Node last;  <span class="comment">//tail</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Queue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.N = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">enqueue</span><span class="params">(T t)</span>&#123;           <span class="comment">//Insert the chain from tail, in order from the first node</span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)&#123;</span><br><span class="line">            last= <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">            head.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">oldlast</span> <span class="operator">=</span> last;</span><br><span class="line">            last = <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">            oldlast.next = last;</span><br><span class="line">        &#125;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;            <span class="comment">//Header node start deletion</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldeFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = oldeFirst.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="comment">//The delete queue is deleting elements, so it needs to be reset last</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            last = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T)oldeFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">QIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">QIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> (T)n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="stacks："><a href="#stacks：" class="headerlink" title="stacks："></a>stacks：</h4><p>The stack is the opposite, elements from one end into, to be from one end out. That is, first in, last out, called in English: First In, Last Out, or FILO.</p><p><img src="/en/2023/05/12/Datastructures/LinkedList/WX20230512-135651@2x.png" alt="stack"></p><p>​    Stacks are often used in algorithms, such as bracket punctuation matching problems, monotone stack problems, etc. Recursion is also a special use of stacks.</p><h4 id="Stack-Code"><a href="#Stack-Code" class="headerlink" title="Stack Code:"></a>Stack Code:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt;&#123;     </span><br><span class="line">        <span class="keyword">public</span> T item;</span><br><span class="line">        <span class="keyword">public</span> Node next;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T item,Node next)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.item =item;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> N;          <span class="comment">//Number of stack elements</span></span><br><span class="line">    <span class="keyword">private</span> Node head;      </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.N = N;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//insert</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T t)</span>&#123;</span><br><span class="line">        <span class="comment">//Find the first node pointed to by the first node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldNode</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//create new node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(t,<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//The first node points to the new node</span></span><br><span class="line">        head.next = newNode;</span><br><span class="line">        <span class="comment">//The new node points to the original first node</span></span><br><span class="line">        newNode.next = oldNode;</span><br><span class="line">        N++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//The head node points to the first node</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">oldFirst</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">//head.next = oldFirst.next is not safe and needs to be verified</span></span><br><span class="line">        <span class="keyword">if</span> (oldFirst==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = oldFirst.next;</span><br><span class="line">        N--;</span><br><span class="line">        <span class="keyword">return</span> (T)oldFirst.item;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LIterator</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">LIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node n;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">LIterator</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.n = head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n.next!=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">            <span class="keyword">return</span> n.item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Preface&quot;&gt;&lt;a href=&quot;#Preface&quot; class=&quot;headerlink&quot; title=&quot;Preface&quot;&gt;&lt;/a&gt;Preface&lt;/h3&gt;&lt;p&gt;Link tables, queues, and stacks are some of the most basic data structures, and link tables are the most basic. Most of the complex data structures that follow evolved from them.&lt;/p&gt;
&lt;h3 id=&quot;Linked-list&quot;&gt;&lt;a href=&quot;#Linked-list&quot; class=&quot;headerlink&quot; title=&quot;Linked list&quot;&gt;&lt;/a&gt;Linked list&lt;/h3&gt;&lt;p&gt;A threaded data structure that differs from an array in that it is not necessarily stored sequentially in memory space. To ensure the continuity of elements in a linked list, a pointer is generally used to find the next element.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/en/2023/05/12/Datastructures/LinkedList/WX20230512-133517@2x.png&quot; alt=&quot;linkedlist&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="technology" scheme="http://pjpjsocute.github.io/en/categories/technology/"/>
    
    
      <category term="java" scheme="http://pjpjsocute.github.io/en/tags/java/"/>
    
      <category term="Data structures" scheme="http://pjpjsocute.github.io/en/tags/Data-structures/"/>
    
  </entry>
  
  <entry>
    <title>Before Start</title>
    <link href="http://pjpjsocute.github.io/en/2023/05/12/start/"/>
    <id>http://pjpjsocute.github.io/en/2023/05/12/start/</id>
    <published>2023-05-12T04:14:16.000Z</published>
    <updated>2023-05-12T11:57:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>​        I had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I joined the new company, I decided to build a simple personal blog because I had time and some personal reasons, and the blog will record my technical problems and attempts, as well as record my learning and growth process.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        I had an idea of building a personal blog a long time ago, but I never put it into practice due to my studies and work. After I 
      
    
    </summary>
    
      <category term="life" scheme="http://pjpjsocute.github.io/en/categories/life/"/>
    
    
      <category term="Trying" scheme="http://pjpjsocute.github.io/en/tags/Trying/"/>
    
  </entry>
  
</feed>
